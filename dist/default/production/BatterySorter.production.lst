

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Feb 27 15:44:56 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	text47,global,reloc=2,class=CODE,delta=1
    61                           	psect	text48,global,reloc=2,class=CODE,delta=1
    62                           	psect	text49,global,reloc=2,class=CODE,delta=1
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1
    64                           	psect	text51,global,reloc=2,class=CODE,delta=1
    65                           	psect	text52,global,reloc=2,class=CODE,delta=1
    66                           	psect	text53,global,reloc=2,class=CODE,delta=1
    67                           	psect	text54,global,reloc=2,class=CODE,delta=1
    68                           	psect	text55,global,reloc=2,class=CODE,delta=1
    69                           	psect	text56,global,reloc=2,class=CODE,delta=1
    70                           	psect	text57,global,reloc=2,class=CODE,delta=1
    71                           	psect	text58,global,reloc=2,class=CODE,delta=1
    72                           	psect	text59,global,reloc=2,class=CODE,delta=1
    73                           	psect	text60,global,reloc=2,class=CODE,delta=1
    74                           	psect	text61,global,reloc=2,class=CODE,delta=1
    75                           	psect	text62,global,reloc=2,class=CODE,delta=1
    76                           	psect	text63,global,reloc=2,class=CODE,delta=1
    77                           	psect	text64,global,reloc=2,class=CODE,delta=1
    78                           	psect	text65,global,reloc=2,class=CODE,delta=1
    79                           	psect	text66,global,reloc=2,class=CODE,delta=1
    80                           	psect	text67,global,reloc=2,class=CODE,delta=1
    81                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    82                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    83                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    84  0000                     
    85                           ; Version 1.40
    86                           ; Generated 01/12/2016 GMT
    87                           ; 
    88                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    89                           ; All rights reserved.
    90                           ; 
    91                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    92                           ; 
    93                           ; Redistribution and use in source and binary forms, with or without modification, are
    94                           ; permitted provided that the following conditions are met:
    95                           ; 
    96                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    97                           ;        conditions and the following disclaimer.
    98                           ; 
    99                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   100                           ;        of conditions and the following disclaimer in the documentation and/or other
   101                           ;        materials provided with the distribution.
   102                           ; 
   103                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   104                           ;        software without specific prior written permission.
   105                           ; 
   106                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   107                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   108                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   109                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   110                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   111                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   112                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   113                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   114                           ; 
   115                           ; 
   116                           ; Code-generator required, PIC18F4620 Definitions
   117                           ; 
   118                           ; SFR Addresses
   119  0000                     
   120                           	psect	mediumconst
   121  00FE8C                     __pmediumconst:
   122                           	opt stack 0
   123  00FE8C  00                 	db	0
   124  00FE8D                     _dpowers:
   125                           	opt stack 0
   126  00FE8D  0001               	dw	1
   127  00FE8F  0000               	dw	0
   128  00FE91  000A               	dw	10
   129  00FE93  0000               	dw	0
   130  00FE95  0064               	dw	100
   131  00FE97  0000               	dw	0
   132  00FE99  03E8               	dw	1000
   133  00FE9B  0000               	dw	0
   134  00FE9D  2710               	dw	10000
   135  00FE9F  0000               	dw	0
   136  00FEA1  86A0               	dw	34464
   137  00FEA3  0001               	dw	1
   138  00FEA5  4240               	dw	16960
   139  00FEA7  000F               	dw	15
   140  00FEA9  9680               	dw	38528
   141  00FEAB  0098               	dw	152
   142  00FEAD  E100               	dw	57600
   143  00FEAF  05F5               	dw	1525
   144  00FEB1  CA00               	dw	51712
   145  00FEB3  3B9A               	dw	15258
   146  00FEB5                     __end_of_dpowers:
   147                           	opt stack 0
   148  00FEB5                     __npowers_:
   149                           	opt stack 0
   150  00FEB5  00                 	db	0
   151  00FEB6  80                 	db	128
   152  00FEB7  3F                 	db	63
   153  00FEB8  CD                 	db	205
   154  00FEB9  CC                 	db	204
   155  00FEBA  3D                 	db	61
   156  00FEBB  D7                 	db	215
   157  00FEBC  23                 	db	35
   158  00FEBD  3C                 	db	60
   159  00FEBE  12                 	db	18
   160  00FEBF  83                 	db	131
   161  00FEC0  3A                 	db	58
   162  00FEC1  B7                 	db	183
   163  00FEC2  D1                 	db	209
   164  00FEC3  38                 	db	56
   165  00FEC4  C6                 	db	198
   166  00FEC5  27                 	db	39
   167  00FEC6  37                 	db	55
   168  00FEC7  38                 	db	56
   169  00FEC8  86                 	db	134
   170  00FEC9  35                 	db	53
   171  00FECA  C0                 	db	192
   172  00FECB  D6                 	db	214
   173  00FECC  33                 	db	51
   174  00FECD  CC                 	db	204
   175  00FECE  2B                 	db	43
   176  00FECF  32                 	db	50
   177  00FED0  70                 	db	112
   178  00FED1  89                 	db	137
   179  00FED2  30                 	db	48
   180  00FED3  E7                 	db	231
   181  00FED4  DB                 	db	219
   182  00FED5  2E                 	db	46
   183  00FED6  E5                 	db	229
   184  00FED7  3C                 	db	60
   185  00FED8  1E                 	db	30
   186  00FED9  42                 	db	66
   187  00FEDA  A2                 	db	162
   188  00FEDB  0D                 	db	13
   189  00FEDC                     __end_of__npowers_:
   190                           	opt stack 0
   191  00FEDC                     __powers_:
   192                           	opt stack 0
   193  00FEDC  00                 	db	0
   194  00FEDD  80                 	db	128
   195  00FEDE  3F                 	db	63
   196  00FEDF  00                 	db	0
   197  00FEE0  20                 	db	32
   198  00FEE1  41                 	db	65
   199  00FEE2  00                 	db	0
   200  00FEE3  C8                 	db	200
   201  00FEE4  42                 	db	66
   202  00FEE5  00                 	db	0
   203  00FEE6  7A                 	db	122
   204  00FEE7  44                 	db	68
   205  00FEE8  40                 	db	64
   206  00FEE9  1C                 	db	28
   207  00FEEA  46                 	db	70
   208  00FEEB  50                 	db	80
   209  00FEEC  C3                 	db	195
   210  00FEED  47                 	db	71
   211  00FEEE  24                 	db	36
   212  00FEEF  74                 	db	116
   213  00FEF0  49                 	db	73
   214  00FEF1  97                 	db	151
   215  00FEF2  18                 	db	24
   216  00FEF3  4B                 	db	75
   217  00FEF4  BC                 	db	188
   218  00FEF5  BE                 	db	190
   219  00FEF6  4C                 	db	76
   220  00FEF7  6B                 	db	107
   221  00FEF8  6E                 	db	110
   222  00FEF9  4E                 	db	78
   223  00FEFA  03                 	db	3
   224  00FEFB  15                 	db	21
   225  00FEFC  50                 	db	80
   226  00FEFD  79                 	db	121
   227  00FEFE  AD                 	db	173
   228  00FEFF  60                 	db	96
   229  00FF00  F3                 	db	243
   230  00FF01  49                 	db	73
   231  00FF02  71                 	db	113
   232  00FF03                     __end_of__powers_:
   233                           	opt stack 0
   234  00FF03                     _hexpowers:
   235                           	opt stack 0
   236  00FF03  0001               	dw	1
   237  00FF05  0000               	dw	0
   238  00FF07  0010               	dw	16
   239  00FF09  0000               	dw	0
   240  00FF0B  0100               	dw	256
   241  00FF0D  0000               	dw	0
   242  00FF0F  1000               	dw	4096
   243  00FF11  0000               	dw	0
   244  00FF13  0000               	dw	0
   245  00FF15  0001               	dw	1
   246  00FF17  0000               	dw	0
   247  00FF19  0010               	dw	16
   248  00FF1B  0000               	dw	0
   249  00FF1D  0100               	dw	256
   250  00FF1F  0000               	dw	0
   251  00FF21  1000               	dw	4096
   252  00FF23                     __end_of_hexpowers:
   253                           	opt stack 0
   254  00FF23                     _keys:
   255                           	opt stack 0
   256  00FF23  31                 	db	49
   257  00FF24  32                 	db	50
   258  00FF25  33                 	db	51
   259  00FF26  41                 	db	65
   260  00FF27  34                 	db	52
   261  00FF28  35                 	db	53
   262  00FF29  36                 	db	54
   263  00FF2A  42                 	db	66
   264  00FF2B  37                 	db	55
   265  00FF2C  38                 	db	56
   266  00FF2D  39                 	db	57
   267  00FF2E  43                 	db	67
   268  00FF2F  2A                 	db	42
   269  00FF30  30                 	db	48
   270  00FF31  23                 	db	35
   271  00FF32  44                 	db	68
   272  00FF33  00                 	db	0
   273  00FF34                     __end_of_keys:
   274                           	opt stack 0
   275  00FF34                     _happynewyear:
   276                           	opt stack 0
   277  00FF34  00                 	db	0
   278  00FF35  00                 	db	0
   279  00FF36  00                 	db	0
   280  00FF37  02                 	db	2
   281  00FF38  06                 	db	6
   282  00FF39  02                 	db	2
   283  00FF3A  17                 	db	23
   284  00FF3B                     __end_of_happynewyear:
   285                           	opt stack 0
   286  0000                     _ADCON0	set	4034
   287  0000                     _ADCON0bits	set	4034
   288  0000                     _ADCON1	set	4033
   289  0000                     _ADRESH	set	4036
   290  0000                     _ADRESL	set	4035
   291  0000                     _CMCONbits	set	4020
   292  0000                     _EEADR	set	4009
   293  0000                     _EEADRH	set	4010
   294  0000                     _EECON1bits	set	4006
   295  0000                     _EECON2	set	4007
   296  0000                     _EEDATA	set	4008
   297  0000                     _INTCONbits	set	4082
   298  0000                     _LATA	set	3977
   299  0000                     _LATB	set	3978
   300  0000                     _LATC	set	3979
   301  0000                     _LATCbits	set	3979
   302  0000                     _LATD	set	3980
   303  0000                     _LATDbits	set	3980
   304  0000                     _LATE	set	3981
   305  0000                     _PIR2bits	set	4001
   306  0000                     _PORTAbits	set	3968
   307  0000                     _PORTB	set	3969
   308  0000                     _SSPADD	set	4040
   309  0000                     _SSPBUF	set	4041
   310  0000                     _SSPCON1	set	4038
   311  0000                     _SSPCON2	set	4037
   312  0000                     _SSPSTAT	set	4039
   313  0000                     _TRISA	set	3986
   314  0000                     _TRISB	set	3987
   315  0000                     _TRISC	set	3988
   316  0000                     _TRISD	set	3989
   317  0000                     _TRISE	set	3990
   318  0000                     _ACKDT	set	32301
   319  0000                     _ACKEN	set	32300
   320  0000                     _ADFM	set	32263
   321  0000                     _ADON	set	32272
   322  0000                     _INT1IE	set	32643
   323  0000                     _INT1IF	set	32640
   324  0000                     _PEN	set	32298
   325  0000                     _RCEN	set	32299
   326  0000                     _RSEN	set	32297
   327  0000                     _SEN	set	32296
   328  0000                     _TRISC3	set	31907
   329  0000                     _TRISC4	set	31908
   330  0000                     _nRBPU	set	32655
   331  00FF3B                     STR_21:
   332  00FF3B  30                 	db	48	;'0'
   333  00FF3C  31                 	db	49	;'1'
   334  00FF3D  32                 	db	50	;'2'
   335  00FF3E  33                 	db	51	;'3'
   336  00FF3F  34                 	db	52	;'4'
   337  00FF40  35                 	db	53	;'5'
   338  00FF41  36                 	db	54	;'6'
   339  00FF42  37                 	db	55	;'7'
   340  00FF43  38                 	db	56	;'8'
   341  00FF44  39                 	db	57	;'9'
   342  00FF45  61                 	db	97	;'a'
   343  00FF46  62                 	db	98	;'b'
   344  00FF47  63                 	db	99	;'c'
   345  00FF48  64                 	db	100	;'d'
   346  00FF49  65                 	db	101	;'e'
   347  00FF4A  66                 	db	102	;'f'
   348  00FF4B  00                 	db	0
   349  00FF4C                     STR_20:
   350  00FF4C  44                 	db	68	;'D'
   351  00FF4D  3A                 	db	58	;':'
   352  00FF4E  25                 	db	37
   353  00FF4F  64                 	db	100	;'d'
   354  00FF50  20                 	db	32
   355  00FF51  74                 	db	116	;'t'
   356  00FF52  69                 	db	105	;'i'
   357  00FF53  6D                 	db	109	;'m'
   358  00FF54  65                 	db	101	;'e'
   359  00FF55  3A                 	db	58	;':'
   360  00FF56  25                 	db	37
   361  00FF57  64                 	db	100	;'d'
   362  00FF58  20                 	db	32
   363  00FF59  38                 	db	56	;'8'
   364  00FF5A  3E                 	db	62	;'>'
   365  00FF5B  3E                 	db	62	;'>'
   366  00FF5C  00                 	db	0
   367  00FF5D                     STR_4:
   368  00FF5D  65                 	db	101	;'e'
   369  00FF5E  6C                 	db	108	;'l'
   370  00FF5F  61                 	db	97	;'a'
   371  00FF60  70                 	db	112	;'p'
   372  00FF61  73                 	db	115	;'s'
   373  00FF62  65                 	db	101	;'e'
   374  00FF63  64                 	db	100	;'d'
   375  00FF64  20                 	db	32
   376  00FF65  74                 	db	116	;'t'
   377  00FF66  69                 	db	105	;'i'
   378  00FF67  6D                 	db	109	;'m'
   379  00FF68  65                 	db	101	;'e'
   380  00FF69  3A                 	db	58	;':'
   381  00FF6A  20                 	db	32
   382  00FF6B  25                 	db	37
   383  00FF6C  64                 	db	100	;'d'
   384  00FF6D  00                 	db	0
   385  00FF6E                     STR_19:
   386  00FF6E  41                 	db	65	;'A'
   387  00FF6F  41                 	db	65	;'A'
   388  00FF70  3A                 	db	58	;':'
   389  00FF71  25                 	db	37
   390  00FF72  64                 	db	100	;'d'
   391  00FF73  20                 	db	32
   392  00FF74  43                 	db	67	;'C'
   393  00FF75  3A                 	db	58	;':'
   394  00FF76  25                 	db	37
   395  00FF77  64                 	db	100	;'d'
   396  00FF78  20                 	db	32
   397  00FF79  39                 	db	57	;'9'
   398  00FF7A  56                 	db	86	;'V'
   399  00FF7B  3A                 	db	58	;':'
   400  00FF7C  25                 	db	37
   401  00FF7D  64                 	db	100	;'d'
   402  00FF7E  00                 	db	0
   403  00FF7F                     STR_1:
   404  00FF7F  20                 	db	32
   405  00FF80  25                 	db	37
   406  00FF81  33                 	db	51	;'3'
   407  00FF82  64                 	db	100	;'d'
   408  00FF83  20                 	db	32
   409  00FF84  25                 	db	37
   410  00FF85  64                 	db	100	;'d'
   411  00FF86  20                 	db	32
   412  00FF87  25                 	db	37
   413  00FF88  78                 	db	120	;'x'
   414  00FF89  20                 	db	32
   415  00FF8A  25                 	db	37
   416  00FF8B  78                 	db	120	;'x'
   417  00FF8C  20                 	db	32
   418  00FF8D  25                 	db	37
   419  00FF8E  66                 	db	102	;'f'
   420  00FF8F  00                 	db	0
   421  00FF90                     STR_3:
   422  00FF90  3C                 	db	60	;'<'
   423  00FF91  3C                 	db	60	;'<'
   424  00FF92  20                 	db	32
   425  00FF93  37                 	db	55	;'7'
   426  00FF94  20                 	db	32
   427  00FF95  44                 	db	68	;'D'
   428  00FF96  41                 	db	65	;'A'
   429  00FF97  54                 	db	84	;'T'
   430  00FF98  41                 	db	65	;'A'
   431  00FF99  20                 	db	32
   432  00FF9A  39                 	db	57	;'9'
   433  00FF9B  20                 	db	32
   434  00FF9C  3E                 	db	62	;'>'
   435  00FF9D  3E                 	db	62	;'>'
   436  00FF9E  00                 	db	0
   437  00FF9F                     STR_2:
   438  00FF9F  70                 	db	112	;'p'
   439  00FFA0  72                 	db	114	;'r'
   440  00FFA1  65                 	db	101	;'e'
   441  00FFA2  73                 	db	115	;'s'
   442  00FFA3  73                 	db	115	;'s'
   443  00FFA4  20                 	db	32
   444  00FFA5  2A                 	db	42
   445  00FFA6  20                 	db	32
   446  00FFA7  74                 	db	116	;'t'
   447  00FFA8  6F                 	db	111	;'o'
   448  00FFA9  20                 	db	32
   449  00FFAA  72                 	db	114	;'r'
   450  00FFAB  75                 	db	117	;'u'
   451  00FFAC  6E                 	db	110	;'n'
   452  00FFAD  00                 	db	0
   453  00FFAE                     STR_8:
   454  00FFAE  41                 	db	65	;'A'
   455  00FFAF  41                 	db	65	;'A'
   456  00FFB0  20                 	db	32
   457  00FFB1  73                 	db	115	;'s'
   458  00FFB2  6F                 	db	111	;'o'
   459  00FFB3  72                 	db	114	;'r'
   460  00FFB4  74                 	db	116	;'t'
   461  00FFB5  65                 	db	101	;'e'
   462  00FFB6  64                 	db	100	;'d'
   463  00FFB7  3A                 	db	58	;':'
   464  00FFB8  20                 	db	32
   465  00FFB9  25                 	db	37
   466  00FFBA  64                 	db	100	;'d'
   467  00FFBB  00                 	db	0
   468  00FFBC                     STR_12:
   469  00FFBC  39                 	db	57	;'9'
   470  00FFBD  56                 	db	86	;'V'
   471  00FFBE  20                 	db	32
   472  00FFBF  73                 	db	115	;'s'
   473  00FFC0  6F                 	db	111	;'o'
   474  00FFC1  72                 	db	114	;'r'
   475  00FFC2  74                 	db	116	;'t'
   476  00FFC3  65                 	db	101	;'e'
   477  00FFC4  64                 	db	100	;'d'
   478  00FFC5  3A                 	db	58	;':'
   479  00FFC6  20                 	db	32
   480  00FFC7  25                 	db	37
   481  00FFC8  64                 	db	100	;'d'
   482  00FFC9  00                 	db	0
   483  00FFCA                     STR_10:
   484  00FFCA  43                 	db	67	;'C'
   485  00FFCB  20                 	db	32
   486  00FFCC  73                 	db	115	;'s'
   487  00FFCD  6F                 	db	111	;'o'
   488  00FFCE  72                 	db	114	;'r'
   489  00FFCF  74                 	db	116	;'t'
   490  00FFD0  65                 	db	101	;'e'
   491  00FFD1  64                 	db	100	;'d'
   492  00FFD2  3A                 	db	58	;':'
   493  00FFD3  20                 	db	32
   494  00FFD4  25                 	db	37
   495  00FFD5  64                 	db	100	;'d'
   496  00FFD6  00                 	db	0
   497  00FFD7                     STR_16:
   498  00FFD7  6F                 	db	111	;'o'
   499  00FFD8  70                 	db	112	;'p'
   500  00FFD9  20                 	db	32
   501  00FFDA  23                 	db	35
   502  00FFDB  3A                 	db	58	;':'
   503  00FFDC  20                 	db	32
   504  00FFDD  31                 	db	49	;'1'
   505  00FFDE  20                 	db	32
   506  00FFDF  32                 	db	50	;'2'
   507  00FFE0  20                 	db	32
   508  00FFE1  33                 	db	51	;'3'
   509  00FFE2  00                 	db	0
   510  00FFE3                     STR_14:
   511  00FFE3  44                 	db	68	;'D'
   512  00FFE4  72                 	db	114	;'r'
   513  00FFE5  61                 	db	97	;'a'
   514  00FFE6  69                 	db	105	;'i'
   515  00FFE7  6E                 	db	110	;'n'
   516  00FFE8  65                 	db	101	;'e'
   517  00FFE9  64                 	db	100	;'d'
   518  00FFEA  3A                 	db	58	;':'
   519  00FFEB  20                 	db	32
   520  00FFEC  25                 	db	37
   521  00FFED  64                 	db	100	;'d'
   522  00FFEE  00                 	db	0
   523  00FFEF                     STR_6:
   524  00FFEF  74                 	db	116	;'t'
   525  00FFF0  6F                 	db	111	;'o'
   526  00FFF1  74                 	db	116	;'t'
   527  00FFF2  61                 	db	97	;'a'
   528  00FFF3  6C                 	db	108	;'l'
   529  00FFF4  3A                 	db	58	;':'
   530  00FFF5  20                 	db	32
   531  00FFF6  25                 	db	37
   532  00FFF7  64                 	db	100	;'d'
   533  00FFF8  00                 	db	0
   534  00FFF9                     STR_18:
   535  00FFF9  65                 	db	101	;'e'
   536  00FFFA  72                 	db	114	;'r'
   537  00FFFB  72                 	db	114	;'r'
   538  00FFFC  6F                 	db	111	;'o'
   539  00FFFD  72                 	db	114	;'r'
   540  00FFFE  00                 	db	0
   541  0000                     
   542                           ; #config settings
   543  00FFFF  00                 	db	0	; dummy byte at the end
   544  0000                     
   545                           	psect	cinit
   546  00494E                     __pcinit:
   547                           	opt stack 0
   548  00494E                     start_initialization:
   549                           	opt stack 0
   550  00494E                     __initialization:
   551                           	opt stack 0
   552                           
   553                           ; Clear objects allocated to BANK1 (20 bytes)
   554  00494E  EE01  F000         	lfsr	0,__pbssBANK1
   555  004952  0E14               	movlw	20
   556  004954                     clear_0:
   557  004954  6AEE               	clrf	postinc0,c
   558  004956  06E8               	decf	wreg,f,c
   559  004958  E1FD               	bnz	clear_0
   560                           
   561                           ; Clear objects allocated to COMRAM (6 bytes)
   562  00495A  6A7A               	clrf	(__pbssCOMRAM+5)& (0+255),c
   563  00495C  6A79               	clrf	(__pbssCOMRAM+4)& (0+255),c
   564  00495E  6A78               	clrf	(__pbssCOMRAM+3)& (0+255),c
   565  004960  6A77               	clrf	(__pbssCOMRAM+2)& (0+255),c
   566  004962  6A76               	clrf	(__pbssCOMRAM+1)& (0+255),c
   567  004964  6A75               	clrf	__pbssCOMRAM& (0+255),c
   568  004966                     end_of_initialization:
   569                           	opt stack 0
   570  004966                     __end_of__initialization:
   571                           	opt stack 0
   572  004966  907B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   573  004968  927B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   574  00496A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   575  00496C  6EF8               	movwf	tblptru,c
   576  00496E  0100               	movlb	0
   577  004970  EF19  F00A         	goto	_main	;jump to C main() function
   578                           tblptru	equ	0xFF8
   579                           postinc0	equ	0xFEE
   580                           wreg	equ	0xFE8
   581                           
   582                           	psect	bssCOMRAM
   583  000075                     __pbssCOMRAM:
   584                           	opt stack 0
   585  000075                     _ended:
   586                           	opt stack 0
   587  000075                     	ds	2
   588  000077                     _quit:
   589                           	opt stack 0
   590  000077                     	ds	2
   591  000079                     _started:
   592                           	opt stack 0
   593  000079                     	ds	2
   594                           tblptru	equ	0xFF8
   595                           postinc0	equ	0xFEE
   596                           wreg	equ	0xFE8
   597                           
   598                           	psect	bssBANK1
   599  000100                     __pbssBANK1:
   600                           	opt stack 0
   601  000100                     _AA_num:
   602                           	opt stack 0
   603  000100                     	ds	2
   604  000102                     _C_num:
   605                           	opt stack 0
   606  000102                     	ds	2
   607  000104                     _Drain_num:
   608                           	opt stack 0
   609  000104                     	ds	2
   610  000106                     _Nine_num:
   611                           	opt stack 0
   612  000106                     	ds	2
   613  000108                     _elapsed_time:
   614                           	opt stack 0
   615  000108                     	ds	2
   616  00010A                     _is_active:
   617                           	opt stack 0
   618  00010A                     	ds	2
   619  00010C                     _is_wait:
   620                           	opt stack 0
   621  00010C                     	ds	2
   622  00010E                     _log:
   623                           	opt stack 0
   624  00010E                     	ds	2
   625  000110                     _menu:
   626                           	opt stack 0
   627  000110                     	ds	2
   628  000112                     _total_num:
   629                           	opt stack 0
   630  000112                     	ds	2
   631                           tblptru	equ	0xFF8
   632                           postinc0	equ	0xFEE
   633                           wreg	equ	0xFE8
   634                           
   635                           	psect	cstackBANK1
   636  000114                     __pcstackBANK1:
   637                           	opt stack 0
   638  000114                     main@time:
   639                           	opt stack 0
   640                           
   641                           ; 7 bytes @ 0x0
   642  000114                     	ds	7
   643  00011B                     main@is_battery:
   644                           	opt stack 0
   645                           
   646                           ; 2 bytes @ 0x7
   647  00011B                     	ds	2
   648  00011D                     main@address:
   649                           	opt stack 0
   650                           
   651                           ; 2 bytes @ 0x9
   652  00011D                     	ds	2
   653                           tblptru	equ	0xFF8
   654                           postinc0	equ	0xFEE
   655                           wreg	equ	0xFE8
   656                           
   657                           	psect	cstackBANK0
   658  000080                     __pcstackBANK0:
   659                           	opt stack 0
   660  000080                     ??_readADC:
   661  000080                     ??_isdigit:
   662  000080                     ??_I2C_Master_Wait:
   663  000080                     ?_calculate_elapsed_time:
   664                           	opt stack 0
   665  000080                     ?_next_address:
   666                           	opt stack 0
   667  000080                     ?___awmod:
   668                           	opt stack 0
   669  000080                     ?___ftpack:
   670                           	opt stack 0
   671  000080                     ?___ftneg:
   672                           	opt stack 0
   673  000080                     ?__tdiv_to_l_:
   674                           	opt stack 0
   675  000080                     ?__div_to_l_:
   676                           	opt stack 0
   677  000080                     ?___lldiv:
   678                           	opt stack 0
   679  000080                     lcdNibble@temp:
   680                           	opt stack 0
   681  000080                     calculate_elapsed_time@time:
   682                           	opt stack 0
   683  000080                     termination@time_now:
   684                           	opt stack 0
   685  000080                     Eeprom_ReadByte@address:
   686                           	opt stack 0
   687  000080                     Eeprom_WriteByte@address:
   688                           	opt stack 0
   689  000080                     next_address@address:
   690                           	opt stack 0
   691  000080                     move_stepper@loop_duration:
   692                           	opt stack 0
   693  000080                     ___awmod@dividend:
   694                           	opt stack 0
   695  000080                     __div_to_l_@f1:
   696                           	opt stack 0
   697  000080                     ___ftpack@arg:
   698                           	opt stack 0
   699  000080                     __tdiv_to_l_@f1:
   700                           	opt stack 0
   701  000080                     ___ftge@ff1:
   702                           	opt stack 0
   703  000080                     ___ftneg@f1:
   704                           	opt stack 0
   705  000080                     ___lldiv@dividend:
   706                           	opt stack 0
   707                           
   708                           ; 4 bytes @ 0x0
   709  000080                     	ds	1
   710  000081                     readADC@channel:
   711                           	opt stack 0
   712  000081                     lcdNibble@data:
   713                           	opt stack 0
   714  000081                     I2C_Master_Read@a:
   715                           	opt stack 0
   716  000081                     _isdigit$999:
   717                           	opt stack 0
   718  000081                     I2C_Master_Write@d:
   719                           	opt stack 0
   720                           
   721                           ; 2 bytes @ 0x1
   722  000081                     	ds	1
   723  000082                     ??_calculate_elapsed_time:
   724  000082                     Eeprom_WriteByte@data:
   725                           	opt stack 0
   726  000082                     lcdInst@data:
   727                           	opt stack 0
   728  000082                     putch@data:
   729                           	opt stack 0
   730  000082                     I2C_Master_Read@temp:
   731                           	opt stack 0
   732  000082                     isdigit@c:
   733                           	opt stack 0
   734  000082                     move_stepper@duty:
   735                           	opt stack 0
   736  000082                     ___awmod@divisor:
   737                           	opt stack 0
   738                           
   739                           ; 2 bytes @ 0x2
   740  000082                     	ds	1
   741  000083                     ??_initLCD:
   742  000083                     set_time@i:
   743                           	opt stack 0
   744  000083                     ___ftpack@exp:
   745                           	opt stack 0
   746  000083                     current_time@time:
   747                           	opt stack 0
   748  000083                     __div_to_l_@f2:
   749                           	opt stack 0
   750  000083                     __tdiv_to_l_@f2:
   751                           	opt stack 0
   752  000083                     ___ftge@ff2:
   753                           	opt stack 0
   754                           
   755                           ; 3 bytes @ 0x3
   756  000083                     	ds	1
   757  000084                     ??_move_stepper:
   758  000084                     ___awmod@counter:
   759                           	opt stack 0
   760  000084                     ___ftpack@sign:
   761                           	opt stack 0
   762  000084                     ___lldiv@divisor:
   763                           	opt stack 0
   764                           
   765                           ; 4 bytes @ 0x4
   766  000084                     	ds	1
   767  000085                     ??_current_time:
   768  000085                     ??___ftpack:
   769  000085                     ___awmod@sign:
   770                           	opt stack 0
   771  000085                     move_stepper@i:
   772                           	opt stack 0
   773                           
   774                           ; 2 bytes @ 0x5
   775  000085                     	ds	1
   776  000086                     ??__tdiv_to_l_:
   777  000086                     ??___ftge:
   778  000086                     ?___awdiv:
   779                           	opt stack 0
   780  000086                     ___awdiv@dividend:
   781                           	opt stack 0
   782  000086                     __div_to_l_@quot:
   783                           	opt stack 0
   784                           
   785                           ; 4 bytes @ 0x6
   786  000086                     	ds	1
   787  000087                     current_time@i:
   788                           	opt stack 0
   789                           
   790                           ; 1 bytes @ 0x7
   791  000087                     	ds	1
   792  000088                     ?___awtoft:
   793                           	opt stack 0
   794  000088                     ?___lltoft:
   795                           	opt stack 0
   796  000088                     ___awdiv@divisor:
   797                           	opt stack 0
   798  000088                     ___awtoft@c:
   799                           	opt stack 0
   800  000088                     ___lldiv@quotient:
   801                           	opt stack 0
   802  000088                     ___lltoft@c:
   803                           	opt stack 0
   804                           
   805                           ; 4 bytes @ 0x8
   806  000088                     	ds	1
   807  000089                     __tdiv_to_l_@quot:
   808                           	opt stack 0
   809                           
   810                           ; 4 bytes @ 0x9
   811  000089                     	ds	1
   812  00008A                     ___awdiv@counter:
   813                           	opt stack 0
   814  00008A                     __div_to_l_@cntr:
   815                           	opt stack 0
   816                           
   817                           ; 1 bytes @ 0xA
   818  00008A                     	ds	1
   819  00008B                     ___awdiv@sign:
   820                           	opt stack 0
   821  00008B                     ___awtoft@sign:
   822                           	opt stack 0
   823  00008B                     __div_to_l_@exp1:
   824                           	opt stack 0
   825                           
   826                           ; 1 bytes @ 0xB
   827  00008B                     	ds	1
   828  00008C                     ??___lltoft:
   829  00008C                     ___lldiv@counter:
   830                           	opt stack 0
   831  00008C                     ___awdiv@quotient:
   832                           	opt stack 0
   833                           
   834                           ; 2 bytes @ 0xC
   835  00008C                     	ds	1
   836  00008D                     ?___llmod:
   837                           	opt stack 0
   838  00008D                     __tdiv_to_l_@cntr:
   839                           	opt stack 0
   840  00008D                     I2C_Master_Init@c:
   841                           	opt stack 0
   842  00008D                     ___llmod@dividend:
   843                           	opt stack 0
   844                           
   845                           ; 4 bytes @ 0xD
   846  00008D                     	ds	1
   847  00008E                     ?___wmul:
   848                           	opt stack 0
   849  00008E                     __tdiv_to_l_@exp1:
   850                           	opt stack 0
   851  00008E                     ___wmul@multiplier:
   852                           	opt stack 0
   853                           
   854                           ; 2 bytes @ 0xE
   855  00008E                     	ds	2
   856  000090                     ___lltoft@exp:
   857                           	opt stack 0
   858  000090                     ___wmul@multiplicand:
   859                           	opt stack 0
   860                           
   861                           ; 2 bytes @ 0x10
   862  000090                     	ds	1
   863  000091                     ??_I2C_Master_Init:
   864  000091                     ___llmod@divisor:
   865                           	opt stack 0
   866                           
   867                           ; 4 bytes @ 0x11
   868  000091                     	ds	1
   869  000092                     ___wmul@product:
   870                           	opt stack 0
   871                           
   872                           ; 2 bytes @ 0x12
   873  000092                     	ds	2
   874  000094                     ?___ftmul:
   875                           	opt stack 0
   876  000094                     ___ftmul@f1:
   877                           	opt stack 0
   878                           
   879                           ; 3 bytes @ 0x14
   880  000094                     	ds	1
   881  000095                     ___llmod@counter:
   882                           	opt stack 0
   883                           
   884                           ; 1 bytes @ 0x15
   885  000095                     	ds	2
   886  000097                     ___ftmul@f2:
   887                           	opt stack 0
   888                           
   889                           ; 3 bytes @ 0x17
   890  000097                     	ds	3
   891  00009A                     ??___ftmul:
   892                           
   893                           ; 1 bytes @ 0x1A
   894  00009A                     	ds	3
   895  00009D                     ___ftmul@exp:
   896                           	opt stack 0
   897                           
   898                           ; 1 bytes @ 0x1D
   899  00009D                     	ds	1
   900  00009E                     ___ftmul@f3_as_product:
   901                           	opt stack 0
   902                           
   903                           ; 3 bytes @ 0x1E
   904  00009E                     	ds	3
   905  0000A1                     ___ftmul@cntr:
   906                           	opt stack 0
   907                           
   908                           ; 1 bytes @ 0x21
   909  0000A1                     	ds	1
   910  0000A2                     ___ftmul@sign:
   911                           	opt stack 0
   912                           
   913                           ; 1 bytes @ 0x22
   914  0000A2                     	ds	1
   915  0000A3                     ?___ftdiv:
   916                           	opt stack 0
   917  0000A3                     ?_fround:
   918                           	opt stack 0
   919  0000A3                     ?_scale:
   920                           	opt stack 0
   921  0000A3                     ___ftdiv@f1:
   922                           	opt stack 0
   923                           
   924                           ; 3 bytes @ 0x23
   925  0000A3                     	ds	3
   926  0000A6                     ___ftdiv@f2:
   927                           	opt stack 0
   928  0000A6                     _fround$1338:
   929                           	opt stack 0
   930  0000A6                     _scale$1339:
   931                           	opt stack 0
   932                           
   933                           ; 3 bytes @ 0x26
   934  0000A6                     	ds	3
   935  0000A9                     ??___ftdiv:
   936  0000A9                     scale@scl:
   937                           	opt stack 0
   938  0000A9                     _fround$1337:
   939                           	opt stack 0
   940                           
   941                           ; 3 bytes @ 0x29
   942  0000A9                     	ds	1
   943  0000AA                     ?___fttol:
   944                           	opt stack 0
   945  0000AA                     ___fttol@f1:
   946                           	opt stack 0
   947                           
   948                           ; 3 bytes @ 0x2A
   949  0000AA                     	ds	2
   950  0000AC                     fround@prec:
   951                           	opt stack 0
   952  0000AC                     ___ftdiv@cntr:
   953                           	opt stack 0
   954                           
   955                           ; 1 bytes @ 0x2C
   956  0000AC                     	ds	1
   957  0000AD                     ?___ftadd:
   958                           	opt stack 0
   959  0000AD                     ___ftadd@f1:
   960                           	opt stack 0
   961  0000AD                     ___ftdiv@f3:
   962                           	opt stack 0
   963                           
   964                           ; 3 bytes @ 0x2D
   965  0000AD                     	ds	1
   966  0000AE                     ??___fttol:
   967                           
   968                           ; 1 bytes @ 0x2E
   969  0000AE                     	ds	2
   970  0000B0                     ___ftdiv@exp:
   971                           	opt stack 0
   972  0000B0                     ___ftadd@f2:
   973                           	opt stack 0
   974                           
   975                           ; 3 bytes @ 0x30
   976  0000B0                     	ds	1
   977  0000B1                     ___ftdiv@sign:
   978                           	opt stack 0
   979                           
   980                           ; 1 bytes @ 0x31
   981  0000B1                     	ds	1
   982  0000B2                     ?_convert_voltage:
   983                           	opt stack 0
   984  0000B2                     convert_voltage@high:
   985                           	opt stack 0
   986                           
   987                           ; 2 bytes @ 0x32
   988  0000B2                     	ds	1
   989  0000B3                     ??___ftadd:
   990  0000B3                     ___fttol@sign1:
   991                           	opt stack 0
   992                           
   993                           ; 1 bytes @ 0x33
   994  0000B3                     	ds	1
   995  0000B4                     convert_voltage@low:
   996                           	opt stack 0
   997  0000B4                     ___fttol@lval:
   998                           	opt stack 0
   999                           
  1000                           ; 4 bytes @ 0x34
  1001  0000B4                     	ds	2
  1002  0000B6                     ??_convert_voltage:
  1003  0000B6                     ___ftadd@sign:
  1004                           	opt stack 0
  1005                           
  1006                           ; 1 bytes @ 0x36
  1007  0000B6                     	ds	1
  1008  0000B7                     ___ftadd@exp2:
  1009                           	opt stack 0
  1010                           
  1011                           ; 1 bytes @ 0x37
  1012  0000B7                     	ds	1
  1013  0000B8                     ___ftadd@exp1:
  1014                           	opt stack 0
  1015  0000B8                     ___fttol@exp1:
  1016                           	opt stack 0
  1017  0000B8                     convert_voltage@reading:
  1018                           	opt stack 0
  1019                           
  1020                           ; 2 bytes @ 0x38
  1021  0000B8                     	ds	1
  1022  0000B9                     ?___ftsub:
  1023                           	opt stack 0
  1024  0000B9                     ___ftsub@f1:
  1025                           	opt stack 0
  1026                           
  1027                           ; 3 bytes @ 0x39
  1028  0000B9                     	ds	3
  1029  0000BC                     ___ftsub@f2:
  1030                           	opt stack 0
  1031                           
  1032                           ; 3 bytes @ 0x3C
  1033  0000BC                     	ds	3
  1034  0000BF                     ?_printf:
  1035                           	opt stack 0
  1036  0000BF                     printf@f:
  1037                           	opt stack 0
  1038                           
  1039                           ; 2 bytes @ 0x3F
  1040  0000BF                     	ds	13
  1041  0000CC                     ??_printf:
  1042                           
  1043                           ; 1 bytes @ 0x4C
  1044  0000CC                     	ds	6
  1045  0000D2                     _printf$1340:
  1046                           	opt stack 0
  1047                           
  1048                           ; 3 bytes @ 0x52
  1049  0000D2                     	ds	3
  1050  0000D5                     printf@idx:
  1051                           	opt stack 0
  1052                           
  1053                           ; 1 bytes @ 0x55
  1054  0000D5                     	ds	1
  1055  0000D6                     printf@ap:
  1056                           	opt stack 0
  1057                           
  1058                           ; 2 bytes @ 0x56
  1059  0000D6                     	ds	2
  1060  0000D8                     printf@width:
  1061                           	opt stack 0
  1062                           
  1063                           ; 2 bytes @ 0x58
  1064  0000D8                     	ds	2
  1065  0000DA                     printf@flag:
  1066                           	opt stack 0
  1067                           
  1068                           ; 2 bytes @ 0x5A
  1069  0000DA                     	ds	2
  1070  0000DC                     printf@prec:
  1071                           	opt stack 0
  1072                           
  1073                           ; 2 bytes @ 0x5C
  1074  0000DC                     	ds	2
  1075  0000DE                     printf@tmpval:
  1076                           	opt stack 0
  1077                           
  1078                           ; 4 bytes @ 0x5E
  1079  0000DE                     	ds	4
  1080  0000E2                     printf@exp:
  1081                           	opt stack 0
  1082                           
  1083                           ; 2 bytes @ 0x62
  1084  0000E2                     	ds	2
  1085  0000E4                     printf@val:
  1086                           	opt stack 0
  1087                           
  1088                           ; 4 bytes @ 0x64
  1089  0000E4                     	ds	4
  1090  0000E8                     printf@fval:
  1091                           	opt stack 0
  1092                           
  1093                           ; 3 bytes @ 0x68
  1094  0000E8                     	ds	3
  1095  0000EB                     printf@c:
  1096                           	opt stack 0
  1097                           
  1098                           ; 1 bytes @ 0x6B
  1099  0000EB                     	ds	1
  1100  0000EC                     show_log@log_address:
  1101                           	opt stack 0
  1102                           
  1103                           ; 2 bytes @ 0x6C
  1104  0000EC                     	ds	2
  1105  0000EE                     ??_show_log:
  1106                           
  1107                           ; 1 bytes @ 0x6E
  1108  0000EE                     	ds	1
  1109  0000EF                     show_log@AA_num:
  1110                           	opt stack 0
  1111                           
  1112                           ; 2 bytes @ 0x6F
  1113  0000EF                     	ds	2
  1114  0000F1                     show_log@C_num:
  1115                           	opt stack 0
  1116                           
  1117                           ; 2 bytes @ 0x71
  1118  0000F1                     	ds	2
  1119  0000F3                     show_log@Nine_num:
  1120                           	opt stack 0
  1121                           
  1122                           ; 2 bytes @ 0x73
  1123  0000F3                     	ds	2
  1124  0000F5                     show_log@Drain_num:
  1125                           	opt stack 0
  1126                           
  1127                           ; 2 bytes @ 0x75
  1128  0000F5                     	ds	2
  1129  0000F7                     show_log@elapsed_time:
  1130                           	opt stack 0
  1131                           
  1132                           ; 2 bytes @ 0x77
  1133  0000F7                     	ds	2
  1134  0000F9                     show_log@address:
  1135                           	opt stack 0
  1136                           
  1137                           ; 2 bytes @ 0x79
  1138  0000F9                     	ds	2
  1139  0000FB                     ??_main:
  1140                           
  1141                           ; 1 bytes @ 0x7B
  1142  0000FB                     	ds	2
  1143                           tblptru	equ	0xFF8
  1144                           postinc0	equ	0xFEE
  1145                           wreg	equ	0xFE8
  1146                           
  1147                           	psect	cstackCOMRAM
  1148  000001                     __pcstackCOMRAM:
  1149                           	opt stack 0
  1150  000001                     ??i2_isdigit:
  1151  000001                     ?i2___awmod:
  1152                           	opt stack 0
  1153  000001                     ?i2___ftpack:
  1154                           	opt stack 0
  1155  000001                     ?i2___ftneg:
  1156                           	opt stack 0
  1157  000001                     ?i2__div_to_l_:
  1158                           	opt stack 0
  1159  000001                     ?i2__tdiv_to_l_:
  1160                           	opt stack 0
  1161  000001                     ?i2___lldiv:
  1162                           	opt stack 0
  1163  000001                     i2lcdNibble@temp:
  1164                           	opt stack 0
  1165  000001                     i2___awmod@dividend:
  1166                           	opt stack 0
  1167  000001                     i2__div_to_l_@f1:
  1168                           	opt stack 0
  1169  000001                     i2___ftpack@arg:
  1170                           	opt stack 0
  1171  000001                     i2__tdiv_to_l_@f1:
  1172                           	opt stack 0
  1173  000001                     i2___ftge@ff1:
  1174                           	opt stack 0
  1175  000001                     i2___ftneg@f1:
  1176                           	opt stack 0
  1177  000001                     i2___lldiv@dividend:
  1178                           	opt stack 0
  1179                           
  1180                           ; 4 bytes @ 0x0
  1181  000001                     	ds	1
  1182  000002                     i2lcdNibble@data:
  1183                           	opt stack 0
  1184  000002                     i2_isdigit$999:
  1185                           	opt stack 0
  1186                           
  1187                           ; 1 bytes @ 0x1
  1188  000002                     	ds	1
  1189  000003                     i2lcdInst@data:
  1190                           	opt stack 0
  1191  000003                     i2putch@data:
  1192                           	opt stack 0
  1193  000003                     i2isdigit@c:
  1194                           	opt stack 0
  1195  000003                     i2___awmod@divisor:
  1196                           	opt stack 0
  1197                           
  1198                           ; 2 bytes @ 0x2
  1199  000003                     	ds	1
  1200  000004                     i2___ftpack@exp:
  1201                           	opt stack 0
  1202  000004                     i2__div_to_l_@f2:
  1203                           	opt stack 0
  1204  000004                     i2__tdiv_to_l_@f2:
  1205                           	opt stack 0
  1206  000004                     i2___ftge@ff2:
  1207                           	opt stack 0
  1208                           
  1209                           ; 3 bytes @ 0x3
  1210  000004                     	ds	1
  1211  000005                     i2___awmod@counter:
  1212                           	opt stack 0
  1213  000005                     i2___ftpack@sign:
  1214                           	opt stack 0
  1215  000005                     i2___lldiv@divisor:
  1216                           	opt stack 0
  1217                           
  1218                           ; 4 bytes @ 0x4
  1219  000005                     	ds	1
  1220  000006                     ??i2___ftpack:
  1221  000006                     i2___awmod@sign:
  1222                           	opt stack 0
  1223                           
  1224                           ; 1 bytes @ 0x5
  1225  000006                     	ds	1
  1226  000007                     ??i2__tdiv_to_l_:
  1227  000007                     ??i2___ftge:
  1228  000007                     ?i2___awdiv:
  1229                           	opt stack 0
  1230  000007                     i2___awdiv@dividend:
  1231                           	opt stack 0
  1232  000007                     i2__div_to_l_@quot:
  1233                           	opt stack 0
  1234                           
  1235                           ; 4 bytes @ 0x6
  1236  000007                     	ds	2
  1237  000009                     ?i2___lltoft:
  1238                           	opt stack 0
  1239  000009                     i2___awdiv@divisor:
  1240                           	opt stack 0
  1241  000009                     i2___lldiv@quotient:
  1242                           	opt stack 0
  1243  000009                     i2___lltoft@c:
  1244                           	opt stack 0
  1245                           
  1246                           ; 4 bytes @ 0x8
  1247  000009                     	ds	1
  1248  00000A                     i2__tdiv_to_l_@quot:
  1249                           	opt stack 0
  1250                           
  1251                           ; 4 bytes @ 0x9
  1252  00000A                     	ds	1
  1253  00000B                     i2___awdiv@counter:
  1254                           	opt stack 0
  1255  00000B                     i2__div_to_l_@cntr:
  1256                           	opt stack 0
  1257                           
  1258                           ; 1 bytes @ 0xA
  1259  00000B                     	ds	1
  1260  00000C                     i2___awdiv@sign:
  1261                           	opt stack 0
  1262  00000C                     i2__div_to_l_@exp1:
  1263                           	opt stack 0
  1264                           
  1265                           ; 1 bytes @ 0xB
  1266  00000C                     	ds	1
  1267  00000D                     ??i2___lltoft:
  1268  00000D                     i2___lldiv@counter:
  1269                           	opt stack 0
  1270  00000D                     i2___awdiv@quotient:
  1271                           	opt stack 0
  1272                           
  1273                           ; 2 bytes @ 0xC
  1274  00000D                     	ds	1
  1275  00000E                     ?i2___llmod:
  1276                           	opt stack 0
  1277  00000E                     i2__tdiv_to_l_@cntr:
  1278                           	opt stack 0
  1279  00000E                     i2___llmod@dividend:
  1280                           	opt stack 0
  1281                           
  1282                           ; 4 bytes @ 0xD
  1283  00000E                     	ds	1
  1284  00000F                     ?i2___wmul:
  1285                           	opt stack 0
  1286  00000F                     i2__tdiv_to_l_@exp1:
  1287                           	opt stack 0
  1288  00000F                     i2___wmul@multiplier:
  1289                           	opt stack 0
  1290                           
  1291                           ; 2 bytes @ 0xE
  1292  00000F                     	ds	2
  1293  000011                     i2___lltoft@exp:
  1294                           	opt stack 0
  1295  000011                     i2___wmul@multiplicand:
  1296                           	opt stack 0
  1297                           
  1298                           ; 2 bytes @ 0x10
  1299  000011                     	ds	1
  1300  000012                     i2___llmod@divisor:
  1301                           	opt stack 0
  1302                           
  1303                           ; 4 bytes @ 0x11
  1304  000012                     	ds	1
  1305  000013                     i2___wmul@product:
  1306                           	opt stack 0
  1307                           
  1308                           ; 2 bytes @ 0x12
  1309  000013                     	ds	2
  1310  000015                     ?i2___ftmul:
  1311                           	opt stack 0
  1312  000015                     i2___ftmul@f1:
  1313                           	opt stack 0
  1314                           
  1315                           ; 3 bytes @ 0x14
  1316  000015                     	ds	1
  1317  000016                     i2___llmod@counter:
  1318                           	opt stack 0
  1319                           
  1320                           ; 1 bytes @ 0x15
  1321  000016                     	ds	2
  1322  000018                     i2___ftmul@f2:
  1323                           	opt stack 0
  1324                           
  1325                           ; 3 bytes @ 0x17
  1326  000018                     	ds	3
  1327  00001B                     ??i2___ftmul:
  1328                           
  1329                           ; 1 bytes @ 0x1A
  1330  00001B                     	ds	3
  1331  00001E                     i2___ftmul@exp:
  1332                           	opt stack 0
  1333                           
  1334                           ; 1 bytes @ 0x1D
  1335  00001E                     	ds	1
  1336  00001F                     i2___ftmul@f3_as_product:
  1337                           	opt stack 0
  1338                           
  1339                           ; 3 bytes @ 0x1E
  1340  00001F                     	ds	3
  1341  000022                     i2___ftmul@cntr:
  1342                           	opt stack 0
  1343                           
  1344                           ; 1 bytes @ 0x21
  1345  000022                     	ds	1
  1346  000023                     i2___ftmul@sign:
  1347                           	opt stack 0
  1348                           
  1349                           ; 1 bytes @ 0x22
  1350  000023                     	ds	1
  1351  000024                     ?i2_fround:
  1352                           	opt stack 0
  1353  000024                     ?i2_scale:
  1354                           	opt stack 0
  1355                           
  1356                           ; 3 bytes @ 0x23
  1357  000024                     	ds	3
  1358  000027                     i2_fround$1512:
  1359                           	opt stack 0
  1360  000027                     i2_scale$1513:
  1361                           	opt stack 0
  1362                           
  1363                           ; 3 bytes @ 0x26
  1364  000027                     	ds	3
  1365  00002A                     i2scale@scl:
  1366                           	opt stack 0
  1367  00002A                     i2_fround$1511:
  1368                           	opt stack 0
  1369                           
  1370                           ; 3 bytes @ 0x29
  1371  00002A                     	ds	1
  1372  00002B                     ?i2___fttol:
  1373                           	opt stack 0
  1374  00002B                     i2___fttol@f1:
  1375                           	opt stack 0
  1376                           
  1377                           ; 3 bytes @ 0x2A
  1378  00002B                     	ds	2
  1379  00002D                     i2fround@prec:
  1380                           	opt stack 0
  1381                           
  1382                           ; 1 bytes @ 0x2C
  1383  00002D                     	ds	1
  1384  00002E                     ?i2___ftadd:
  1385                           	opt stack 0
  1386  00002E                     i2___ftadd@f1:
  1387                           	opt stack 0
  1388                           
  1389                           ; 3 bytes @ 0x2D
  1390  00002E                     	ds	1
  1391  00002F                     ??i2___fttol:
  1392                           
  1393                           ; 1 bytes @ 0x2E
  1394  00002F                     	ds	2
  1395  000031                     i2___ftadd@f2:
  1396                           	opt stack 0
  1397                           
  1398                           ; 3 bytes @ 0x30
  1399  000031                     	ds	3
  1400  000034                     ??i2___ftadd:
  1401  000034                     i2___fttol@sign1:
  1402                           	opt stack 0
  1403                           
  1404                           ; 1 bytes @ 0x33
  1405  000034                     	ds	1
  1406  000035                     i2___fttol@lval:
  1407                           	opt stack 0
  1408                           
  1409                           ; 4 bytes @ 0x34
  1410  000035                     	ds	2
  1411  000037                     i2___ftadd@sign:
  1412                           	opt stack 0
  1413                           
  1414                           ; 1 bytes @ 0x36
  1415  000037                     	ds	1
  1416  000038                     i2___ftadd@exp2:
  1417                           	opt stack 0
  1418                           
  1419                           ; 1 bytes @ 0x37
  1420  000038                     	ds	1
  1421  000039                     i2___ftadd@exp1:
  1422                           	opt stack 0
  1423  000039                     i2___fttol@exp1:
  1424                           	opt stack 0
  1425                           
  1426                           ; 1 bytes @ 0x38
  1427  000039                     	ds	1
  1428  00003A                     ?i2___ftsub:
  1429                           	opt stack 0
  1430  00003A                     i2___ftsub@f1:
  1431                           	opt stack 0
  1432                           
  1433                           ; 3 bytes @ 0x39
  1434  00003A                     	ds	3
  1435  00003D                     i2___ftsub@f2:
  1436                           	opt stack 0
  1437                           
  1438                           ; 3 bytes @ 0x3C
  1439  00003D                     	ds	3
  1440  000040                     ?i2_printf:
  1441                           	opt stack 0
  1442  000040                     i2printf@f:
  1443                           	opt stack 0
  1444                           
  1445                           ; 2 bytes @ 0x3F
  1446  000040                     	ds	2
  1447  000042                     ??i2_printf:
  1448                           
  1449                           ; 1 bytes @ 0x41
  1450  000042                     	ds	6
  1451  000048                     i2_printf$1514:
  1452                           	opt stack 0
  1453                           
  1454                           ; 3 bytes @ 0x47
  1455  000048                     	ds	3
  1456  00004B                     i2printf@idx:
  1457                           	opt stack 0
  1458                           
  1459                           ; 1 bytes @ 0x4A
  1460  00004B                     	ds	1
  1461  00004C                     i2printf@ap:
  1462                           	opt stack 0
  1463                           
  1464                           ; 2 bytes @ 0x4B
  1465  00004C                     	ds	2
  1466  00004E                     i2printf@width:
  1467                           	opt stack 0
  1468                           
  1469                           ; 2 bytes @ 0x4D
  1470  00004E                     	ds	2
  1471  000050                     i2printf@flag:
  1472                           	opt stack 0
  1473                           
  1474                           ; 2 bytes @ 0x4F
  1475  000050                     	ds	2
  1476  000052                     i2printf@prec:
  1477                           	opt stack 0
  1478                           
  1479                           ; 2 bytes @ 0x51
  1480  000052                     	ds	2
  1481  000054                     i2printf@tmpval:
  1482                           	opt stack 0
  1483                           
  1484                           ; 4 bytes @ 0x53
  1485  000054                     	ds	4
  1486  000058                     i2printf@exp:
  1487                           	opt stack 0
  1488                           
  1489                           ; 2 bytes @ 0x57
  1490  000058                     	ds	2
  1491  00005A                     i2printf@val:
  1492                           	opt stack 0
  1493                           
  1494                           ; 4 bytes @ 0x59
  1495  00005A                     	ds	4
  1496  00005E                     i2printf@fval:
  1497                           	opt stack 0
  1498                           
  1499                           ; 3 bytes @ 0x5D
  1500  00005E                     	ds	3
  1501  000061                     i2printf@c:
  1502                           	opt stack 0
  1503                           
  1504                           ; 1 bytes @ 0x60
  1505  000061                     	ds	1
  1506  000062                     ??_select_menu:
  1507                           
  1508                           ; 1 bytes @ 0x61
  1509  000062                     	ds	2
  1510  000064                     select_menu@temp:
  1511                           	opt stack 0
  1512                           
  1513                           ; 1 bytes @ 0x63
  1514  000064                     	ds	1
  1515  000065                     ??_keypressed:
  1516                           
  1517                           ; 1 bytes @ 0x64
  1518  000065                     	ds	15
  1519  000074                     keypressed@keypress:
  1520                           	opt stack 0
  1521                           
  1522                           ; 1 bytes @ 0x73
  1523  000074                     	ds	1
  1524                           tblptru	equ	0xFF8
  1525                           postinc0	equ	0xFEE
  1526                           wreg	equ	0xFE8
  1527                           
  1528 ;;
  1529 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1530 ;;
  1531 ;; *************** function _main *****************
  1532 ;; Defined at:
  1533 ;;		line 86 in file "main.c"
  1534 ;; Parameters:    Size  Location     Type
  1535 ;;		None
  1536 ;; Auto vars:     Size  Location     Type
  1537 ;;  time            7    0[BANK1 ] unsigned char [7]
  1538 ;;  is_battery      2    7[BANK1 ] unsigned int 
  1539 ;;  address         2    9[BANK1 ] unsigned int 
  1540 ;; Return value:  Size  Location     Type
  1541 ;;                  1    wreg      void 
  1542 ;; Registers used:
  1543 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1544 ;; Tracked objects:
  1545 ;;		On entry : 0/0
  1546 ;;		On exit  : 0/0
  1547 ;;		Unchanged: 0/0
  1548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1550 ;;      Locals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1551 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1552 ;;      Totals:         0       2      11       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1553 ;;Total ram usage:       13 bytes
  1554 ;; Hardware stack levels required when called:   11
  1555 ;; This function calls:
  1556 ;;		_Eeprom_WriteByte
  1557 ;;		_I2C_Master_Init
  1558 ;;		_calculate_elapsed_time
  1559 ;;		_clean_count
  1560 ;;		_convert_voltage
  1561 ;;		_current_time
  1562 ;;		_initLCD
  1563 ;;		_lcdInst
  1564 ;;		_move_stepper
  1565 ;;		_next_address
  1566 ;;		_printf
  1567 ;;		_readADC
  1568 ;;		_set_time
  1569 ;;		_show_log
  1570 ;;		_termination
  1571 ;; This function is called by:
  1572 ;;		Startup code after reset
  1573 ;; This function uses a non-reentrant model
  1574 ;;
  1575                           
  1576                           	psect	text0
  1577  001432                     __ptext0:
  1578                           	opt stack 0
  1579  001432                     _main:
  1580                           	opt stack 20
  1581                           
  1582                           ;main.c: 88: TRISA = 0xFF;
  1583                           
  1584                           ;incstack = 0
  1585  001432  6892               	setf	3986,c	;volatile
  1586                           
  1587                           ;main.c: 89: TRISB = 0xFF;
  1588  001434  6893               	setf	3987,c	;volatile
  1589                           
  1590                           ;main.c: 90: TRISC = 0x00;
  1591  001436  0E00               	movlw	0
  1592  001438  6E94               	movwf	3988,c	;volatile
  1593                           
  1594                           ;main.c: 91: TRISD = 0x00;
  1595  00143A  0E00               	movlw	0
  1596  00143C  6E95               	movwf	3989,c	;volatile
  1597                           
  1598                           ;main.c: 92: TRISE = 0x00;
  1599  00143E  0E00               	movlw	0
  1600  001440  6E96               	movwf	3990,c	;volatile
  1601                           
  1602                           ;main.c: 94: LATA = 0x00;
  1603  001442  0E00               	movlw	0
  1604  001444  6E89               	movwf	3977,c	;volatile
  1605                           
  1606                           ;main.c: 95: LATB = 0x00;
  1607  001446  0E00               	movlw	0
  1608  001448  6E8A               	movwf	3978,c	;volatile
  1609                           
  1610                           ;main.c: 96: LATC = 0x00;
  1611  00144A  0E00               	movlw	0
  1612  00144C  6E8B               	movwf	3979,c	;volatile
  1613                           
  1614                           ;main.c: 97: LATD = 0x00;
  1615  00144E  0E00               	movlw	0
  1616  001450  6E8C               	movwf	3980,c	;volatile
  1617                           
  1618                           ;main.c: 98: LATE = 0x00;
  1619  001452  0E00               	movlw	0
  1620  001454  6E8D               	movwf	3981,c	;volatile
  1621                           
  1622                           ;main.c: 100: ADCON0 = 0x00;
  1623  001456  0E00               	movlw	0
  1624  001458  6EC2               	movwf	4034,c	;volatile
  1625                           
  1626                           ;main.c: 101: ADCON1 = 0xFF;
  1627  00145A  68C1               	setf	4033,c	;volatile
  1628                           
  1629                           ;main.c: 103: nRBPU = 0;
  1630  00145C  9EF1               	bcf	intcon2,7,c	;volatile
  1631                           
  1632                           ;main.c: 104: INT1IE = 1;
  1633  00145E  86F0               	bsf	intcon3,3,c	;volatile
  1634                           
  1635                           ;main.c: 106: ADCON0 = 0x00;
  1636  001460  0E00               	movlw	0
  1637  001462  6EC2               	movwf	4034,c	;volatile
  1638                           
  1639                           ;main.c: 107: ADCON1 = 0x1B;
  1640  001464  0E1B               	movlw	27
  1641  001466  6EC1               	movwf	4033,c	;volatile
  1642                           
  1643                           ;main.c: 109: CMCONbits.CIS = 0;
  1644  001468  96B4               	bcf	4020,3,c	;volatile
  1645                           
  1646                           ;main.c: 110: ADFM = 1;
  1647  00146A  8EC0               	bsf	4032,7,c	;volatile
  1648                           
  1649                           ;main.c: 112: (INTCONbits.GIE = 1);
  1650  00146C  8EF2               	bsf	intcon,7,c	;volatile
  1651                           
  1652                           ;main.c: 117: (INTCONbits.GIE = 0);
  1653  00146E  9EF2               	bcf	intcon,7,c	;volatile
  1654                           
  1655                           ;main.c: 118: I2C_Master_Init(10000);
  1656  001470  0E10               	movlw	16
  1657  001472  0100               	movlb	0	; () banked
  1658  001474  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  1659  001476  0E27               	movlw	39
  1660  001478  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  1661  00147A  0E00               	movlw	0
  1662  00147C  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  1663  00147E  0E00               	movlw	0
  1664  001480  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  1665  001482  EC9A  F022         	call	_I2C_Master_Init	;wreg free
  1666                           
  1667                           ;main.c: 119: initLCD();
  1668  001486  EC9F  F023         	call	_initLCD	;wreg free
  1669                           
  1670                           ;main.c: 120: uint16_t address = 0;
  1671  00148A  0E00               	movlw	0
  1672  00148C  0101               	movlb	1	; () banked
  1673  00148E  6F1E               	movwf	(main@address+1)& (0+255),b
  1674  001490  0E00               	movlw	0
  1675  001492  6F1D               	movwf	main@address& (0+255),b
  1676                           
  1677                           ; BSR set to: 1
  1678                           ;main.c: 121: (INTCONbits.GIE = 1);
  1679  001494  8EF2               	bsf	intcon,7,c	;volatile
  1680  001496                     l5486:
  1681                           
  1682                           ; BSR set to: 1
  1683                           ;main.c: 127: if(is_active) {
  1684  001496  0101               	movlb	1	; () banked
  1685  001498  510A               	movf	_is_active& (0+255),w,b
  1686  00149A  0101               	movlb	1	; () banked
  1687  00149C  110B               	iorwf	(_is_active+1)& (0+255),w,b
  1688  00149E  B4D8               	btfsc	status,2,c
  1689  0014A0  D116               	goto	l5548
  1690                           
  1691                           ; BSR set to: 1
  1692                           ;main.c: 128: LATCbits.LATC6 = 1;
  1693  0014A2  8C8B               	bsf	3979,6,c	;volatile
  1694                           
  1695                           ; BSR set to: 1
  1696                           ;main.c: 129: unsigned char time[7];
  1697                           ;main.c: 130: elapsed_time = 1;
  1698  0014A4  0E00               	movlw	0
  1699  0014A6  0101               	movlb	1	; () banked
  1700  0014A8  6F09               	movwf	(_elapsed_time+1)& (0+255),b
  1701  0014AA  0E01               	movlw	1
  1702  0014AC  6F08               	movwf	_elapsed_time& (0+255),b
  1703                           
  1704                           ; BSR set to: 1
  1705                           ;main.c: 131: clean_count();
  1706  0014AE  EC1F  F024         	call	_clean_count	;wreg free
  1707                           
  1708                           ;main.c: 132: set_time();
  1709  0014B2  ECCA  F022         	call	_set_time	;wreg free
  1710                           
  1711                           ;main.c: 134: unsigned int is_battery = 1;
  1712  0014B6  0E00               	movlw	0
  1713  0014B8  0101               	movlb	1	; () banked
  1714  0014BA  6F1C               	movwf	(main@is_battery+1)& (0+255),b
  1715  0014BC  0E01               	movlw	1
  1716  0014BE  6F1B               	movwf	main@is_battery& (0+255),b
  1717                           
  1718                           ;main.c: 154: while(total_num < 15 && !is_wait) {
  1719  0014C0  D084               	goto	l5524
  1720  0014C2                     l5498:
  1721                           
  1722                           ; BSR set to: 1
  1723                           ;main.c: 170: is_battery = PORTAbits.RA4 ;
  1724  0014C2  A880               	btfss	3968,4,c	;volatile
  1725  0014C4  D004               	goto	u6610
  1726  0014C6  0100               	movlb	0	; () banked
  1727  0014C8  6BFB               	clrf	??_main& (0+255),b
  1728  0014CA  2BFB               	incf	??_main& (0+255),f,b
  1729  0014CC  D002               	goto	u6618
  1730  0014CE                     u6610:
  1731  0014CE  0100               	movlb	0	; () banked
  1732  0014D0  6BFB               	clrf	??_main& (0+255),b
  1733  0014D2                     u6618:
  1734  0014D2  0100               	movlb	0	; () banked
  1735  0014D4  51FB               	movf	??_main& (0+255),w,b
  1736  0014D6  0101               	movlb	1	; () banked
  1737  0014D8  6F1B               	movwf	main@is_battery& (0+255),b
  1738  0014DA  6B1C               	clrf	(main@is_battery+1)& (0+255),b
  1739                           
  1740                           ; BSR set to: 1
  1741                           ;main.c: 171: move_stepper(100,5);
  1742  0014DC  0E00               	movlw	0
  1743  0014DE  0100               	movlb	0	; () banked
  1744  0014E0  6F81               	movwf	(move_stepper@loop_duration+1)& (0+255),b
  1745  0014E2  0E64               	movlw	100
  1746  0014E4  6F80               	movwf	move_stepper@loop_duration& (0+255),b
  1747  0014E6  0E00               	movlw	0
  1748  0014E8  0100               	movlb	0	; () banked
  1749  0014EA  6F83               	movwf	(move_stepper@duty+1)& (0+255),b
  1750  0014EC  0E05               	movlw	5
  1751  0014EE  6F82               	movwf	move_stepper@duty& (0+255),b
  1752  0014F0  EC51  F023         	call	_move_stepper	;wreg free
  1753                           
  1754                           ;main.c: 176: if(!is_battery) {
  1755  0014F4  0101               	movlb	1	; () banked
  1756  0014F6  511B               	movf	main@is_battery& (0+255),w,b
  1757  0014F8  0101               	movlb	1	; () banked
  1758  0014FA  111C               	iorwf	(main@is_battery+1)& (0+255),w,b
  1759  0014FC  A4D8               	btfss	status,2,c
  1760  0014FE  D015               	goto	l5514
  1761                           
  1762                           ; BSR set to: 1
  1763                           ;main.c: 178: readADC(2);
  1764  001500  0E02               	movlw	2
  1765  001502  EC68  F024         	call	_readADC
  1766                           
  1767                           ;main.c: 185: AA_num++;
  1768  001506  0101               	movlb	1	; () banked
  1769  001508  4B00               	infsnz	_AA_num& (0+255),f,b
  1770  00150A  2B01               	incf	(_AA_num+1)& (0+255),f,b
  1771                           
  1772                           ; BSR set to: 1
  1773                           ;main.c: 186: C_num += 2;
  1774  00150C  0E02               	movlw	2
  1775  00150E  0101               	movlb	1	; () banked
  1776  001510  2702               	addwf	_C_num& (0+255),f,b
  1777  001512  0E00               	movlw	0
  1778  001514  2303               	addwfc	(_C_num+1)& (0+255),f,b
  1779                           
  1780                           ; BSR set to: 1
  1781                           ;main.c: 187: Nine_num += 3;
  1782  001516  0E03               	movlw	3
  1783  001518  0101               	movlb	1	; () banked
  1784  00151A  2706               	addwf	_Nine_num& (0+255),f,b
  1785  00151C  0E00               	movlw	0
  1786  00151E  2307               	addwfc	(_Nine_num+1)& (0+255),f,b
  1787                           
  1788                           ; BSR set to: 1
  1789                           ;main.c: 188: Drain_num += 4;
  1790  001520  0E04               	movlw	4
  1791  001522  0101               	movlb	1	; () banked
  1792  001524  2704               	addwf	_Drain_num& (0+255),f,b
  1793  001526  0E00               	movlw	0
  1794  001528  2305               	addwfc	(_Drain_num+1)& (0+255),f,b
  1795  00152A                     l5514:
  1796                           
  1797                           ; BSR set to: 1
  1798                           ;main.c: 193: }
  1799                           ;main.c: 195: current_time(time);
  1800  00152A  0E14               	movlw	low main@time
  1801  00152C  0100               	movlb	0	; () banked
  1802  00152E  6F83               	movwf	current_time@time& (0+255),b
  1803  001530  0E01               	movlw	high main@time
  1804  001532  0100               	movlb	0	; () banked
  1805  001534  6F84               	movwf	(current_time@time+1)& (0+255),b
  1806  001536  ECDD  F01D         	call	_current_time	;wreg free
  1807                           
  1808                           ;main.c: 196: elapsed_time = calculate_elapsed_time(time);
  1809  00153A  0E14               	movlw	low main@time
  1810  00153C  0100               	movlb	0	; () banked
  1811  00153E  6F80               	movwf	calculate_elapsed_time@time& (0+255),b
  1812  001540  0E01               	movlw	high main@time
  1813  001542  0100               	movlb	0	; () banked
  1814  001544  6F81               	movwf	(calculate_elapsed_time@time+1)& (0+255),b
  1815  001546  ECAC  F01F         	call	_calculate_elapsed_time	;wreg free
  1816  00154A  C080  F108         	movff	?_calculate_elapsed_time,_elapsed_time
  1817  00154E  C081  F109         	movff	?_calculate_elapsed_time+1,_elapsed_time+1
  1818                           
  1819                           ;main.c: 197: printf(" %3d %d %x %x %f", elapsed_time, is_battery, ADRESH, ADRESL, conve
      +                          rt_voltage(ADRESH, ADRESL));
  1820  001552  0E7F               	movlw	low STR_1
  1821  001554  0100               	movlb	0	; () banked
  1822  001556  6FBF               	movwf	printf@f& (0+255),b
  1823  001558  0EFF               	movlw	high STR_1
  1824  00155A  0100               	movlb	0	; () banked
  1825  00155C  6FC0               	movwf	(printf@f+1)& (0+255),b
  1826  00155E  C108  F0C1         	movff	_elapsed_time,?_printf+2
  1827  001562  C109  F0C2         	movff	_elapsed_time+1,?_printf+3
  1828  001566  C11B  F0C3         	movff	main@is_battery,?_printf+4
  1829  00156A  C11C  F0C4         	movff	main@is_battery+1,?_printf+5
  1830  00156E  CFC4 F0C5          	movff	4036,?_printf+6	;volatile
  1831  001572  0100               	movlb	0	; () banked
  1832  001574  6BC6               	clrf	(?_printf+7)& (0+255),b
  1833  001576  CFC3 F0C7          	movff	4035,?_printf+8	;volatile
  1834  00157A  0100               	movlb	0	; () banked
  1835  00157C  6BC8               	clrf	(?_printf+9)& (0+255),b
  1836  00157E  CFC4 F0B2          	movff	4036,convert_voltage@high	;volatile
  1837  001582  0100               	movlb	0	; () banked
  1838  001584  6BB3               	clrf	(convert_voltage@high+1)& (0+255),b
  1839  001586  CFC3 F0B4          	movff	4035,convert_voltage@low	;volatile
  1840  00158A  0100               	movlb	0	; () banked
  1841  00158C  6BB5               	clrf	(convert_voltage@low+1)& (0+255),b
  1842  00158E  EC01  F020         	call	_convert_voltage	;wreg free
  1843  001592  C0B2  F0C9         	movff	?_convert_voltage,?_printf+10
  1844  001596  C0B3  F0CA         	movff	?_convert_voltage+1,?_printf+11
  1845  00159A  C0B4  F0CB         	movff	?_convert_voltage+2,?_printf+12
  1846  00159E  EC09  F000         	call	_printf	;wreg free
  1847                           
  1848                           ;main.c: 198: _delay((unsigned long)((300)*(8000000/4000.0)));
  1849  0015A2  0E04               	movlw	4
  1850  0015A4  0100               	movlb	0	; () banked
  1851  0015A6  6FFC               	movwf	(??_main+1)& (0+255),b
  1852  0015A8  0E0C               	movlw	12
  1853  0015AA  0100               	movlb	0	; () banked
  1854  0015AC  6FFB               	movwf	??_main& (0+255),b
  1855  0015AE  0E33               	movlw	51
  1856  0015B0                     u6837:
  1857  0015B0  2EE8               	decfsz	wreg,f,c
  1858  0015B2  D7FE               	bra	u6837
  1859  0015B4  2FFB               	decfsz	??_main& (0+255),f,b
  1860  0015B6  D7FC               	bra	u6837
  1861  0015B8  2FFC               	decfsz	(??_main+1)& (0+255),f,b
  1862  0015BA  D7FA               	bra	u6837
  1863  0015BC  D000               	nop2	
  1864                           
  1865                           ;main.c: 199: termination(elapsed_time);
  1866  0015BE  C108  F080         	movff	_elapsed_time,termination@time_now
  1867  0015C2  C109  F081         	movff	_elapsed_time+1,termination@time_now+1
  1868  0015C6  ECEE  F024         	call	_termination	;wreg free
  1869  0015CA                     l5524:
  1870  0015CA  0101               	movlb	1	; () banked
  1871  0015CC  5113               	movf	(_total_num+1)& (0+255),w,b
  1872  0015CE  E10B               	bnz	l5528
  1873  0015D0  0E0F               	movlw	15
  1874  0015D2  0101               	movlb	1	; () banked
  1875  0015D4  5D12               	subwf	_total_num& (0+255),w,b
  1876  0015D6  B0D8               	btfsc	status,0,c
  1877  0015D8  D006               	goto	l5528
  1878                           
  1879                           ; BSR set to: 1
  1880  0015DA  0101               	movlb	1	; () banked
  1881  0015DC  510C               	movf	_is_wait& (0+255),w,b
  1882  0015DE  0101               	movlb	1	; () banked
  1883  0015E0  110D               	iorwf	(_is_wait+1)& (0+255),w,b
  1884  0015E2  B4D8               	btfsc	status,2,c
  1885  0015E4  D76E               	goto	l5498
  1886  0015E6                     l5528:
  1887                           
  1888                           ; BSR set to: 1
  1889                           ;main.c: 200: }
  1890                           ;main.c: 203: Eeprom_WriteByte(address, AA_num);
  1891  0015E6  C11D  F080         	movff	main@address,Eeprom_WriteByte@address
  1892  0015EA  C11E  F081         	movff	main@address+1,Eeprom_WriteByte@address+1
  1893  0015EE  C100  F082         	movff	_AA_num,Eeprom_WriteByte@data
  1894  0015F2  EC93  F024         	call	_Eeprom_WriteByte	;wreg free
  1895                           
  1896                           ;main.c: 204: address = next_address(address);
  1897  0015F6  C11D  F080         	movff	main@address,next_address@address
  1898  0015FA  C11E  F081         	movff	main@address+1,next_address@address+1
  1899  0015FE  EC08  F025         	call	_next_address	;wreg free
  1900  001602  C080  F11D         	movff	?_next_address,main@address
  1901  001606  C081  F11E         	movff	?_next_address+1,main@address+1
  1902                           
  1903                           ;main.c: 205: Eeprom_WriteByte(address, C_num);
  1904  00160A  C11D  F080         	movff	main@address,Eeprom_WriteByte@address
  1905  00160E  C11E  F081         	movff	main@address+1,Eeprom_WriteByte@address+1
  1906  001612  C102  F082         	movff	_C_num,Eeprom_WriteByte@data
  1907  001616  EC93  F024         	call	_Eeprom_WriteByte	;wreg free
  1908                           
  1909                           ;main.c: 206: address = next_address(address);
  1910  00161A  C11D  F080         	movff	main@address,next_address@address
  1911  00161E  C11E  F081         	movff	main@address+1,next_address@address+1
  1912  001622  EC08  F025         	call	_next_address	;wreg free
  1913  001626  C080  F11D         	movff	?_next_address,main@address
  1914  00162A  C081  F11E         	movff	?_next_address+1,main@address+1
  1915                           
  1916                           ;main.c: 207: Eeprom_WriteByte(address, Nine_num);
  1917  00162E  C11D  F080         	movff	main@address,Eeprom_WriteByte@address
  1918  001632  C11E  F081         	movff	main@address+1,Eeprom_WriteByte@address+1
  1919  001636  C106  F082         	movff	_Nine_num,Eeprom_WriteByte@data
  1920  00163A  EC93  F024         	call	_Eeprom_WriteByte	;wreg free
  1921                           
  1922                           ;main.c: 208: address = next_address(address);
  1923  00163E  C11D  F080         	movff	main@address,next_address@address
  1924  001642  C11E  F081         	movff	main@address+1,next_address@address+1
  1925  001646  EC08  F025         	call	_next_address	;wreg free
  1926  00164A  C080  F11D         	movff	?_next_address,main@address
  1927  00164E  C081  F11E         	movff	?_next_address+1,main@address+1
  1928                           
  1929                           ;main.c: 209: Eeprom_WriteByte(address, Drain_num);
  1930  001652  C11D  F080         	movff	main@address,Eeprom_WriteByte@address
  1931  001656  C11E  F081         	movff	main@address+1,Eeprom_WriteByte@address+1
  1932  00165A  C104  F082         	movff	_Drain_num,Eeprom_WriteByte@data
  1933  00165E  EC93  F024         	call	_Eeprom_WriteByte	;wreg free
  1934                           
  1935                           ;main.c: 210: address = next_address(address);
  1936  001662  C11D  F080         	movff	main@address,next_address@address
  1937  001666  C11E  F081         	movff	main@address+1,next_address@address+1
  1938  00166A  EC08  F025         	call	_next_address	;wreg free
  1939  00166E  C080  F11D         	movff	?_next_address,main@address
  1940  001672  C081  F11E         	movff	?_next_address+1,main@address+1
  1941                           
  1942                           ;main.c: 211: Eeprom_WriteByte(address, elapsed_time);
  1943  001676  C11D  F080         	movff	main@address,Eeprom_WriteByte@address
  1944  00167A  C11E  F081         	movff	main@address+1,Eeprom_WriteByte@address+1
  1945  00167E  C108  F082         	movff	_elapsed_time,Eeprom_WriteByte@data
  1946  001682  EC93  F024         	call	_Eeprom_WriteByte	;wreg free
  1947                           
  1948                           ;main.c: 212: address = next_address(address);
  1949  001686  C11D  F080         	movff	main@address,next_address@address
  1950  00168A  C11E  F081         	movff	main@address+1,next_address@address+1
  1951  00168E  EC08  F025         	call	_next_address	;wreg free
  1952  001692  C080  F11D         	movff	?_next_address,main@address
  1953  001696  C081  F11E         	movff	?_next_address+1,main@address+1
  1954                           
  1955                           ;main.c: 214: LATCbits.LATC0 = 0;
  1956  00169A  908B               	bcf	3979,0,c	;volatile
  1957                           
  1958                           ;main.c: 215: is_wait = !is_wait;
  1959  00169C  0101               	movlb	1	; () banked
  1960  00169E  510C               	movf	_is_wait& (0+255),w,b
  1961  0016A0  0101               	movlb	1	; () banked
  1962  0016A2  110D               	iorwf	(_is_wait+1)& (0+255),w,b
  1963  0016A4  A4D8               	btfss	status,2,c
  1964  0016A6  D002               	goto	u6650
  1965  0016A8  0E01               	movlw	1
  1966  0016AA  D001               	goto	u6660
  1967  0016AC                     u6650:
  1968  0016AC  0E00               	movlw	0
  1969  0016AE                     u6660:
  1970  0016AE  0101               	movlb	1	; () banked
  1971  0016B0  6F0C               	movwf	_is_wait& (0+255),b
  1972  0016B2  6B0D               	clrf	(_is_wait+1)& (0+255),b
  1973                           
  1974                           ; BSR set to: 1
  1975                           ;main.c: 216: is_active = !is_active;
  1976  0016B4  0101               	movlb	1	; () banked
  1977  0016B6  510A               	movf	_is_active& (0+255),w,b
  1978  0016B8  0101               	movlb	1	; () banked
  1979  0016BA  110B               	iorwf	(_is_active+1)& (0+255),w,b
  1980  0016BC  A4D8               	btfss	status,2,c
  1981  0016BE  D002               	goto	u6670
  1982  0016C0  0E01               	movlw	1
  1983  0016C2  D001               	goto	u6680
  1984  0016C4                     u6670:
  1985  0016C4  0E00               	movlw	0
  1986  0016C6                     u6680:
  1987  0016C6  0101               	movlb	1	; () banked
  1988  0016C8  6F0A               	movwf	_is_active& (0+255),b
  1989  0016CA  6B0B               	clrf	(_is_active+1)& (0+255),b
  1990                           
  1991                           ;main.c: 217: } else if (log != 0) {
  1992  0016CC  D6E4               	goto	l5486
  1993  0016CE                     l5548:
  1994                           
  1995                           ; BSR set to: 1
  1996  0016CE  0101               	movlb	1	; () banked
  1997  0016D0  510E               	movf	_log& (0+255),w,b
  1998  0016D2  0101               	movlb	1	; () banked
  1999  0016D4  110F               	iorwf	(_log+1)& (0+255),w,b
  2000  0016D6  A4D8               	btfss	status,2,c
  2001  0016D8  D00A               	goto	l5556
  2002  0016DA  D04B               	goto	l5578
  2003  0016DC                     l148:
  2004                           
  2005                           ; BSR set to: 1
  2006                           ;main.c: 220: (INTCONbits.GIE = 0);
  2007  0016DC  9EF2               	bcf	intcon,7,c	;volatile
  2008                           
  2009                           ; BSR set to: 1
  2010                           ;main.c: 221: show_log(0);
  2011  0016DE  0E00               	movlw	0
  2012  0016E0  0100               	movlb	0	; () banked
  2013  0016E2  6FED               	movwf	(show_log@log_address+1)& (0+255),b
  2014  0016E4  0E00               	movlw	0
  2015  0016E6  6FEC               	movwf	show_log@log_address& (0+255),b
  2016  0016E8  ECD3  F01A         	call	_show_log	;wreg free
  2017                           
  2018                           ;main.c: 222: (INTCONbits.GIE = 1);
  2019  0016EC  8EF2               	bsf	intcon,7,c	;volatile
  2020  0016EE                     l5556:
  2021  0016EE  0E08               	movlw	8
  2022  0016F0  0101               	movlb	1	; () banked
  2023  0016F2  1910               	xorwf	_menu& (0+255),w,b
  2024  0016F4  0101               	movlb	1	; () banked
  2025  0016F6  1111               	iorwf	(_menu+1)& (0+255),w,b
  2026  0016F8  A4D8               	btfss	status,2,c
  2027  0016FA  D00A               	goto	l5562
  2028  0016FC  D7EF               	goto	l148
  2029  0016FE                     l151:
  2030                           
  2031                           ; BSR set to: 1
  2032                           ;main.c: 226: (INTCONbits.GIE = 0);
  2033  0016FE  9EF2               	bcf	intcon,7,c	;volatile
  2034                           
  2035                           ; BSR set to: 1
  2036                           ;main.c: 227: show_log(40);
  2037  001700  0E00               	movlw	0
  2038  001702  0100               	movlb	0	; () banked
  2039  001704  6FED               	movwf	(show_log@log_address+1)& (0+255),b
  2040  001706  0E28               	movlw	40
  2041  001708  6FEC               	movwf	show_log@log_address& (0+255),b
  2042  00170A  ECD3  F01A         	call	_show_log	;wreg free
  2043                           
  2044                           ;main.c: 228: (INTCONbits.GIE = 1);
  2045  00170E  8EF2               	bsf	intcon,7,c	;volatile
  2046  001710                     l5562:
  2047  001710  0E09               	movlw	9
  2048  001712  0101               	movlb	1	; () banked
  2049  001714  1910               	xorwf	_menu& (0+255),w,b
  2050  001716  0101               	movlb	1	; () banked
  2051  001718  1111               	iorwf	(_menu+1)& (0+255),w,b
  2052  00171A  A4D8               	btfss	status,2,c
  2053  00171C  D00A               	goto	l5568
  2054  00171E  D7EF               	goto	l151
  2055  001720                     l154:
  2056                           
  2057                           ; BSR set to: 1
  2058                           ;main.c: 232: (INTCONbits.GIE = 0);
  2059  001720  9EF2               	bcf	intcon,7,c	;volatile
  2060                           
  2061                           ; BSR set to: 1
  2062                           ;main.c: 233: show_log(80);
  2063  001722  0E00               	movlw	0
  2064  001724  0100               	movlb	0	; () banked
  2065  001726  6FED               	movwf	(show_log@log_address+1)& (0+255),b
  2066  001728  0E50               	movlw	80
  2067  00172A  6FEC               	movwf	show_log@log_address& (0+255),b
  2068  00172C  ECD3  F01A         	call	_show_log	;wreg free
  2069                           
  2070                           ;main.c: 234: (INTCONbits.GIE = 1);
  2071  001730  8EF2               	bsf	intcon,7,c	;volatile
  2072  001732                     l5568:
  2073  001732  0E0A               	movlw	10
  2074  001734  0101               	movlb	1	; () banked
  2075  001736  1910               	xorwf	_menu& (0+255),w,b
  2076  001738  0101               	movlb	1	; () banked
  2077  00173A  1111               	iorwf	(_menu+1)& (0+255),w,b
  2078  00173C  A4D8               	btfss	status,2,c
  2079  00173E  D6AB               	goto	l5486
  2080  001740  D7EF               	goto	l154
  2081  001742                     l158:
  2082                           
  2083                           ; BSR set to: 1
  2084                           ;main.c: 240: (INTCONbits.GIE = 0);
  2085  001742  9EF2               	bcf	intcon,7,c	;volatile
  2086                           
  2087                           ; BSR set to: 1
  2088                           ;main.c: 241: lcdInst(0b10000000);;
  2089  001744  0E80               	movlw	128
  2090  001746  EC25  F025         	call	_lcdInst
  2091                           
  2092                           ;main.c: 242: printf("press * to run");
  2093  00174A  0E9F               	movlw	low STR_2
  2094  00174C  0100               	movlb	0	; () banked
  2095  00174E  6FBF               	movwf	printf@f& (0+255),b
  2096  001750  0EFF               	movlw	high STR_2
  2097  001752  0100               	movlb	0	; () banked
  2098  001754  6FC0               	movwf	(printf@f+1)& (0+255),b
  2099  001756  EC09  F000         	call	_printf	;wreg free
  2100                           
  2101                           ;main.c: 243: lcdInst(0b11000000);;
  2102  00175A  0EC0               	movlw	192
  2103  00175C  EC25  F025         	call	_lcdInst
  2104                           
  2105                           ;main.c: 244: printf("<< 7 DATA 9 >>");
  2106  001760  0E90               	movlw	low STR_3
  2107  001762  0100               	movlb	0	; () banked
  2108  001764  6FBF               	movwf	printf@f& (0+255),b
  2109  001766  0EFF               	movlw	high STR_3
  2110  001768  0100               	movlb	0	; () banked
  2111  00176A  6FC0               	movwf	(printf@f+1)& (0+255),b
  2112  00176C  EC09  F000         	call	_printf	;wreg free
  2113                           
  2114                           ;main.c: 245: (INTCONbits.GIE = 1);
  2115  001770  8EF2               	bsf	intcon,7,c	;volatile
  2116  001772                     l5578:
  2117  001772  0101               	movlb	1	; () banked
  2118  001774  5110               	movf	_menu& (0+255),w,b
  2119  001776  0101               	movlb	1	; () banked
  2120  001778  1111               	iorwf	(_menu+1)& (0+255),w,b
  2121  00177A  A4D8               	btfss	status,2,c
  2122  00177C  D023               	goto	l5590
  2123                           
  2124                           ; BSR set to: 1
  2125  00177E  0101               	movlb	1	; () banked
  2126  001780  510A               	movf	_is_active& (0+255),w,b
  2127  001782  0101               	movlb	1	; () banked
  2128  001784  110B               	iorwf	(_is_active+1)& (0+255),w,b
  2129  001786  A4D8               	btfss	status,2,c
  2130  001788  D01D               	goto	l5590
  2131  00178A  D7DB               	goto	l158
  2132  00178C                     l163:
  2133                           
  2134                           ; BSR set to: 1
  2135                           ;main.c: 249: (INTCONbits.GIE = 0);
  2136  00178C  9EF2               	bcf	intcon,7,c	;volatile
  2137                           
  2138                           ; BSR set to: 1
  2139                           ;main.c: 250: lcdInst(0b10000000);;
  2140  00178E  0E80               	movlw	128
  2141  001790  EC25  F025         	call	_lcdInst
  2142                           
  2143                           ;main.c: 251: printf("elapsed time: %d", elapsed_time);
  2144  001794  0E5D               	movlw	low STR_4
  2145  001796  0100               	movlb	0	; () banked
  2146  001798  6FBF               	movwf	printf@f& (0+255),b
  2147  00179A  0EFF               	movlw	high STR_4
  2148  00179C  0100               	movlb	0	; () banked
  2149  00179E  6FC0               	movwf	(printf@f+1)& (0+255),b
  2150  0017A0  C108  F0C1         	movff	_elapsed_time,?_printf+2
  2151  0017A4  C109  F0C2         	movff	_elapsed_time+1,?_printf+3
  2152  0017A8  EC09  F000         	call	_printf	;wreg free
  2153                           
  2154                           ;main.c: 252: lcdInst(0b11000000);;
  2155  0017AC  0EC0               	movlw	192
  2156  0017AE  EC25  F025         	call	_lcdInst
  2157                           
  2158                           ;main.c: 253: printf("<< 7 DATA 9 >>");
  2159  0017B2  0E90               	movlw	low STR_3
  2160  0017B4  0100               	movlb	0	; () banked
  2161  0017B6  6FBF               	movwf	printf@f& (0+255),b
  2162  0017B8  0EFF               	movlw	high STR_3
  2163  0017BA  0100               	movlb	0	; () banked
  2164  0017BC  6FC0               	movwf	(printf@f+1)& (0+255),b
  2165  0017BE  EC09  F000         	call	_printf	;wreg free
  2166                           
  2167                           ;main.c: 254: (INTCONbits.GIE = 1);
  2168  0017C2  8EF2               	bsf	intcon,7,c	;volatile
  2169  0017C4                     l5590:
  2170  0017C4  0101               	movlb	1	; () banked
  2171  0017C6  0510               	decf	_menu& (0+255),w,b
  2172  0017C8  0101               	movlb	1	; () banked
  2173  0017CA  1111               	iorwf	(_menu+1)& (0+255),w,b
  2174  0017CC  A4D8               	btfss	status,2,c
  2175  0017CE  D01D               	goto	l5600
  2176  0017D0  D7DD               	goto	l163
  2177  0017D2                     l166:
  2178                           
  2179                           ; BSR set to: 1
  2180                           ;main.c: 258: (INTCONbits.GIE = 0);
  2181  0017D2  9EF2               	bcf	intcon,7,c	;volatile
  2182                           
  2183                           ; BSR set to: 1
  2184                           ;main.c: 259: lcdInst(0b10000000);;
  2185  0017D4  0E80               	movlw	128
  2186  0017D6  EC25  F025         	call	_lcdInst
  2187                           
  2188                           ;main.c: 260: printf("total: %d", total_num);
  2189  0017DA  0EEF               	movlw	low STR_6
  2190  0017DC  0100               	movlb	0	; () banked
  2191  0017DE  6FBF               	movwf	printf@f& (0+255),b
  2192  0017E0  0EFF               	movlw	high STR_6
  2193  0017E2  0100               	movlb	0	; () banked
  2194  0017E4  6FC0               	movwf	(printf@f+1)& (0+255),b
  2195  0017E6  C112  F0C1         	movff	_total_num,?_printf+2
  2196  0017EA  C113  F0C2         	movff	_total_num+1,?_printf+3
  2197  0017EE  EC09  F000         	call	_printf	;wreg free
  2198                           
  2199                           ;main.c: 261: lcdInst(0b11000000);;
  2200  0017F2  0EC0               	movlw	192
  2201  0017F4  EC25  F025         	call	_lcdInst
  2202                           
  2203                           ;main.c: 262: printf("<< 7 DATA 9 >>");
  2204  0017F8  0E90               	movlw	low STR_3
  2205  0017FA  0100               	movlb	0	; () banked
  2206  0017FC  6FBF               	movwf	printf@f& (0+255),b
  2207  0017FE  0EFF               	movlw	high STR_3
  2208  001800  0100               	movlb	0	; () banked
  2209  001802  6FC0               	movwf	(printf@f+1)& (0+255),b
  2210  001804  EC09  F000         	call	_printf	;wreg free
  2211                           
  2212                           ;main.c: 263: (INTCONbits.GIE = 1);
  2213  001808  8EF2               	bsf	intcon,7,c	;volatile
  2214  00180A                     l5600:
  2215  00180A  0E02               	movlw	2
  2216  00180C  0101               	movlb	1	; () banked
  2217  00180E  1910               	xorwf	_menu& (0+255),w,b
  2218  001810  0101               	movlb	1	; () banked
  2219  001812  1111               	iorwf	(_menu+1)& (0+255),w,b
  2220  001814  A4D8               	btfss	status,2,c
  2221  001816  D01D               	goto	l5610
  2222  001818  D7DC               	goto	l166
  2223  00181A                     l169:
  2224                           
  2225                           ; BSR set to: 1
  2226                           ;main.c: 267: (INTCONbits.GIE = 0);
  2227  00181A  9EF2               	bcf	intcon,7,c	;volatile
  2228                           
  2229                           ; BSR set to: 1
  2230                           ;main.c: 268: lcdInst(0b10000000);;
  2231  00181C  0E80               	movlw	128
  2232  00181E  EC25  F025         	call	_lcdInst
  2233                           
  2234                           ;main.c: 269: printf("AA sorted: %d", AA_num);
  2235  001822  0EAE               	movlw	low STR_8
  2236  001824  0100               	movlb	0	; () banked
  2237  001826  6FBF               	movwf	printf@f& (0+255),b
  2238  001828  0EFF               	movlw	high STR_8
  2239  00182A  0100               	movlb	0	; () banked
  2240  00182C  6FC0               	movwf	(printf@f+1)& (0+255),b
  2241  00182E  C100  F0C1         	movff	_AA_num,?_printf+2
  2242  001832  C101  F0C2         	movff	_AA_num+1,?_printf+3
  2243  001836  EC09  F000         	call	_printf	;wreg free
  2244                           
  2245                           ;main.c: 270: lcdInst(0b11000000);;
  2246  00183A  0EC0               	movlw	192
  2247  00183C  EC25  F025         	call	_lcdInst
  2248                           
  2249                           ;main.c: 271: printf("<< 7 DATA 9 >>");
  2250  001840  0E90               	movlw	low STR_3
  2251  001842  0100               	movlb	0	; () banked
  2252  001844  6FBF               	movwf	printf@f& (0+255),b
  2253  001846  0EFF               	movlw	high STR_3
  2254  001848  0100               	movlb	0	; () banked
  2255  00184A  6FC0               	movwf	(printf@f+1)& (0+255),b
  2256  00184C  EC09  F000         	call	_printf	;wreg free
  2257                           
  2258                           ;main.c: 272: (INTCONbits.GIE = 1);
  2259  001850  8EF2               	bsf	intcon,7,c	;volatile
  2260  001852                     l5610:
  2261  001852  0E03               	movlw	3
  2262  001854  0101               	movlb	1	; () banked
  2263  001856  1910               	xorwf	_menu& (0+255),w,b
  2264  001858  0101               	movlb	1	; () banked
  2265  00185A  1111               	iorwf	(_menu+1)& (0+255),w,b
  2266  00185C  A4D8               	btfss	status,2,c
  2267  00185E  D01D               	goto	l5620
  2268  001860  D7DC               	goto	l169
  2269  001862                     l172:
  2270                           
  2271                           ; BSR set to: 1
  2272                           ;main.c: 276: (INTCONbits.GIE = 0);
  2273  001862  9EF2               	bcf	intcon,7,c	;volatile
  2274                           
  2275                           ; BSR set to: 1
  2276                           ;main.c: 277: lcdInst(0b10000000);;
  2277  001864  0E80               	movlw	128
  2278  001866  EC25  F025         	call	_lcdInst
  2279                           
  2280                           ;main.c: 278: printf("C sorted: %d", C_num);
  2281  00186A  0ECA               	movlw	low STR_10
  2282  00186C  0100               	movlb	0	; () banked
  2283  00186E  6FBF               	movwf	printf@f& (0+255),b
  2284  001870  0EFF               	movlw	high STR_10
  2285  001872  0100               	movlb	0	; () banked
  2286  001874  6FC0               	movwf	(printf@f+1)& (0+255),b
  2287  001876  C102  F0C1         	movff	_C_num,?_printf+2
  2288  00187A  C103  F0C2         	movff	_C_num+1,?_printf+3
  2289  00187E  EC09  F000         	call	_printf	;wreg free
  2290                           
  2291                           ;main.c: 279: lcdInst(0b11000000);;
  2292  001882  0EC0               	movlw	192
  2293  001884  EC25  F025         	call	_lcdInst
  2294                           
  2295                           ;main.c: 280: printf("<< 7 DATA 9 >>");
  2296  001888  0E90               	movlw	low STR_3
  2297  00188A  0100               	movlb	0	; () banked
  2298  00188C  6FBF               	movwf	printf@f& (0+255),b
  2299  00188E  0EFF               	movlw	high STR_3
  2300  001890  0100               	movlb	0	; () banked
  2301  001892  6FC0               	movwf	(printf@f+1)& (0+255),b
  2302  001894  EC09  F000         	call	_printf	;wreg free
  2303                           
  2304                           ;main.c: 281: (INTCONbits.GIE = 1);
  2305  001898  8EF2               	bsf	intcon,7,c	;volatile
  2306  00189A                     l5620:
  2307  00189A  0E04               	movlw	4
  2308  00189C  0101               	movlb	1	; () banked
  2309  00189E  1910               	xorwf	_menu& (0+255),w,b
  2310  0018A0  0101               	movlb	1	; () banked
  2311  0018A2  1111               	iorwf	(_menu+1)& (0+255),w,b
  2312  0018A4  A4D8               	btfss	status,2,c
  2313  0018A6  D01D               	goto	l5630
  2314  0018A8  D7DC               	goto	l172
  2315  0018AA                     l175:
  2316                           
  2317                           ; BSR set to: 1
  2318                           ;main.c: 285: (INTCONbits.GIE = 0);
  2319  0018AA  9EF2               	bcf	intcon,7,c	;volatile
  2320                           
  2321                           ; BSR set to: 1
  2322                           ;main.c: 286: lcdInst(0b10000000);;
  2323  0018AC  0E80               	movlw	128
  2324  0018AE  EC25  F025         	call	_lcdInst
  2325                           
  2326                           ;main.c: 287: printf("9V sorted: %d", Nine_num);
  2327  0018B2  0EBC               	movlw	low STR_12
  2328  0018B4  0100               	movlb	0	; () banked
  2329  0018B6  6FBF               	movwf	printf@f& (0+255),b
  2330  0018B8  0EFF               	movlw	high STR_12
  2331  0018BA  0100               	movlb	0	; () banked
  2332  0018BC  6FC0               	movwf	(printf@f+1)& (0+255),b
  2333  0018BE  C106  F0C1         	movff	_Nine_num,?_printf+2
  2334  0018C2  C107  F0C2         	movff	_Nine_num+1,?_printf+3
  2335  0018C6  EC09  F000         	call	_printf	;wreg free
  2336                           
  2337                           ;main.c: 288: lcdInst(0b11000000);;
  2338  0018CA  0EC0               	movlw	192
  2339  0018CC  EC25  F025         	call	_lcdInst
  2340                           
  2341                           ;main.c: 289: printf("<< 7 DATA 9 >>");
  2342  0018D0  0E90               	movlw	low STR_3
  2343  0018D2  0100               	movlb	0	; () banked
  2344  0018D4  6FBF               	movwf	printf@f& (0+255),b
  2345  0018D6  0EFF               	movlw	high STR_3
  2346  0018D8  0100               	movlb	0	; () banked
  2347  0018DA  6FC0               	movwf	(printf@f+1)& (0+255),b
  2348  0018DC  EC09  F000         	call	_printf	;wreg free
  2349                           
  2350                           ;main.c: 290: (INTCONbits.GIE = 1);
  2351  0018E0  8EF2               	bsf	intcon,7,c	;volatile
  2352  0018E2                     l5630:
  2353  0018E2  0E05               	movlw	5
  2354  0018E4  0101               	movlb	1	; () banked
  2355  0018E6  1910               	xorwf	_menu& (0+255),w,b
  2356  0018E8  0101               	movlb	1	; () banked
  2357  0018EA  1111               	iorwf	(_menu+1)& (0+255),w,b
  2358  0018EC  A4D8               	btfss	status,2,c
  2359  0018EE  D01D               	goto	l5640
  2360  0018F0  D7DC               	goto	l175
  2361  0018F2                     l178:
  2362                           
  2363                           ; BSR set to: 1
  2364                           ;main.c: 294: (INTCONbits.GIE = 0);
  2365  0018F2  9EF2               	bcf	intcon,7,c	;volatile
  2366                           
  2367                           ; BSR set to: 1
  2368                           ;main.c: 295: lcdInst(0b10000000);;
  2369  0018F4  0E80               	movlw	128
  2370  0018F6  EC25  F025         	call	_lcdInst
  2371                           
  2372                           ;main.c: 296: printf("Drained: %d", Drain_num);
  2373  0018FA  0EE3               	movlw	low STR_14
  2374  0018FC  0100               	movlb	0	; () banked
  2375  0018FE  6FBF               	movwf	printf@f& (0+255),b
  2376  001900  0EFF               	movlw	high STR_14
  2377  001902  0100               	movlb	0	; () banked
  2378  001904  6FC0               	movwf	(printf@f+1)& (0+255),b
  2379  001906  C104  F0C1         	movff	_Drain_num,?_printf+2
  2380  00190A  C105  F0C2         	movff	_Drain_num+1,?_printf+3
  2381  00190E  EC09  F000         	call	_printf	;wreg free
  2382                           
  2383                           ;main.c: 297: lcdInst(0b11000000);;
  2384  001912  0EC0               	movlw	192
  2385  001914  EC25  F025         	call	_lcdInst
  2386                           
  2387                           ;main.c: 298: printf("<< 7 DATA 9 >>");
  2388  001918  0E90               	movlw	low STR_3
  2389  00191A  0100               	movlb	0	; () banked
  2390  00191C  6FBF               	movwf	printf@f& (0+255),b
  2391  00191E  0EFF               	movlw	high STR_3
  2392  001920  0100               	movlb	0	; () banked
  2393  001922  6FC0               	movwf	(printf@f+1)& (0+255),b
  2394  001924  EC09  F000         	call	_printf	;wreg free
  2395                           
  2396                           ;main.c: 299: (INTCONbits.GIE = 1);
  2397  001928  8EF2               	bsf	intcon,7,c	;volatile
  2398  00192A                     l5640:
  2399  00192A  0E06               	movlw	6
  2400  00192C  0101               	movlb	1	; () banked
  2401  00192E  1910               	xorwf	_menu& (0+255),w,b
  2402  001930  0101               	movlb	1	; () banked
  2403  001932  1111               	iorwf	(_menu+1)& (0+255),w,b
  2404  001934  A4D8               	btfss	status,2,c
  2405  001936  D019               	goto	l5650
  2406  001938  D7DC               	goto	l178
  2407  00193A                     l181:
  2408                           
  2409                           ; BSR set to: 1
  2410                           ;main.c: 303: (INTCONbits.GIE = 0);
  2411  00193A  9EF2               	bcf	intcon,7,c	;volatile
  2412                           
  2413                           ; BSR set to: 1
  2414                           ;main.c: 304: lcdInst(0b10000000);;
  2415  00193C  0E80               	movlw	128
  2416  00193E  EC25  F025         	call	_lcdInst
  2417                           
  2418                           ;main.c: 305: printf("op #: 1 2 3");
  2419  001942  0ED7               	movlw	low STR_16
  2420  001944  0100               	movlb	0	; () banked
  2421  001946  6FBF               	movwf	printf@f& (0+255),b
  2422  001948  0EFF               	movlw	high STR_16
  2423  00194A  0100               	movlb	0	; () banked
  2424  00194C  6FC0               	movwf	(printf@f+1)& (0+255),b
  2425  00194E  EC09  F000         	call	_printf	;wreg free
  2426                           
  2427                           ;main.c: 306: lcdInst(0b11000000);;
  2428  001952  0EC0               	movlw	192
  2429  001954  EC25  F025         	call	_lcdInst
  2430                           
  2431                           ;main.c: 307: printf("<< 7 DATA 9 >>");
  2432  001958  0E90               	movlw	low STR_3
  2433  00195A  0100               	movlb	0	; () banked
  2434  00195C  6FBF               	movwf	printf@f& (0+255),b
  2435  00195E  0EFF               	movlw	high STR_3
  2436  001960  0100               	movlb	0	; () banked
  2437  001962  6FC0               	movwf	(printf@f+1)& (0+255),b
  2438  001964  EC09  F000         	call	_printf	;wreg free
  2439                           
  2440                           ;main.c: 308: (INTCONbits.GIE = 1);
  2441  001968  8EF2               	bsf	intcon,7,c	;volatile
  2442  00196A                     l5650:
  2443  00196A  0E07               	movlw	7
  2444  00196C  0101               	movlb	1	; () banked
  2445  00196E  1910               	xorwf	_menu& (0+255),w,b
  2446  001970  0101               	movlb	1	; () banked
  2447  001972  1111               	iorwf	(_menu+1)& (0+255),w,b
  2448  001974  A4D8               	btfss	status,2,c
  2449  001976  D58F               	goto	l5486
  2450  001978  D7E0               	goto	l181
  2451  00197A                     __end_of_main:
  2452                           	opt stack 0
  2453                           tblptru	equ	0xFF8
  2454                           intcon	equ	0xFF2
  2455                           intcon2	equ	0xFF1
  2456                           intcon3	equ	0xFF0
  2457                           postinc0	equ	0xFEE
  2458                           wreg	equ	0xFE8
  2459                           status	equ	0xFD8
  2460                           
  2461 ;; *************** function _termination *****************
  2462 ;; Defined at:
  2463 ;;		line 446 in file "main.c"
  2464 ;; Parameters:    Size  Location     Type
  2465 ;;  time_now        2    0[BANK0 ] unsigned int 
  2466 ;; Auto vars:     Size  Location     Type
  2467 ;;		None
  2468 ;; Return value:  Size  Location     Type
  2469 ;;                  1    wreg      void 
  2470 ;; Registers used:
  2471 ;;		wreg, status,2, status,0
  2472 ;; Tracked objects:
  2473 ;;		On entry : 0/0
  2474 ;;		On exit  : 0/0
  2475 ;;		Unchanged: 0/0
  2476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2477 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2480 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2481 ;;Total ram usage:        2 bytes
  2482 ;; Hardware stack levels used:    1
  2483 ;; Hardware stack levels required when called:    6
  2484 ;; This function calls:
  2485 ;;		Nothing
  2486 ;; This function is called by:
  2487 ;;		_main
  2488 ;; This function uses a non-reentrant model
  2489 ;;
  2490                           
  2491                           	psect	text1
  2492  0049DC                     __ptext1:
  2493                           	opt stack 0
  2494  0049DC                     _termination:
  2495                           	opt stack 24
  2496                           
  2497                           ;main.c: 447: if (time_now > 30) { extern unsigned int is_wait; is_wait = 1; }
  2498                           
  2499                           ; BSR set to: 1
  2500                           ;incstack = 0
  2501  0049DC  0100               	movlb	0	; () banked
  2502  0049DE  5181               	movf	(termination@time_now+1)& (0+255),w,b
  2503  0049E0  E105               	bnz	u6350
  2504  0049E2  0E1F               	movlw	31
  2505  0049E4  0100               	movlb	0	; () banked
  2506  0049E6  5D80               	subwf	termination@time_now& (0+255),w,b
  2507  0049E8  A0D8               	btfss	status,0,c
  2508  0049EA  0012               	return	
  2509  0049EC                     u6350:
  2510                           
  2511                           ; BSR set to: 0
  2512  0049EC  0E00               	movlw	0
  2513  0049EE  0101               	movlb	1	; () banked
  2514  0049F0  6F0D               	movwf	(_is_wait+1)& (0+255),b
  2515  0049F2  0E01               	movlw	1
  2516  0049F4  6F0C               	movwf	_is_wait& (0+255),b
  2517  0049F6  0012               	return	
  2518  0049F8                     __end_of_termination:
  2519                           	opt stack 0
  2520                           tblptru	equ	0xFF8
  2521                           intcon	equ	0xFF2
  2522                           intcon2	equ	0xFF1
  2523                           intcon3	equ	0xFF0
  2524                           postinc0	equ	0xFEE
  2525                           wreg	equ	0xFE8
  2526                           status	equ	0xFD8
  2527                           
  2528 ;; *************** function _show_log *****************
  2529 ;; Defined at:
  2530 ;;		line 552 in file "main.c"
  2531 ;; Parameters:    Size  Location     Type
  2532 ;;  log_address     2  108[BANK0 ] unsigned int 
  2533 ;; Auto vars:     Size  Location     Type
  2534 ;;  address         2  121[BANK0 ] unsigned int 
  2535 ;;  elapsed_time    2  119[BANK0 ] unsigned int 
  2536 ;;  Drain_num       2  117[BANK0 ] unsigned int 
  2537 ;;  Nine_num        2  115[BANK0 ] unsigned int 
  2538 ;;  C_num           2  113[BANK0 ] unsigned int 
  2539 ;;  AA_num          2  111[BANK0 ] unsigned int 
  2540 ;; Return value:  Size  Location     Type
  2541 ;;                  1    wreg      void 
  2542 ;; Registers used:
  2543 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2544 ;; Tracked objects:
  2545 ;;		On entry : 0/0
  2546 ;;		On exit  : 0/0
  2547 ;;		Unchanged: 0/0
  2548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2549 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2550 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2551 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2552 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2553 ;;Total ram usage:       15 bytes
  2554 ;; Hardware stack levels used:    1
  2555 ;; Hardware stack levels required when called:   10
  2556 ;; This function calls:
  2557 ;;		_Eeprom_ReadByte
  2558 ;;		_lcdInst
  2559 ;;		_next_address
  2560 ;;		_printf
  2561 ;; This function is called by:
  2562 ;;		_main
  2563 ;; This function uses a non-reentrant model
  2564 ;;
  2565                           
  2566                           	psect	text2
  2567  0035A6                     __ptext2:
  2568                           	opt stack 0
  2569  0035A6                     _show_log:
  2570                           	opt stack 20
  2571                           
  2572                           ;main.c: 554: uint16_t address = log_address;
  2573                           
  2574                           ;incstack = 0
  2575  0035A6  C0EC  F0F9         	movff	show_log@log_address,show_log@address
  2576  0035AA  C0ED  F0FA         	movff	show_log@log_address+1,show_log@address+1
  2577                           
  2578                           ;main.c: 555: lcdInst(0b10000000);;
  2579  0035AE  0E80               	movlw	128
  2580  0035B0  EC25  F025         	call	_lcdInst
  2581                           
  2582                           ;main.c: 557: unsigned int AA_num = Eeprom_ReadByte(address);
  2583  0035B4  C0F9  F080         	movff	show_log@address,Eeprom_ReadByte@address
  2584  0035B8  C0FA  F081         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  2585  0035BC  ECFC  F024         	call	_Eeprom_ReadByte	;wreg free
  2586  0035C0  0100               	movlb	0	; () banked
  2587  0035C2  6FEE               	movwf	??_show_log& (0+255),b
  2588  0035C4  0100               	movlb	0	; () banked
  2589  0035C6  51EE               	movf	??_show_log& (0+255),w,b
  2590  0035C8  0100               	movlb	0	; () banked
  2591  0035CA  6FEF               	movwf	show_log@AA_num& (0+255),b
  2592  0035CC  6BF0               	clrf	(show_log@AA_num+1)& (0+255),b
  2593                           
  2594                           ;main.c: 558: address = next_address(address);
  2595  0035CE  C0F9  F080         	movff	show_log@address,next_address@address
  2596  0035D2  C0FA  F081         	movff	show_log@address+1,next_address@address+1
  2597  0035D6  EC08  F025         	call	_next_address	;wreg free
  2598  0035DA  C080  F0F9         	movff	?_next_address,show_log@address
  2599  0035DE  C081  F0FA         	movff	?_next_address+1,show_log@address+1
  2600                           
  2601                           ;main.c: 559: unsigned int C_num = Eeprom_ReadByte(address);
  2602  0035E2  C0F9  F080         	movff	show_log@address,Eeprom_ReadByte@address
  2603  0035E6  C0FA  F081         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  2604  0035EA  ECFC  F024         	call	_Eeprom_ReadByte	;wreg free
  2605  0035EE  0100               	movlb	0	; () banked
  2606  0035F0  6FEE               	movwf	??_show_log& (0+255),b
  2607  0035F2  0100               	movlb	0	; () banked
  2608  0035F4  51EE               	movf	??_show_log& (0+255),w,b
  2609  0035F6  0100               	movlb	0	; () banked
  2610  0035F8  6FF1               	movwf	show_log@C_num& (0+255),b
  2611  0035FA  6BF2               	clrf	(show_log@C_num+1)& (0+255),b
  2612                           
  2613                           ;main.c: 560: address = next_address(address);
  2614  0035FC  C0F9  F080         	movff	show_log@address,next_address@address
  2615  003600  C0FA  F081         	movff	show_log@address+1,next_address@address+1
  2616  003604  EC08  F025         	call	_next_address	;wreg free
  2617  003608  C080  F0F9         	movff	?_next_address,show_log@address
  2618  00360C  C081  F0FA         	movff	?_next_address+1,show_log@address+1
  2619                           
  2620                           ;main.c: 561: unsigned int Nine_num = Eeprom_ReadByte(address);
  2621  003610  C0F9  F080         	movff	show_log@address,Eeprom_ReadByte@address
  2622  003614  C0FA  F081         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  2623  003618  ECFC  F024         	call	_Eeprom_ReadByte	;wreg free
  2624  00361C  0100               	movlb	0	; () banked
  2625  00361E  6FEE               	movwf	??_show_log& (0+255),b
  2626  003620  0100               	movlb	0	; () banked
  2627  003622  51EE               	movf	??_show_log& (0+255),w,b
  2628  003624  0100               	movlb	0	; () banked
  2629  003626  6FF3               	movwf	show_log@Nine_num& (0+255),b
  2630  003628  6BF4               	clrf	(show_log@Nine_num+1)& (0+255),b
  2631                           
  2632                           ;main.c: 562: address = next_address(address);
  2633  00362A  C0F9  F080         	movff	show_log@address,next_address@address
  2634  00362E  C0FA  F081         	movff	show_log@address+1,next_address@address+1
  2635  003632  EC08  F025         	call	_next_address	;wreg free
  2636  003636  C080  F0F9         	movff	?_next_address,show_log@address
  2637  00363A  C081  F0FA         	movff	?_next_address+1,show_log@address+1
  2638                           
  2639                           ;main.c: 563: unsigned int Drain_num = Eeprom_ReadByte(address);
  2640  00363E  C0F9  F080         	movff	show_log@address,Eeprom_ReadByte@address
  2641  003642  C0FA  F081         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  2642  003646  ECFC  F024         	call	_Eeprom_ReadByte	;wreg free
  2643  00364A  0100               	movlb	0	; () banked
  2644  00364C  6FEE               	movwf	??_show_log& (0+255),b
  2645  00364E  0100               	movlb	0	; () banked
  2646  003650  51EE               	movf	??_show_log& (0+255),w,b
  2647  003652  0100               	movlb	0	; () banked
  2648  003654  6FF5               	movwf	show_log@Drain_num& (0+255),b
  2649  003656  6BF6               	clrf	(show_log@Drain_num+1)& (0+255),b
  2650                           
  2651                           ;main.c: 564: address = next_address(address);
  2652  003658  C0F9  F080         	movff	show_log@address,next_address@address
  2653  00365C  C0FA  F081         	movff	show_log@address+1,next_address@address+1
  2654  003660  EC08  F025         	call	_next_address	;wreg free
  2655  003664  C080  F0F9         	movff	?_next_address,show_log@address
  2656  003668  C081  F0FA         	movff	?_next_address+1,show_log@address+1
  2657                           
  2658                           ;main.c: 565: unsigned int elapsed_time = Eeprom_ReadByte(address);
  2659  00366C  C0F9  F080         	movff	show_log@address,Eeprom_ReadByte@address
  2660  003670  C0FA  F081         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  2661  003674  ECFC  F024         	call	_Eeprom_ReadByte	;wreg free
  2662  003678  0100               	movlb	0	; () banked
  2663  00367A  6FEE               	movwf	??_show_log& (0+255),b
  2664  00367C  0100               	movlb	0	; () banked
  2665  00367E  51EE               	movf	??_show_log& (0+255),w,b
  2666  003680  0100               	movlb	0	; () banked
  2667  003682  6FF7               	movwf	show_log@elapsed_time& (0+255),b
  2668  003684  6BF8               	clrf	(show_log@elapsed_time+1)& (0+255),b
  2669                           
  2670                           ; BSR set to: 0
  2671                           ;main.c: 567: printf("AA:%d C:%d 9V:%d", AA_num, C_num, Nine_num);
  2672  003686  0E6E               	movlw	low STR_19
  2673  003688  0100               	movlb	0	; () banked
  2674  00368A  6FBF               	movwf	printf@f& (0+255),b
  2675  00368C  0EFF               	movlw	high STR_19
  2676  00368E  0100               	movlb	0	; () banked
  2677  003690  6FC0               	movwf	(printf@f+1)& (0+255),b
  2678  003692  C0EF  F0C1         	movff	show_log@AA_num,?_printf+2
  2679  003696  C0F0  F0C2         	movff	show_log@AA_num+1,?_printf+3
  2680  00369A  C0F1  F0C3         	movff	show_log@C_num,?_printf+4
  2681  00369E  C0F2  F0C4         	movff	show_log@C_num+1,?_printf+5
  2682  0036A2  C0F3  F0C5         	movff	show_log@Nine_num,?_printf+6
  2683  0036A6  C0F4  F0C6         	movff	show_log@Nine_num+1,?_printf+7
  2684  0036AA  EC09  F000         	call	_printf	;wreg free
  2685                           
  2686                           ;main.c: 568: lcdInst(0b11000000);;
  2687  0036AE  0EC0               	movlw	192
  2688  0036B0  EC25  F025         	call	_lcdInst
  2689                           
  2690                           ;main.c: 569: printf("D:%d time:%d 8>>", Drain_num, elapsed_time);
  2691  0036B4  0E4C               	movlw	low STR_20
  2692  0036B6  0100               	movlb	0	; () banked
  2693  0036B8  6FBF               	movwf	printf@f& (0+255),b
  2694  0036BA  0EFF               	movlw	high STR_20
  2695  0036BC  0100               	movlb	0	; () banked
  2696  0036BE  6FC0               	movwf	(printf@f+1)& (0+255),b
  2697  0036C0  C0F5  F0C1         	movff	show_log@Drain_num,?_printf+2
  2698  0036C4  C0F6  F0C2         	movff	show_log@Drain_num+1,?_printf+3
  2699  0036C8  C0F7  F0C3         	movff	show_log@elapsed_time,?_printf+4
  2700  0036CC  C0F8  F0C4         	movff	show_log@elapsed_time+1,?_printf+5
  2701  0036D0  EC09  F000         	call	_printf	;wreg free
  2702  0036D4  0012               	return		;funcret
  2703  0036D6                     __end_of_show_log:
  2704                           	opt stack 0
  2705                           tblptru	equ	0xFF8
  2706                           intcon	equ	0xFF2
  2707                           intcon2	equ	0xFF1
  2708                           intcon3	equ	0xFF0
  2709                           postinc0	equ	0xFEE
  2710                           wreg	equ	0xFE8
  2711                           status	equ	0xFD8
  2712                           
  2713 ;; *************** function _printf *****************
  2714 ;; Defined at:
  2715 ;;		line 464 in file "/Applications/microchip/xc8/v1.40/sources/common/doprnt.c"
  2716 ;; Parameters:    Size  Location     Type
  2717 ;;  f               2   63[BANK0 ] PTR const unsigned char 
  2718 ;;		 -> STR_20(17), STR_19(17), STR_18(6), STR_17(15), 
  2719 ;;		 -> STR_16(12), STR_15(15), STR_14(12), STR_13(15), 
  2720 ;;		 -> STR_12(14), STR_11(15), STR_10(13), STR_9(15), 
  2721 ;;		 -> STR_8(14), STR_7(15), STR_6(10), STR_5(15), 
  2722 ;;		 -> STR_4(17), STR_3(15), STR_2(15), STR_1(17), 
  2723 ;; Auto vars:     Size  Location     Type
  2724 ;;  idx             1   85[BANK0 ] unsigned char 
  2725 ;;  val             4  100[BANK0 ] unsigned long 
  2726 ;;  tmpval          4   94[BANK0 ] struct .
  2727 ;;  fval            3  104[BANK0 ] struct .
  2728 ;;  cp              3    0        PTR const unsigned char 
  2729 ;;  exp             2   98[BANK0 ] int 
  2730 ;;  prec            2   92[BANK0 ] int 
  2731 ;;  flag            2   90[BANK0 ] unsigned short 
  2732 ;;  width           2   88[BANK0 ] int 
  2733 ;;  ap              2   86[BANK0 ] PTR void [1]
  2734 ;;		 -> ?i2_printf(2), ?_printf(2), 
  2735 ;;  len             2    0        unsigned int 
  2736 ;;  c               1  107[BANK0 ] char 
  2737 ;;  d               1    0        unsigned char 
  2738 ;; Return value:  Size  Location     Type
  2739 ;;                  2   63[BANK0 ] int 
  2740 ;; Registers used:
  2741 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2742 ;; Tracked objects:
  2743 ;;		On entry : 0/0
  2744 ;;		On exit  : 0/0
  2745 ;;		Unchanged: 0/0
  2746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2747 ;;      Params:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2748 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2749 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2750 ;;      Totals:         0      45       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2751 ;;Total ram usage:       45 bytes
  2752 ;; Hardware stack levels used:    1
  2753 ;; Hardware stack levels required when called:    9
  2754 ;; This function calls:
  2755 ;;		___awdiv
  2756 ;;		___ftadd
  2757 ;;		___ftge
  2758 ;;		___ftmul
  2759 ;;		___ftneg
  2760 ;;		___ftsub
  2761 ;;		___fttol
  2762 ;;		___lldiv
  2763 ;;		___llmod
  2764 ;;		___lltoft
  2765 ;;		___wmul
  2766 ;;		__div_to_l_
  2767 ;;		__tdiv_to_l_
  2768 ;;		_fround
  2769 ;;		_isdigit
  2770 ;;		_putch
  2771 ;;		_scale
  2772 ;; This function is called by:
  2773 ;;		_main
  2774 ;;		_show_log
  2775 ;; This function uses a non-reentrant model
  2776 ;;
  2777                           
  2778                           	psect	text3
  2779  000012                     __ptext3:
  2780                           	opt stack 0
  2781  000012                     _printf:
  2782                           	opt stack 20
  2783                           
  2784                           ;doprnt.c: 466: va_list ap;
  2785                           ;doprnt.c: 499: signed char c;
  2786                           ;doprnt.c: 501: int width;
  2787                           ;doprnt.c: 504: int prec;
  2788                           ;doprnt.c: 508: unsigned short flag;
  2789                           ;doprnt.c: 515: char d;
  2790                           ;doprnt.c: 516: double fval;
  2791                           ;doprnt.c: 517: int exp;
  2792                           ;doprnt.c: 523: union {
  2793                           ;doprnt.c: 524: unsigned long vd;
  2794                           ;doprnt.c: 525: double integ;
  2795                           ;doprnt.c: 526: } tmpval;
  2796                           ;doprnt.c: 528: unsigned long val;
  2797                           ;doprnt.c: 529: unsigned len;
  2798                           ;doprnt.c: 530: const char * cp;
  2799                           ;doprnt.c: 533: *ap = __va_start();
  2800                           
  2801                           ;incstack = 0
  2802  000012  0EC1               	movlw	low (?_printf+2)
  2803  000014  0100               	movlb	0	; () banked
  2804  000016  6FD6               	movwf	printf@ap& (0+255),b
  2805  000018  0E00               	movlw	high (?_printf+2)
  2806  00001A  0100               	movlb	0	; () banked
  2807  00001C  6FD7               	movwf	(printf@ap+1)& (0+255),b
  2808                           
  2809                           ;doprnt.c: 536: while(c = *f++) {
  2810  00001E  EF75  F005         	goto	l4874
  2811  000022                     l4618:
  2812                           
  2813                           ; BSR set to: 0
  2814                           ;doprnt.c: 538: if(c != '%')
  2815  000022  0E25               	movlw	37
  2816  000024  0100               	movlb	0	; () banked
  2817  000026  19EB               	xorwf	printf@c& (0+255),w,b
  2818  000028  B4D8               	btfsc	status,2,c
  2819  00002A  D006               	goto	l4622
  2820                           
  2821                           ; BSR set to: 0
  2822                           ;doprnt.c: 540: {
  2823                           ;doprnt.c: 541: (putch(c) );
  2824  00002C  0100               	movlb	0	; () banked
  2825  00002E  51EB               	movf	printf@c& (0+255),w,b
  2826  000030  EC1D  F025         	call	_putch
  2827                           
  2828                           ;doprnt.c: 542: continue;
  2829  000034  EF75  F005         	goto	l4874
  2830  000038                     l4622:
  2831                           
  2832                           ;doprnt.c: 543: }
  2833                           ;doprnt.c: 546: width = 0;
  2834  000038  0E00               	movlw	0
  2835  00003A  0100               	movlb	0	; () banked
  2836  00003C  6FD9               	movwf	(printf@width+1)& (0+255),b
  2837  00003E  0E00               	movlw	0
  2838  000040  6FD8               	movwf	printf@width& (0+255),b
  2839                           
  2840                           ;doprnt.c: 548: flag = 0;
  2841  000042  0E00               	movlw	0
  2842  000044  0100               	movlb	0	; () banked
  2843  000046  6FDB               	movwf	(printf@flag+1)& (0+255),b
  2844  000048  0E00               	movlw	0
  2845  00004A  6FDA               	movwf	printf@flag& (0+255),b
  2846                           
  2847                           ; BSR set to: 0
  2848                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2849  00004C  C0BF  FFF6         	movff	printf@f,tblptrl
  2850  000050  C0C0  FFF7         	movff	printf@f+1,tblptrh
  2851  000054                     	if	0	;tblptru may be non-zero
  2852  000054                     	endif
  2853  000054                     	if	0	;tblptru may be non-zero
  2854  000054                     	endif
  2855  000054  0008               	tblrd		*
  2856  000056  50F5               	movf	tablat,w,c
  2857  000058  EC7E  F024         	call	_isdigit
  2858  00005C  A0D8               	btfss	status,0,c
  2859  00005E  D047               	goto	l4642
  2860                           
  2861                           ;doprnt.c: 598: width = 0;
  2862  000060  0E00               	movlw	0
  2863  000062  0100               	movlb	0	; () banked
  2864  000064  6FD9               	movwf	(printf@width+1)& (0+255),b
  2865  000066  0E00               	movlw	0
  2866  000068  6FD8               	movwf	printf@width& (0+255),b
  2867  00006A                     l4628:
  2868                           
  2869                           ;doprnt.c: 600: width *= 10;
  2870  00006A  C0D8  F08E         	movff	printf@width,___wmul@multiplier
  2871  00006E  C0D9  F08F         	movff	printf@width+1,___wmul@multiplier+1
  2872  000072  0E00               	movlw	0
  2873  000074  0100               	movlb	0	; () banked
  2874  000076  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2875  000078  0E0A               	movlw	10
  2876  00007A  6F90               	movwf	___wmul@multiplicand& (0+255),b
  2877  00007C  EC04  F024         	call	___wmul	;wreg free
  2878  000080  C08E  F0D8         	movff	?___wmul,printf@width
  2879  000084  C08F  F0D9         	movff	?___wmul+1,printf@width+1
  2880                           
  2881                           ;doprnt.c: 601: width += *f++ - '0';
  2882  000088  0ED0               	movlw	208
  2883  00008A  0100               	movlb	0	; () banked
  2884  00008C  6FCC               	movwf	??_printf& (0+255),b
  2885  00008E  0EFF               	movlw	255
  2886  000090  0100               	movlb	0	; () banked
  2887  000092  6FCD               	movwf	(??_printf+1)& (0+255),b
  2888  000094  C0BF  FFF6         	movff	printf@f,tblptrl
  2889  000098  C0C0  FFF7         	movff	printf@f+1,tblptrh
  2890  00009C                     	if	0	;tblptru may be non-zero
  2891  00009C                     	endif
  2892  00009C                     	if	0	;tblptru may be non-zero
  2893  00009C                     	endif
  2894  00009C  0008               	tblrd		*
  2895  00009E  50F5               	movf	tablat,w,c
  2896  0000A0  0100               	movlb	0	; () banked
  2897  0000A2  6FCE               	movwf	(??_printf+2)& (0+255),b
  2898  0000A4  6BCF               	clrf	(??_printf+3)& (0+255),b
  2899  0000A6  0100               	movlb	0	; () banked
  2900  0000A8  51CC               	movf	??_printf& (0+255),w,b
  2901  0000AA  0100               	movlb	0	; () banked
  2902  0000AC  27CE               	addwf	(??_printf+2)& (0+255),f,b
  2903  0000AE  0100               	movlb	0	; () banked
  2904  0000B0  51CD               	movf	(??_printf+1)& (0+255),w,b
  2905  0000B2  0100               	movlb	0	; () banked
  2906  0000B4  23CF               	addwfc	(??_printf+3)& (0+255),f,b
  2907  0000B6  0100               	movlb	0	; () banked
  2908  0000B8  51CE               	movf	(??_printf+2)& (0+255),w,b
  2909  0000BA  0100               	movlb	0	; () banked
  2910  0000BC  27D8               	addwf	printf@width& (0+255),f,b
  2911  0000BE  0100               	movlb	0	; () banked
  2912  0000C0  51CF               	movf	(??_printf+3)& (0+255),w,b
  2913  0000C2  0100               	movlb	0	; () banked
  2914  0000C4  23D9               	addwfc	(printf@width+1)& (0+255),f,b
  2915                           
  2916                           ; BSR set to: 0
  2917  0000C6  0100               	movlb	0	; () banked
  2918  0000C8  4BBF               	infsnz	printf@f& (0+255),f,b
  2919  0000CA  2BC0               	incf	(printf@f+1)& (0+255),f,b
  2920                           
  2921                           ; BSR set to: 0
  2922                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2923  0000CC  C0BF  FFF6         	movff	printf@f,tblptrl
  2924  0000D0  C0C0  FFF7         	movff	printf@f+1,tblptrh
  2925  0000D4                     	if	0	;tblptru may be non-zero
  2926  0000D4                     	endif
  2927  0000D4                     	if	0	;tblptru may be non-zero
  2928  0000D4                     	endif
  2929  0000D4  0008               	tblrd		*
  2930  0000D6  50F5               	movf	tablat,w,c
  2931  0000D8  EC7E  F024         	call	_isdigit
  2932  0000DC  A0D8               	btfss	status,0,c
  2933  0000DE  D007               	goto	l4642
  2934  0000E0  D7C4               	goto	l4628
  2935  0000E2                     l4636:
  2936                           
  2937                           ;doprnt.c: 663: flag |= 0x400;
  2938  0000E2  0100               	movlb	0	; () banked
  2939  0000E4  85DB               	bsf	(printf@flag+1)& (0+255),2,b
  2940                           
  2941                           ; BSR set to: 0
  2942                           ;doprnt.c: 698: case 'i':
  2943                           ;doprnt.c: 699: break;
  2944                           
  2945                           ; BSR set to: 0
  2946                           
  2947                           ;doprnt.c: 697: case 'd':
  2948                           
  2949                           ;doprnt.c: 664: break;
  2950  0000E6  D020               	goto	l4644
  2951  0000E8                     l4638:
  2952                           
  2953                           ; BSR set to: 0
  2954                           ;doprnt.c: 721: flag |= 0x80;
  2955  0000E8  0100               	movlb	0	; () banked
  2956  0000EA  8FDA               	bsf	printf@flag& (0+255),7,b
  2957                           
  2958                           ;doprnt.c: 723: break;
  2959  0000EC  D01D               	goto	l4644
  2960  0000EE                     l4642:
  2961  0000EE  C0BF  FFF6         	movff	printf@f,tblptrl
  2962  0000F2  C0C0  FFF7         	movff	printf@f+1,tblptrh
  2963  0000F6  0100               	movlb	0	; () banked
  2964  0000F8  4BBF               	infsnz	printf@f& (0+255),f,b
  2965  0000FA  2BC0               	incf	(printf@f+1)& (0+255),f,b
  2966  0000FC                     	if	0	;tblptru may be non-zero
  2967  0000FC                     	endif
  2968  0000FC                     	if	0	;tblptru may be non-zero
  2969  0000FC                     	endif
  2970  0000FC  0008               	tblrd		*
  2971  0000FE  CFF5 F0EB          	movff	tablat,printf@c
  2972  000102  0100               	movlb	0	; () banked
  2973  000104  51EB               	movf	printf@c& (0+255),w,b
  2974                           
  2975                           ; Switch size 1, requested type "space"
  2976                           ; Number of cases is 5, Range of values is 0 to 120
  2977                           ; switch strategies available:
  2978                           ; Name         Instructions Cycles
  2979                           ; simple_byte           16     9 (average)
  2980                           ;	Chosen strategy is simple_byte
  2981  000106  0A00               	xorlw	0	; case 0
  2982  000108  B4D8               	btfsc	status,2,c
  2983  00010A  0012               	return	
  2984  00010C  0A64               	xorlw	100	; case 100
  2985  00010E  B4D8               	btfsc	status,2,c
  2986  000110  D00B               	goto	l4644
  2987  000112  0A02               	xorlw	2	; case 102
  2988  000114  B4D8               	btfsc	status,2,c
  2989  000116  D7E5               	goto	l4636
  2990  000118  0A0F               	xorlw	15	; case 105
  2991  00011A  B4D8               	btfsc	status,2,c
  2992  00011C  D005               	goto	l4644
  2993  00011E  0A11               	xorlw	17	; case 120
  2994  000120  B4D8               	btfsc	status,2,c
  2995  000122  D7E2               	goto	l4638
  2996  000124  EF75  F005         	goto	l4874
  2997  000128                     l4644:
  2998                           
  2999                           ; BSR set to: 0
  3000                           ;doprnt.c: 825: if(flag & (0x700)) {
  3001  000128  0E07               	movlw	7
  3002  00012A  0100               	movlb	0	; () banked
  3003  00012C  15DB               	andwf	(printf@flag+1)& (0+255),w,b
  3004  00012E  B4D8               	btfsc	status,2,c
  3005  000130  D34E               	goto	l453
  3006                           
  3007                           ; BSR set to: 0
  3008                           ;doprnt.c: 829: prec = 6;
  3009  000132  0E00               	movlw	0
  3010  000134  0100               	movlb	0	; () banked
  3011  000136  6FDD               	movwf	(printf@prec+1)& (0+255),b
  3012  000138  0E06               	movlw	6
  3013  00013A  6FDC               	movwf	printf@prec& (0+255),b
  3014                           
  3015                           ; BSR set to: 0
  3016                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  3017  00013C  C0D6  FFD9         	movff	printf@ap,fsr2l
  3018  000140  C0D7  FFDA         	movff	printf@ap+1,fsr2h
  3019  000144  CFDE F0E8          	movff	postinc2,printf@fval
  3020  000148  CFDE F0E9          	movff	postinc2,printf@fval+1
  3021  00014C  CFDD F0EA          	movff	postdec2,printf@fval+2
  3022                           
  3023                           ; BSR set to: 0
  3024  000150  0E03               	movlw	3
  3025  000152  0100               	movlb	0	; () banked
  3026  000154  27D6               	addwf	printf@ap& (0+255),f,b
  3027  000156  0E00               	movlw	0
  3028  000158  23D7               	addwfc	(printf@ap+1)& (0+255),f,b
  3029                           
  3030                           ; BSR set to: 0
  3031                           ;doprnt.c: 831: if(fval < 0.0) {
  3032  00015A  0100               	movlb	0	; () banked
  3033  00015C  AFEA               	btfss	(printf@fval+2)& (0+255),7,b
  3034  00015E  D011               	goto	l4658
  3035                           
  3036                           ; BSR set to: 0
  3037                           ;doprnt.c: 832: fval = -fval;
  3038  000160  C0E8  F080         	movff	printf@fval,___ftneg@f1
  3039  000164  C0E9  F081         	movff	printf@fval+1,___ftneg@f1+1
  3040  000168  C0EA  F082         	movff	printf@fval+2,___ftneg@f1+2
  3041  00016C  EC39  F024         	call	___ftneg	;wreg free
  3042  000170  C080  F0E8         	movff	?___ftneg,printf@fval
  3043  000174  C081  F0E9         	movff	?___ftneg+1,printf@fval+1
  3044  000178  C082  F0EA         	movff	?___ftneg+2,printf@fval+2
  3045                           
  3046                           ;doprnt.c: 833: flag |= 0x03;
  3047  00017C  0E03               	movlw	3
  3048  00017E  0100               	movlb	0	; () banked
  3049  000180  13DA               	iorwf	printf@flag& (0+255),f,b
  3050  000182                     l4658:
  3051                           
  3052                           ; BSR set to: 0
  3053                           ;doprnt.c: 834: }
  3054                           ;doprnt.c: 835: exp = 0;
  3055  000182  0E00               	movlw	0
  3056  000184  0100               	movlb	0	; () banked
  3057  000186  6FE3               	movwf	(printf@exp+1)& (0+255),b
  3058  000188  0E00               	movlw	0
  3059  00018A  6FE2               	movwf	printf@exp& (0+255),b
  3060                           
  3061                           ; BSR set to: 0
  3062                           ;doprnt.c: 836: if( fval!=0) {
  3063  00018C  0100               	movlb	0	; () banked
  3064  00018E  51E8               	movf	printf@fval& (0+255),w,b
  3065  000190  0100               	movlb	0	; () banked
  3066  000192  11E9               	iorwf	(printf@fval+1)& (0+255),w,b
  3067  000194  0100               	movlb	0	; () banked
  3068  000196  11EA               	iorwf	(printf@fval+2)& (0+255),w,b
  3069  000198  B4D8               	btfsc	status,2,c
  3070  00019A  D09B               	goto	l4686
  3071                           
  3072                           ; BSR set to: 0
  3073                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  3074  00019C  0E82               	movlw	130
  3075  00019E  0100               	movlb	0	; () banked
  3076  0001A0  6FCC               	movwf	??_printf& (0+255),b
  3077  0001A2  0EFF               	movlw	255
  3078  0001A4  0100               	movlb	0	; () banked
  3079  0001A6  6FCD               	movwf	(??_printf+1)& (0+255),b
  3080  0001A8  C0E8  F0CE         	movff	printf@fval,??_printf+2
  3081  0001AC  C0E9  F0CF         	movff	printf@fval+1,??_printf+3
  3082  0001B0  C0EA  F0D0         	movff	printf@fval+2,??_printf+4
  3083  0001B4  C0EB  F0D1         	movff	printf@fval+3,??_printf+5
  3084  0001B8  0E10               	movlw	16
  3085  0001BA  D006               	goto	u5350
  3086  0001BC                     u5355:
  3087  0001BC  0100               	movlb	0	; () banked
  3088  0001BE  90D8               	bcf	status,0,c
  3089  0001C0  33D1               	rrcf	(??_printf+5)& (0+255),f,b
  3090  0001C2  33D0               	rrcf	(??_printf+4)& (0+255),f,b
  3091  0001C4  33CF               	rrcf	(??_printf+3)& (0+255),f,b
  3092  0001C6  33CE               	rrcf	(??_printf+2)& (0+255),f,b
  3093  0001C8                     u5350:
  3094  0001C8  2EE8               	decfsz	wreg,f,c
  3095  0001CA  D7F8               	goto	u5355
  3096  0001CC  0100               	movlb	0	; () banked
  3097  0001CE  51CE               	movf	(??_printf+2)& (0+255),w,b
  3098  0001D0  0100               	movlb	0	; () banked
  3099  0001D2  25CC               	addwf	??_printf& (0+255),w,b
  3100  0001D4  0100               	movlb	0	; () banked
  3101  0001D6  6FE2               	movwf	printf@exp& (0+255),b
  3102  0001D8  0E00               	movlw	0
  3103  0001DA  0100               	movlb	0	; () banked
  3104  0001DC  21CD               	addwfc	(??_printf+1)& (0+255),w,b
  3105  0001DE  0100               	movlb	0	; () banked
  3106  0001E0  6FE3               	movwf	(printf@exp+1)& (0+255),b
  3107                           
  3108                           ; BSR set to: 0
  3109                           ;doprnt.c: 838: exp--;
  3110  0001E2  0100               	movlb	0	; () banked
  3111  0001E4  07E2               	decf	printf@exp& (0+255),f,b
  3112  0001E6  A0D8               	btfss	status,0,c
  3113  0001E8  07E3               	decf	(printf@exp+1)& (0+255),f,b
  3114                           
  3115                           ; BSR set to: 0
  3116                           ;doprnt.c: 839: exp *= 3;
  3117  0001EA  C0E2  F08E         	movff	printf@exp,___wmul@multiplier
  3118  0001EE  C0E3  F08F         	movff	printf@exp+1,___wmul@multiplier+1
  3119  0001F2  0E00               	movlw	0
  3120  0001F4  0100               	movlb	0	; () banked
  3121  0001F6  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3122  0001F8  0E03               	movlw	3
  3123  0001FA  6F90               	movwf	___wmul@multiplicand& (0+255),b
  3124  0001FC  EC04  F024         	call	___wmul	;wreg free
  3125  000200  C08E  F0E2         	movff	?___wmul,printf@exp
  3126  000204  C08F  F0E3         	movff	?___wmul+1,printf@exp+1
  3127                           
  3128                           ;doprnt.c: 840: exp /= 10;
  3129  000208  C0E2  F086         	movff	printf@exp,___awdiv@dividend
  3130  00020C  C0E3  F087         	movff	printf@exp+1,___awdiv@dividend+1
  3131  000210  0E00               	movlw	0
  3132  000212  0100               	movlb	0	; () banked
  3133  000214  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  3134  000216  0E0A               	movlw	10
  3135  000218  6F88               	movwf	___awdiv@divisor& (0+255),b
  3136  00021A  EC3F  F01E         	call	___awdiv	;wreg free
  3137  00021E  C086  F0E2         	movff	?___awdiv,printf@exp
  3138  000222  C087  F0E3         	movff	?___awdiv+1,printf@exp+1
  3139                           
  3140                           ;doprnt.c: 841: if(exp < 0)
  3141  000226  0100               	movlb	0	; () banked
  3142  000228  AFE3               	btfss	(printf@exp+1)& (0+255),7,b
  3143  00022A  D004               	goto	l4674
  3144                           
  3145                           ; BSR set to: 0
  3146                           ;doprnt.c: 842: exp--;
  3147  00022C  0100               	movlb	0	; () banked
  3148  00022E  07E2               	decf	printf@exp& (0+255),f,b
  3149  000230  A0D8               	btfss	status,0,c
  3150  000232  07E3               	decf	(printf@exp+1)& (0+255),f,b
  3151  000234                     l4674:
  3152                           
  3153                           ; BSR set to: 0
  3154                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  3155  000234  0100               	movlb	0	; () banked
  3156  000236  51E2               	movf	printf@exp& (0+255),w,b
  3157  000238  0800               	sublw	0
  3158  00023A  ECBD  F00C         	call	_scale
  3159  00023E  C0A3  F0DE         	movff	?_scale,printf@tmpval
  3160  000242  C0A4  F0DF         	movff	?_scale+1,printf@tmpval+1
  3161  000246  C0A5  F0E0         	movff	?_scale+2,printf@tmpval+2
  3162                           
  3163                           ;doprnt.c: 847: tmpval.integ *= fval;
  3164  00024A  C0DE  F094         	movff	printf@tmpval,___ftmul@f1
  3165  00024E  C0DF  F095         	movff	printf@tmpval+1,___ftmul@f1+1
  3166  000252  C0E0  F096         	movff	printf@tmpval+2,___ftmul@f1+2
  3167  000256  C0E8  F097         	movff	printf@fval,___ftmul@f2
  3168  00025A  C0E9  F098         	movff	printf@fval+1,___ftmul@f2+1
  3169  00025E  C0EA  F099         	movff	printf@fval+2,___ftmul@f2+2
  3170  000262  EC43  F018         	call	___ftmul	;wreg free
  3171  000266  C094  F0DE         	movff	?___ftmul,printf@tmpval
  3172  00026A  C095  F0DF         	movff	?___ftmul+1,printf@tmpval+1
  3173  00026E  C096  F0E0         	movff	?___ftmul+2,printf@tmpval+2
  3174                           
  3175                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  3176  000272  C0DE  F080         	movff	printf@tmpval,___ftge@ff1
  3177  000276  C0DF  F081         	movff	printf@tmpval+1,___ftge@ff1+1
  3178  00027A  C0E0  F082         	movff	printf@tmpval+2,___ftge@ff1+2
  3179  00027E  0E00               	movlw	0
  3180  000280  0100               	movlb	0	; () banked
  3181  000282  6F83               	movwf	___ftge@ff2& (0+255),b
  3182  000284  0E80               	movlw	128
  3183  000286  0100               	movlb	0	; () banked
  3184  000288  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  3185  00028A  0E3F               	movlw	63
  3186  00028C  0100               	movlb	0	; () banked
  3187  00028E  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  3188  000290  EC79  F01D         	call	___ftge	;wreg free
  3189  000294  0100               	movlb	0	; () banked
  3190  000296  B0D8               	btfsc	status,0,c
  3191  000298  D005               	goto	l4682
  3192                           
  3193                           ; BSR set to: 0
  3194                           ;doprnt.c: 849: exp--;
  3195  00029A  0100               	movlb	0	; () banked
  3196  00029C  07E2               	decf	printf@exp& (0+255),f,b
  3197  00029E  A0D8               	btfss	status,0,c
  3198  0002A0  07E3               	decf	(printf@exp+1)& (0+255),f,b
  3199  0002A2  D017               	goto	l4686
  3200  0002A4                     l4682:
  3201                           
  3202                           ; BSR set to: 0
  3203                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  3204  0002A4  C0DE  F080         	movff	printf@tmpval,___ftge@ff1
  3205  0002A8  C0DF  F081         	movff	printf@tmpval+1,___ftge@ff1+1
  3206  0002AC  C0E0  F082         	movff	printf@tmpval+2,___ftge@ff1+2
  3207  0002B0  0E00               	movlw	0
  3208  0002B2  0100               	movlb	0	; () banked
  3209  0002B4  6F83               	movwf	___ftge@ff2& (0+255),b
  3210  0002B6  0E20               	movlw	32
  3211  0002B8  0100               	movlb	0	; () banked
  3212  0002BA  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  3213  0002BC  0E41               	movlw	65
  3214  0002BE  0100               	movlb	0	; () banked
  3215  0002C0  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  3216  0002C2  EC79  F01D         	call	___ftge	;wreg free
  3217  0002C6  0100               	movlb	0	; () banked
  3218  0002C8  A0D8               	btfss	status,0,c
  3219  0002CA  D003               	goto	l4686
  3220                           
  3221                           ; BSR set to: 0
  3222                           ;doprnt.c: 851: exp++;
  3223  0002CC  0100               	movlb	0	; () banked
  3224  0002CE  4BE2               	infsnz	printf@exp& (0+255),f,b
  3225  0002D0  2BE3               	incf	(printf@exp+1)& (0+255),f,b
  3226  0002D2                     l4686:
  3227                           
  3228                           ; BSR set to: 0
  3229                           ;doprnt.c: 852: }
  3230                           ;doprnt.c: 1112: if(prec <= 12)
  3231  0002D2  0100               	movlb	0	; () banked
  3232  0002D4  BFDD               	btfsc	(printf@prec+1)& (0+255),7,b
  3233  0002D6  D008               	goto	l4688
  3234  0002D8  0100               	movlb	0	; () banked
  3235  0002DA  51DD               	movf	(printf@prec+1)& (0+255),w,b
  3236  0002DC  E11D               	bnz	l4690
  3237  0002DE  0E0D               	movlw	13
  3238  0002E0  0100               	movlb	0	; () banked
  3239  0002E2  5DDC               	subwf	printf@prec& (0+255),w,b
  3240  0002E4  B0D8               	btfsc	status,0,c
  3241  0002E6  D018               	goto	l4690
  3242  0002E8                     l4688:
  3243                           
  3244                           ; BSR set to: 0
  3245                           ;doprnt.c: 1113: fval += fround(prec);
  3246  0002E8  C0E8  F0AD         	movff	printf@fval,___ftadd@f1
  3247  0002EC  C0E9  F0AE         	movff	printf@fval+1,___ftadd@f1+1
  3248  0002F0  C0EA  F0AF         	movff	printf@fval+2,___ftadd@f1+2
  3249  0002F4  0100               	movlb	0	; () banked
  3250  0002F6  51DC               	movf	printf@prec& (0+255),w,b
  3251  0002F8  EC0C  F011         	call	_fround
  3252  0002FC  C0A3  F0B0         	movff	?_fround,___ftadd@f2
  3253  000300  C0A4  F0B1         	movff	?_fround+1,___ftadd@f2+1
  3254  000304  C0A5  F0B2         	movff	?_fround+2,___ftadd@f2+2
  3255  000308  EC62  F012         	call	___ftadd	;wreg free
  3256  00030C  C0AD  F0E8         	movff	?___ftadd,printf@fval
  3257  000310  C0AE  F0E9         	movff	?___ftadd+1,printf@fval+1
  3258  000314  C0AF  F0EA         	movff	?___ftadd+2,printf@fval+2
  3259  000318                     l4690:
  3260                           
  3261                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  3262  000318  0100               	movlb	0	; () banked
  3263  00031A  BFE3               	btfsc	(printf@exp+1)& (0+255),7,b
  3264  00031C  D008               	goto	l4692
  3265  00031E  0100               	movlb	0	; () banked
  3266  000320  51E3               	movf	(printf@exp+1)& (0+255),w,b
  3267  000322  E12A               	bnz	l4698
  3268  000324  0E0A               	movlw	10
  3269  000326  0100               	movlb	0	; () banked
  3270  000328  5DE2               	subwf	printf@exp& (0+255),w,b
  3271  00032A  B0D8               	btfsc	status,0,c
  3272  00032C  D025               	goto	l4698
  3273  00032E                     l4692:
  3274                           
  3275                           ; BSR set to: 0
  3276  00032E  0100               	movlb	0	; () banked
  3277  000330  51E8               	movf	printf@fval& (0+255),w,b
  3278  000332  0100               	movlb	0	; () banked
  3279  000334  11E9               	iorwf	(printf@fval+1)& (0+255),w,b
  3280  000336  0100               	movlb	0	; () banked
  3281  000338  11EA               	iorwf	(printf@fval+2)& (0+255),w,b
  3282  00033A  B4D8               	btfsc	status,2,c
  3283  00033C  D063               	goto	l4712
  3284                           
  3285                           ; BSR set to: 0
  3286  00033E  C0E8  F0AA         	movff	printf@fval,___fttol@f1
  3287  000342  C0E9  F0AB         	movff	printf@fval+1,___fttol@f1+1
  3288  000346  C0EA  F0AC         	movff	printf@fval+2,___fttol@f1+2
  3289  00034A  EC98  F019         	call	___fttol	;wreg free
  3290  00034E  0100               	movlb	0	; () banked
  3291  000350  51AA               	movf	?___fttol& (0+255),w,b
  3292  000352  0100               	movlb	0	; () banked
  3293  000354  11AB               	iorwf	(?___fttol+1)& (0+255),w,b
  3294  000356  0100               	movlb	0	; () banked
  3295  000358  11AC               	iorwf	(?___fttol+2)& (0+255),w,b
  3296  00035A  0100               	movlb	0	; () banked
  3297  00035C  11AD               	iorwf	(?___fttol+3)& (0+255),w,b
  3298  00035E  A4D8               	btfss	status,2,c
  3299  000360  D051               	goto	l4712
  3300                           
  3301                           ; BSR set to: 0
  3302  000362  0100               	movlb	0	; () banked
  3303  000364  BFE3               	btfsc	(printf@exp+1)& (0+255),7,b
  3304  000366  D04E               	goto	l4712
  3305  000368  0100               	movlb	0	; () banked
  3306  00036A  51E3               	movf	(printf@exp+1)& (0+255),w,b
  3307  00036C  E105               	bnz	l4698
  3308  00036E  0E02               	movlw	2
  3309  000370  0100               	movlb	0	; () banked
  3310  000372  5DE2               	subwf	printf@exp& (0+255),w,b
  3311  000374  A0D8               	btfss	status,0,c
  3312  000376  D046               	goto	l4712
  3313  000378                     l4698:
  3314                           
  3315                           ; BSR set to: 0
  3316                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  3317  000378  C0DE  F080         	movff	printf@tmpval,___ftge@ff1
  3318  00037C  C0DF  F081         	movff	printf@tmpval+1,___ftge@ff1+1
  3319  000380  C0E0  F082         	movff	printf@tmpval+2,___ftge@ff1+2
  3320  000384  0E70               	movlw	112
  3321  000386  0100               	movlb	0	; () banked
  3322  000388  6F83               	movwf	___ftge@ff2& (0+255),b
  3323  00038A  0E89               	movlw	137
  3324  00038C  0100               	movlb	0	; () banked
  3325  00038E  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  3326  000390  0E40               	movlw	64
  3327  000392  0100               	movlb	0	; () banked
  3328  000394  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  3329  000396  EC79  F01D         	call	___ftge	;wreg free
  3330  00039A  0100               	movlb	0	; () banked
  3331  00039C  B0D8               	btfsc	status,0,c
  3332  00039E  D003               	goto	l4702
  3333                           
  3334                           ; BSR set to: 0
  3335                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3336  0003A0  0100               	movlb	0	; () banked
  3337  0003A2  0EF7               	movlw	247
  3338  0003A4  D002               	goto	L1
  3339  0003A6                     l4702:
  3340                           
  3341                           ; BSR set to: 0
  3342                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3343  0003A6  0100               	movlb	0	; () banked
  3344  0003A8  0EF8               	movlw	248
  3345  0003AA                     L1:
  3346  0003AA  27E2               	addwf	printf@exp& (0+255),f,b
  3347  0003AC  0EFF               	movlw	255
  3348  0003AE  23E3               	addwfc	(printf@exp+1)& (0+255),f,b
  3349                           
  3350                           ; BSR set to: 0
  3351                           ;doprnt.c: 1124: }
  3352                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  3353                           
  3354                           ; BSR set to: 0
  3355  0003B0  0100               	movlb	0	; () banked
  3356  0003B2  51E2               	movf	printf@exp& (0+255),w,b
  3357  0003B4  ECBD  F00C         	call	_scale
  3358  0003B8  C0A3  F0DE         	movff	?_scale,printf@tmpval
  3359  0003BC  C0A4  F0DF         	movff	?_scale+1,printf@tmpval+1
  3360  0003C0  C0A5  F0E0         	movff	?_scale+2,printf@tmpval+2
  3361                           
  3362                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  3363  0003C4  C0E8  F080         	movff	printf@fval,__tdiv_to_l_@f1
  3364  0003C8  C0E9  F081         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  3365  0003CC  C0EA  F082         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  3366  0003D0  C0DE  F083         	movff	printf@tmpval,__tdiv_to_l_@f2
  3367  0003D4  C0DF  F084         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  3368  0003D8  C0E0  F085         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  3369  0003DC  ECB0  F016         	call	__tdiv_to_l_	;wreg free
  3370  0003E0  C080  F0E4         	movff	?__tdiv_to_l_,printf@val
  3371  0003E4  C081  F0E5         	movff	?__tdiv_to_l_+1,printf@val+1
  3372  0003E8  C082  F0E6         	movff	?__tdiv_to_l_+2,printf@val+2
  3373  0003EC  C083  F0E7         	movff	?__tdiv_to_l_+3,printf@val+3
  3374                           
  3375                           ;doprnt.c: 1129: fval = 0.0;
  3376  0003F0  0E00               	movlw	0
  3377  0003F2  0100               	movlb	0	; () banked
  3378  0003F4  6FE8               	movwf	printf@fval& (0+255),b
  3379  0003F6  0E00               	movlw	0
  3380  0003F8  0100               	movlb	0	; () banked
  3381  0003FA  6FE9               	movwf	(printf@fval+1)& (0+255),b
  3382  0003FC  0E00               	movlw	0
  3383  0003FE  0100               	movlb	0	; () banked
  3384  000400  6FEA               	movwf	(printf@fval+2)& (0+255),b
  3385                           
  3386                           ;doprnt.c: 1130: } else {
  3387  000402  D033               	goto	l4716
  3388  000404                     l4712:
  3389                           
  3390                           ; BSR set to: 0
  3391                           ;doprnt.c: 1131: val = (unsigned long)fval;
  3392  000404  C0E8  F0AA         	movff	printf@fval,___fttol@f1
  3393  000408  C0E9  F0AB         	movff	printf@fval+1,___fttol@f1+1
  3394  00040C  C0EA  F0AC         	movff	printf@fval+2,___fttol@f1+2
  3395  000410  EC98  F019         	call	___fttol	;wreg free
  3396  000414  C0AA  F0E4         	movff	?___fttol,printf@val
  3397  000418  C0AB  F0E5         	movff	?___fttol+1,printf@val+1
  3398  00041C  C0AC  F0E6         	movff	?___fttol+2,printf@val+2
  3399  000420  C0AD  F0E7         	movff	?___fttol+3,printf@val+3
  3400                           
  3401                           ;doprnt.c: 1132: fval -= (double)val;
  3402  000424  C0E8  F0B9         	movff	printf@fval,___ftsub@f1
  3403  000428  C0E9  F0BA         	movff	printf@fval+1,___ftsub@f1+1
  3404  00042C  C0EA  F0BB         	movff	printf@fval+2,___ftsub@f1+2
  3405  000430  C0E4  F088         	movff	printf@val,___lltoft@c
  3406  000434  C0E5  F089         	movff	printf@val+1,___lltoft@c+1
  3407  000438  C0E6  F08A         	movff	printf@val+2,___lltoft@c+2
  3408  00043C  C0E7  F08B         	movff	printf@val+3,___lltoft@c+3
  3409  000440  ECBD  F021         	call	___lltoft	;wreg free
  3410  000444  C088  F0BC         	movff	?___lltoft,___ftsub@f2
  3411  000448  C089  F0BD         	movff	?___lltoft+1,___ftsub@f2+1
  3412  00044C  C08A  F0BE         	movff	?___lltoft+2,___ftsub@f2+2
  3413  000450  EC79  F023         	call	___ftsub	;wreg free
  3414  000454  C0B9  F0E8         	movff	?___ftsub,printf@fval
  3415  000458  C0BA  F0E9         	movff	?___ftsub+1,printf@fval+1
  3416  00045C  C0BB  F0EA         	movff	?___ftsub+2,printf@fval+2
  3417                           
  3418                           ;doprnt.c: 1133: exp = 0;
  3419  000460  0E00               	movlw	0
  3420  000462  0100               	movlb	0	; () banked
  3421  000464  6FE3               	movwf	(printf@exp+1)& (0+255),b
  3422  000466  0E00               	movlw	0
  3423  000468  6FE2               	movwf	printf@exp& (0+255),b
  3424  00046A                     l4716:
  3425                           
  3426                           ; BSR set to: 0
  3427                           ;doprnt.c: 1134: }
  3428                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3429  00046A  0E01               	movlw	1
  3430  00046C  0100               	movlb	0	; () banked
  3431  00046E  6FEB               	movwf	printf@c& (0+255),b
  3432  000470                     l4718:
  3433                           
  3434                           ; BSR set to: 0
  3435  000470  0E0A               	movlw	10
  3436  000472  0100               	movlb	0	; () banked
  3437  000474  19EB               	xorwf	printf@c& (0+255),w,b
  3438  000476  B4D8               	btfsc	status,2,c
  3439  000478  D01E               	goto	l4730
  3440                           
  3441                           ; BSR set to: 0
  3442                           ;doprnt.c: 1137: if(val < dpowers[c])
  3443                           
  3444                           ; BSR set to: 0
  3445                           
  3446                           ; BSR set to: 0
  3447  00047A  0100               	movlb	0	; () banked
  3448  00047C  51EB               	movf	printf@c& (0+255),w,b
  3449  00047E  0D04               	mullw	4
  3450  000480  0E8D               	movlw	low _dpowers
  3451  000482  24F3               	addwf	prodl,w,c
  3452  000484  6EF6               	movwf	tblptrl,c
  3453  000486  0EFE               	movlw	high _dpowers
  3454  000488  20F4               	addwfc	prodh,w,c
  3455  00048A  6EF7               	movwf	tblptrh,c
  3456  00048C                     	if	0	;There are less than 3 active tblptr bytes
  3457  00048C                     	endif
  3458  00048C  0009               	tblrd		*+
  3459  00048E  50F5               	movf	tablat,w,c
  3460  000490  0100               	movlb	0	; () banked
  3461  000492  5DE4               	subwf	printf@val& (0+255),w,b
  3462  000494  0009               	tblrd		*+
  3463  000496  50F5               	movf	tablat,w,c
  3464  000498  0100               	movlb	0	; () banked
  3465  00049A  59E5               	subwfb	(printf@val+1)& (0+255),w,b
  3466  00049C  0009               	tblrd		*+
  3467  00049E  50F5               	movf	tablat,w,c
  3468  0004A0  0100               	movlb	0	; () banked
  3469  0004A2  59E6               	subwfb	(printf@val+2)& (0+255),w,b
  3470  0004A4  0009               	tblrd		*+
  3471  0004A6  50F5               	movf	tablat,w,c
  3472  0004A8  0100               	movlb	0	; () banked
  3473  0004AA  59E7               	subwfb	(printf@val+3)& (0+255),w,b
  3474  0004AC  A0D8               	btfss	status,0,c
  3475  0004AE  D003               	goto	l4730
  3476                           
  3477                           ; BSR set to: 0
  3478                           
  3479                           ; BSR set to: 0
  3480                           
  3481                           ; BSR set to: 0
  3482                           ;doprnt.c: 1138: break;
  3483  0004B0  0100               	movlb	0	; () banked
  3484  0004B2  2BEB               	incf	printf@c& (0+255),f,b
  3485  0004B4  D7DD               	goto	l4718
  3486  0004B6                     l4730:
  3487                           
  3488                           ; BSR set to: 0
  3489                           ;doprnt.c: 1142: width -= prec + c + exp;
  3490  0004B6  C0EB  F0CC         	movff	printf@c,??_printf
  3491  0004BA  0100               	movlb	0	; () banked
  3492  0004BC  6BCD               	clrf	(??_printf+1)& (0+255),b
  3493  0004BE  BFCC               	btfsc	??_printf& (0+255),7,b
  3494  0004C0  07CD               	decf	(??_printf+1)& (0+255),f,b
  3495  0004C2  0100               	movlb	0	; () banked
  3496  0004C4  51DC               	movf	printf@prec& (0+255),w,b
  3497  0004C6  0100               	movlb	0	; () banked
  3498  0004C8  27CC               	addwf	??_printf& (0+255),f,b
  3499  0004CA  0100               	movlb	0	; () banked
  3500  0004CC  51DD               	movf	(printf@prec+1)& (0+255),w,b
  3501  0004CE  0100               	movlb	0	; () banked
  3502  0004D0  23CD               	addwfc	(??_printf+1)& (0+255),f,b
  3503  0004D2  0100               	movlb	0	; () banked
  3504  0004D4  51E2               	movf	printf@exp& (0+255),w,b
  3505  0004D6  0100               	movlb	0	; () banked
  3506  0004D8  27CC               	addwf	??_printf& (0+255),f,b
  3507  0004DA  0100               	movlb	0	; () banked
  3508  0004DC  51E3               	movf	(printf@exp+1)& (0+255),w,b
  3509  0004DE  0100               	movlb	0	; () banked
  3510  0004E0  23CD               	addwfc	(??_printf+1)& (0+255),f,b
  3511  0004E2  0100               	movlb	0	; () banked
  3512  0004E4  51CC               	movf	??_printf& (0+255),w,b
  3513  0004E6  0100               	movlb	0	; () banked
  3514  0004E8  5FD8               	subwf	printf@width& (0+255),f,b
  3515  0004EA  0100               	movlb	0	; () banked
  3516  0004EC  51CD               	movf	(??_printf+1)& (0+255),w,b
  3517  0004EE  0100               	movlb	0	; () banked
  3518  0004F0  5BD9               	subwfb	(printf@width+1)& (0+255),f,b
  3519                           
  3520                           ;doprnt.c: 1143: if(
  3521                           ;doprnt.c: 1147: prec)
  3522  0004F2  0100               	movlb	0	; () banked
  3523  0004F4  51DC               	movf	printf@prec& (0+255),w,b
  3524  0004F6  0100               	movlb	0	; () banked
  3525  0004F8  11DD               	iorwf	(printf@prec+1)& (0+255),w,b
  3526  0004FA  B4D8               	btfsc	status,2,c
  3527  0004FC  D004               	goto	l4734
  3528                           
  3529                           ; BSR set to: 0
  3530                           ;doprnt.c: 1148: width--;
  3531  0004FE  0100               	movlb	0	; () banked
  3532  000500  07D8               	decf	printf@width& (0+255),f,b
  3533  000502  A0D8               	btfss	status,0,c
  3534  000504  07D9               	decf	(printf@width+1)& (0+255),f,b
  3535  000506                     l4734:
  3536                           
  3537                           ; BSR set to: 0
  3538                           ;doprnt.c: 1149: if(flag & 0x03)
  3539  000506  0E03               	movlw	3
  3540  000508  0100               	movlb	0	; () banked
  3541  00050A  15DA               	andwf	printf@flag& (0+255),w,b
  3542  00050C  0100               	movlb	0	; () banked
  3543  00050E  6FCC               	movwf	??_printf& (0+255),b
  3544  000510  0E00               	movlw	0
  3545  000512  0100               	movlb	0	; () banked
  3546  000514  15DB               	andwf	(printf@flag+1)& (0+255),w,b
  3547  000516  0100               	movlb	0	; () banked
  3548  000518  6FCD               	movwf	(??_printf+1)& (0+255),b
  3549  00051A  0100               	movlb	0	; () banked
  3550  00051C  51CC               	movf	??_printf& (0+255),w,b
  3551  00051E  0100               	movlb	0	; () banked
  3552  000520  11CD               	iorwf	(??_printf+1)& (0+255),w,b
  3553  000522  B4D8               	btfsc	status,2,c
  3554  000524  D008               	goto	l4742
  3555  000526  D003               	goto	l4740
  3556  000528                     l4738:
  3557                           
  3558                           ; BSR set to: 0
  3559                           ;doprnt.c: 1181: (putch(' ') );
  3560  000528  0E20               	movlw	32
  3561  00052A  EC1D  F025         	call	_putch
  3562  00052E                     l4740:
  3563                           
  3564                           ;doprnt.c: 1182: width--;
  3565  00052E  0100               	movlb	0	; () banked
  3566  000530  07D8               	decf	printf@width& (0+255),f,b
  3567  000532  A0D8               	btfss	status,0,c
  3568  000534  07D9               	decf	(printf@width+1)& (0+255),f,b
  3569  000536                     l4742:
  3570                           
  3571                           ; BSR set to: 0
  3572  000536  0100               	movlb	0	; () banked
  3573  000538  BFD9               	btfsc	(printf@width+1)& (0+255),7,b
  3574  00053A  D007               	goto	l4744
  3575  00053C  0100               	movlb	0	; () banked
  3576  00053E  51D9               	movf	(printf@width+1)& (0+255),w,b
  3577  000540  E1F3               	bnz	l4738
  3578  000542  0100               	movlb	0	; () banked
  3579  000544  05D8               	decf	printf@width& (0+255),w,b
  3580  000546  B0D8               	btfsc	status,0,c
  3581  000548  D7EF               	goto	l4738
  3582  00054A                     l4744:
  3583                           
  3584                           ; BSR set to: 0
  3585                           ;doprnt.c: 1183: }
  3586                           ;doprnt.c: 1188: if(flag & 0x03)
  3587  00054A  0E03               	movlw	3
  3588  00054C  0100               	movlb	0	; () banked
  3589  00054E  15DA               	andwf	printf@flag& (0+255),w,b
  3590  000550  0100               	movlb	0	; () banked
  3591  000552  6FCC               	movwf	??_printf& (0+255),b
  3592  000554  0E00               	movlw	0
  3593  000556  0100               	movlb	0	; () banked
  3594  000558  15DB               	andwf	(printf@flag+1)& (0+255),w,b
  3595  00055A  0100               	movlb	0	; () banked
  3596  00055C  6FCD               	movwf	(??_printf+1)& (0+255),b
  3597  00055E  0100               	movlb	0	; () banked
  3598  000560  51CC               	movf	??_printf& (0+255),w,b
  3599  000562  0100               	movlb	0	; () banked
  3600  000564  11CD               	iorwf	(??_printf+1)& (0+255),w,b
  3601  000566  B4D8               	btfsc	status,2,c
  3602  000568  D04B               	goto	l4754
  3603                           
  3604                           ; BSR set to: 0
  3605                           ;doprnt.c: 1190: (putch('-') );
  3606  00056A  0E2D               	movlw	45
  3607  00056C  EC1D  F025         	call	_putch
  3608                           
  3609                           ;doprnt.c: 1195: }
  3610                           ;doprnt.c: 1196: while(c--) {
  3611  000570  D047               	goto	l4754
  3612  000572                     l4748:
  3613                           
  3614                           ;doprnt.c: 1200: {
  3615                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  3616  000572  C0E4  F080         	movff	printf@val,___lldiv@dividend
  3617  000576  C0E5  F081         	movff	printf@val+1,___lldiv@dividend+1
  3618  00057A  C0E6  F082         	movff	printf@val+2,___lldiv@dividend+2
  3619  00057E  C0E7  F083         	movff	printf@val+3,___lldiv@dividend+3
  3620  000582  0100               	movlb	0	; () banked
  3621  000584  51EB               	movf	printf@c& (0+255),w,b
  3622  000586  0D04               	mullw	4
  3623  000588  0E8D               	movlw	low _dpowers
  3624  00058A  24F3               	addwf	prodl,w,c
  3625  00058C  6EF6               	movwf	tblptrl,c
  3626  00058E  0EFE               	movlw	high _dpowers
  3627  000590  20F4               	addwfc	prodh,w,c
  3628  000592  6EF7               	movwf	tblptrh,c
  3629  000594                     	if	0	;There are less than 3 active tblptr bytes
  3630  000594                     	endif
  3631  000594  0009               	tblrd		*+
  3632  000596  CFF5 F084          	movff	tablat,___lldiv@divisor
  3633  00059A  0009               	tblrd		*+
  3634  00059C  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  3635  0005A0  0009               	tblrd		*+
  3636  0005A2  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  3637  0005A6  000A               	tblrd		*-
  3638  0005A8  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  3639  0005AC  EC9E  F01E         	call	___lldiv	;wreg free
  3640  0005B0  C080  F0DE         	movff	?___lldiv,printf@tmpval
  3641  0005B4  C081  F0DF         	movff	?___lldiv+1,printf@tmpval+1
  3642  0005B8  C082  F0E0         	movff	?___lldiv+2,printf@tmpval+2
  3643  0005BC  C083  F0E1         	movff	?___lldiv+3,printf@tmpval+3
  3644                           
  3645                           ;doprnt.c: 1202: tmpval.vd %= 10;
  3646  0005C0  C0DE  F08D         	movff	printf@tmpval,___llmod@dividend
  3647  0005C4  C0DF  F08E         	movff	printf@tmpval+1,___llmod@dividend+1
  3648  0005C8  C0E0  F08F         	movff	printf@tmpval+2,___llmod@dividend+2
  3649  0005CC  C0E1  F090         	movff	printf@tmpval+3,___llmod@dividend+3
  3650  0005D0  0E0A               	movlw	10
  3651  0005D2  0100               	movlb	0	; () banked
  3652  0005D4  6F91               	movwf	___llmod@divisor& (0+255),b
  3653  0005D6  0E00               	movlw	0
  3654  0005D8  6F92               	movwf	(___llmod@divisor+1)& (0+255),b
  3655  0005DA  0E00               	movlw	0
  3656  0005DC  6F93               	movwf	(___llmod@divisor+2)& (0+255),b
  3657  0005DE  0E00               	movlw	0
  3658  0005E0  6F94               	movwf	(___llmod@divisor+3)& (0+255),b
  3659  0005E2  ECA5  F020         	call	___llmod	;wreg free
  3660  0005E6  C08D  F0DE         	movff	?___llmod,printf@tmpval
  3661  0005EA  C08E  F0DF         	movff	?___llmod+1,printf@tmpval+1
  3662  0005EE  C08F  F0E0         	movff	?___llmod+2,printf@tmpval+2
  3663  0005F2  C090  F0E1         	movff	?___llmod+3,printf@tmpval+3
  3664                           
  3665                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  3666  0005F6  0100               	movlb	0	; () banked
  3667  0005F8  51DE               	movf	printf@tmpval& (0+255),w,b
  3668  0005FA  0F30               	addlw	48
  3669  0005FC  EC1D  F025         	call	_putch
  3670  000600                     l4754:
  3671  000600  0100               	movlb	0	; () banked
  3672  000602  07EB               	decf	printf@c& (0+255),f,b
  3673  000604  0100               	movlb	0	; () banked
  3674  000606  29EB               	incf	printf@c& (0+255),w,b
  3675  000608  B4D8               	btfsc	status,2,c
  3676  00060A  D008               	goto	l4760
  3677  00060C  D7B2               	goto	l4748
  3678  00060E                     l4756:
  3679                           
  3680                           ; BSR set to: 0
  3681                           ;doprnt.c: 1208: (putch('0') );
  3682  00060E  0E30               	movlw	48
  3683  000610  EC1D  F025         	call	_putch
  3684                           
  3685                           ;doprnt.c: 1209: exp--;
  3686  000614  0100               	movlb	0	; () banked
  3687  000616  07E2               	decf	printf@exp& (0+255),f,b
  3688  000618  A0D8               	btfss	status,0,c
  3689  00061A  07E3               	decf	(printf@exp+1)& (0+255),f,b
  3690  00061C                     l4760:
  3691                           
  3692                           ; BSR set to: 0
  3693  00061C  0100               	movlb	0	; () banked
  3694  00061E  BFE3               	btfsc	(printf@exp+1)& (0+255),7,b
  3695  000620  D007               	goto	l4762
  3696  000622  0100               	movlb	0	; () banked
  3697  000624  51E3               	movf	(printf@exp+1)& (0+255),w,b
  3698  000626  E1F3               	bnz	l4756
  3699  000628  0100               	movlb	0	; () banked
  3700  00062A  05E2               	decf	printf@exp& (0+255),w,b
  3701  00062C  B0D8               	btfsc	status,0,c
  3702  00062E  D7EF               	goto	l4756
  3703  000630                     l4762:
  3704                           
  3705                           ; BSR set to: 0
  3706                           ;doprnt.c: 1210: }
  3707                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3708  000630  0100               	movlb	0	; () banked
  3709  000632  BFDD               	btfsc	(printf@prec+1)& (0+255),7,b
  3710  000634  D00C               	goto	l486
  3711  000636  0100               	movlb	0	; () banked
  3712  000638  51DD               	movf	(printf@prec+1)& (0+255),w,b
  3713  00063A  E105               	bnz	u5540
  3714  00063C  0E09               	movlw	9
  3715  00063E  0100               	movlb	0	; () banked
  3716  000640  5DDC               	subwf	printf@prec& (0+255),w,b
  3717  000642  A0D8               	btfss	status,0,c
  3718  000644  D004               	goto	l486
  3719  000646                     u5540:
  3720                           
  3721                           ; BSR set to: 0
  3722                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3723  000646  0E08               	movlw	8
  3724  000648  0100               	movlb	0	; () banked
  3725  00064A  6FEB               	movwf	printf@c& (0+255),b
  3726  00064C  D002               	goto	l4766
  3727  00064E                     l486:
  3728                           
  3729                           ; BSR set to: 0
  3730                           ;doprnt.c: 1213: else
  3731                           ;doprnt.c: 1214: c = prec;
  3732  00064E  C0DC  F0EB         	movff	printf@prec,printf@c
  3733  000652                     l4766:
  3734                           
  3735                           ; BSR set to: 0
  3736                           ;doprnt.c: 1215: prec -= c;
  3737  000652  0100               	movlb	0	; () banked
  3738  000654  51EB               	movf	printf@c& (0+255),w,b
  3739  000656  0100               	movlb	0	; () banked
  3740  000658  5FDC               	subwf	printf@prec& (0+255),f,b
  3741  00065A  0E00               	movlw	0
  3742  00065C  0100               	movlb	0	; () banked
  3743  00065E  BFEB               	btfsc	printf@c& (0+255),7,b
  3744  000660  0EFF               	movlw	255
  3745  000662  0100               	movlb	0	; () banked
  3746  000664  5BDD               	subwfb	(printf@prec+1)& (0+255),f,b
  3747                           
  3748                           ; BSR set to: 0
  3749                           ;doprnt.c: 1219: if(c)
  3750  000666  0100               	movlb	0	; () banked
  3751  000668  51EB               	movf	printf@c& (0+255),w,b
  3752  00066A  0100               	movlb	0	; () banked
  3753  00066C  B4D8               	btfsc	status,2,c
  3754  00066E  D003               	goto	l4772
  3755                           
  3756                           ; BSR set to: 0
  3757                           ;doprnt.c: 1221: (putch('.') );
  3758  000670  0E2E               	movlw	46
  3759  000672  EC1D  F025         	call	_putch
  3760  000676                     l4772:
  3761                           
  3762                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3763  000676  0100               	movlb	0	; () banked
  3764  000678  51EB               	movf	printf@c& (0+255),w,b
  3765  00067A  ECBD  F00C         	call	_scale
  3766  00067E  C0A3  F0D2         	movff	?_scale,_printf$1340
  3767  000682  C0A4  F0D3         	movff	?_scale+1,_printf$1340+1
  3768  000686  C0A5  F0D4         	movff	?_scale+2,_printf$1340+2
  3769                           
  3770                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3771  00068A  C0E8  F097         	movff	printf@fval,___ftmul@f2
  3772  00068E  C0E9  F098         	movff	printf@fval+1,___ftmul@f2+1
  3773  000692  C0EA  F099         	movff	printf@fval+2,___ftmul@f2+2
  3774  000696  C0D2  F094         	movff	_printf$1340,___ftmul@f1
  3775  00069A  C0D3  F095         	movff	_printf$1340+1,___ftmul@f1+1
  3776  00069E  C0D4  F096         	movff	_printf$1340+2,___ftmul@f1+2
  3777  0006A2  EC43  F018         	call	___ftmul	;wreg free
  3778  0006A6  C094  F0AA         	movff	?___ftmul,___fttol@f1
  3779  0006AA  C095  F0AB         	movff	?___ftmul+1,___fttol@f1+1
  3780  0006AE  C096  F0AC         	movff	?___ftmul+2,___fttol@f1+2
  3781  0006B2  EC98  F019         	call	___fttol	;wreg free
  3782  0006B6  C0AA  F0E4         	movff	?___fttol,printf@val
  3783  0006BA  C0AB  F0E5         	movff	?___fttol+1,printf@val+1
  3784  0006BE  C0AC  F0E6         	movff	?___fttol+2,printf@val+2
  3785  0006C2  C0AD  F0E7         	movff	?___fttol+3,printf@val+3
  3786                           
  3787                           ;doprnt.c: 1228: while(c--) {
  3788  0006C6  D06E               	goto	l4782
  3789  0006C8                     l4776:
  3790                           
  3791                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  3792  0006C8  C0E4  F080         	movff	printf@val,___lldiv@dividend
  3793  0006CC  C0E5  F081         	movff	printf@val+1,___lldiv@dividend+1
  3794  0006D0  C0E6  F082         	movff	printf@val+2,___lldiv@dividend+2
  3795  0006D4  C0E7  F083         	movff	printf@val+3,___lldiv@dividend+3
  3796  0006D8  0100               	movlb	0	; () banked
  3797  0006DA  51EB               	movf	printf@c& (0+255),w,b
  3798  0006DC  0D04               	mullw	4
  3799  0006DE  0E8D               	movlw	low _dpowers
  3800  0006E0  24F3               	addwf	prodl,w,c
  3801  0006E2  6EF6               	movwf	tblptrl,c
  3802  0006E4  0EFE               	movlw	high _dpowers
  3803  0006E6  20F4               	addwfc	prodh,w,c
  3804  0006E8  6EF7               	movwf	tblptrh,c
  3805  0006EA                     	if	0	;There are less than 3 active tblptr bytes
  3806  0006EA                     	endif
  3807  0006EA  0009               	tblrd		*+
  3808  0006EC  CFF5 F084          	movff	tablat,___lldiv@divisor
  3809  0006F0  0009               	tblrd		*+
  3810  0006F2  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  3811  0006F6  0009               	tblrd		*+
  3812  0006F8  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  3813  0006FC  000A               	tblrd		*-
  3814  0006FE  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  3815  000702  EC9E  F01E         	call	___lldiv	;wreg free
  3816  000706  C080  F0DE         	movff	?___lldiv,printf@tmpval
  3817  00070A  C081  F0DF         	movff	?___lldiv+1,printf@tmpval+1
  3818  00070E  C082  F0E0         	movff	?___lldiv+2,printf@tmpval+2
  3819  000712  C083  F0E1         	movff	?___lldiv+3,printf@tmpval+3
  3820                           
  3821                           ;doprnt.c: 1230: tmpval.vd %= 10;
  3822  000716  C0DE  F08D         	movff	printf@tmpval,___llmod@dividend
  3823  00071A  C0DF  F08E         	movff	printf@tmpval+1,___llmod@dividend+1
  3824  00071E  C0E0  F08F         	movff	printf@tmpval+2,___llmod@dividend+2
  3825  000722  C0E1  F090         	movff	printf@tmpval+3,___llmod@dividend+3
  3826  000726  0E0A               	movlw	10
  3827  000728  0100               	movlb	0	; () banked
  3828  00072A  6F91               	movwf	___llmod@divisor& (0+255),b
  3829  00072C  0E00               	movlw	0
  3830  00072E  6F92               	movwf	(___llmod@divisor+1)& (0+255),b
  3831  000730  0E00               	movlw	0
  3832  000732  6F93               	movwf	(___llmod@divisor+2)& (0+255),b
  3833  000734  0E00               	movlw	0
  3834  000736  6F94               	movwf	(___llmod@divisor+3)& (0+255),b
  3835  000738  ECA5  F020         	call	___llmod	;wreg free
  3836  00073C  C08D  F0DE         	movff	?___llmod,printf@tmpval
  3837  000740  C08E  F0DF         	movff	?___llmod+1,printf@tmpval+1
  3838  000744  C08F  F0E0         	movff	?___llmod+2,printf@tmpval+2
  3839  000748  C090  F0E1         	movff	?___llmod+3,printf@tmpval+3
  3840                           
  3841                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  3842  00074C  0100               	movlb	0	; () banked
  3843  00074E  51DE               	movf	printf@tmpval& (0+255),w,b
  3844  000750  0F30               	addlw	48
  3845  000752  EC1D  F025         	call	_putch
  3846                           
  3847                           ;doprnt.c: 1232: val %= dpowers[c];
  3848  000756  C0E4  F08D         	movff	printf@val,___llmod@dividend
  3849  00075A  C0E5  F08E         	movff	printf@val+1,___llmod@dividend+1
  3850  00075E  C0E6  F08F         	movff	printf@val+2,___llmod@dividend+2
  3851  000762  C0E7  F090         	movff	printf@val+3,___llmod@dividend+3
  3852  000766  0100               	movlb	0	; () banked
  3853  000768  51EB               	movf	printf@c& (0+255),w,b
  3854  00076A  0D04               	mullw	4
  3855  00076C  0E8D               	movlw	low _dpowers
  3856  00076E  24F3               	addwf	prodl,w,c
  3857  000770  6EF6               	movwf	tblptrl,c
  3858  000772  0EFE               	movlw	high _dpowers
  3859  000774  20F4               	addwfc	prodh,w,c
  3860  000776  6EF7               	movwf	tblptrh,c
  3861  000778                     	if	0	;There are less than 3 active tblptr bytes
  3862  000778                     	endif
  3863  000778  0009               	tblrd		*+
  3864  00077A  CFF5 F091          	movff	tablat,___llmod@divisor
  3865  00077E  0009               	tblrd		*+
  3866  000780  CFF5 F092          	movff	tablat,___llmod@divisor+1
  3867  000784  0009               	tblrd		*+
  3868  000786  CFF5 F093          	movff	tablat,___llmod@divisor+2
  3869  00078A  000A               	tblrd		*-
  3870  00078C  CFF5 F094          	movff	tablat,___llmod@divisor+3
  3871  000790  ECA5  F020         	call	___llmod	;wreg free
  3872  000794  C08D  F0E4         	movff	?___llmod,printf@val
  3873  000798  C08E  F0E5         	movff	?___llmod+1,printf@val+1
  3874  00079C  C08F  F0E6         	movff	?___llmod+2,printf@val+2
  3875  0007A0  C090  F0E7         	movff	?___llmod+3,printf@val+3
  3876  0007A4                     l4782:
  3877  0007A4  0100               	movlb	0	; () banked
  3878  0007A6  07EB               	decf	printf@c& (0+255),f,b
  3879  0007A8  0100               	movlb	0	; () banked
  3880  0007AA  29EB               	incf	printf@c& (0+255),w,b
  3881  0007AC  B4D8               	btfsc	status,2,c
  3882  0007AE  D008               	goto	l4788
  3883  0007B0  D78B               	goto	l4776
  3884  0007B2                     l4784:
  3885                           
  3886                           ; BSR set to: 0
  3887                           ;doprnt.c: 1236: (putch('0') );
  3888  0007B2  0E30               	movlw	48
  3889  0007B4  EC1D  F025         	call	_putch
  3890                           
  3891                           ;doprnt.c: 1237: prec--;
  3892  0007B8  0100               	movlb	0	; () banked
  3893  0007BA  07DC               	decf	printf@prec& (0+255),f,b
  3894  0007BC  A0D8               	btfss	status,0,c
  3895  0007BE  07DD               	decf	(printf@prec+1)& (0+255),f,b
  3896  0007C0                     l4788:
  3897                           
  3898                           ; BSR set to: 0
  3899  0007C0  0100               	movlb	0	; () banked
  3900  0007C2  51DC               	movf	printf@prec& (0+255),w,b
  3901  0007C4  0100               	movlb	0	; () banked
  3902  0007C6  11DD               	iorwf	(printf@prec+1)& (0+255),w,b
  3903  0007C8  B4D8               	btfsc	status,2,c
  3904  0007CA  D18F               	goto	l4874
  3905  0007CC  D7F2               	goto	l4784
  3906  0007CE                     l453:
  3907                           
  3908                           ; BSR set to: 0
  3909                           ;doprnt.c: 1246: }
  3910                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  3911  0007CE  0100               	movlb	0	; () banked
  3912  0007D0  BFDA               	btfsc	printf@flag& (0+255),7,b
  3913  0007D2  D023               	goto	l4800
  3914                           
  3915                           ; BSR set to: 0
  3916                           ;doprnt.c: 1253: {
  3917                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  3918  0007D4  C0D6  FFD9         	movff	printf@ap,fsr2l
  3919  0007D8  C0D7  FFDA         	movff	printf@ap+1,fsr2h
  3920  0007DC  CFDE F0E4          	movff	postinc2,printf@val
  3921  0007E0  CFDD F0E5          	movff	postdec2,printf@val+1
  3922  0007E4  0100               	movlb	0	; () banked
  3923  0007E6  0E00               	movlw	0
  3924  0007E8  BFE5               	btfsc	(printf@val+1)& (0+255),7,b
  3925  0007EA  0EFF               	movlw	-1
  3926  0007EC  6FE6               	movwf	(printf@val+2)& (0+255),b
  3927  0007EE  6FE7               	movwf	(printf@val+3)& (0+255),b
  3928                           
  3929                           ; BSR set to: 0
  3930  0007F0  0E02               	movlw	2
  3931  0007F2  0100               	movlb	0	; () banked
  3932  0007F4  27D6               	addwf	printf@ap& (0+255),f,b
  3933  0007F6  0E00               	movlw	0
  3934  0007F8  23D7               	addwfc	(printf@ap+1)& (0+255),f,b
  3935                           
  3936                           ; BSR set to: 0
  3937                           ;doprnt.c: 1261: if((long)val < 0) {
  3938  0007FA  0100               	movlb	0	; () banked
  3939  0007FC  AFE7               	btfss	(printf@val+3)& (0+255),7,b
  3940  0007FE  D06E               	goto	l4834
  3941                           
  3942                           ; BSR set to: 0
  3943                           ;doprnt.c: 1262: flag |= 0x03;
  3944  000800  0E03               	movlw	3
  3945  000802  0100               	movlb	0	; () banked
  3946  000804  13DA               	iorwf	printf@flag& (0+255),f,b
  3947                           
  3948                           ; BSR set to: 0
  3949                           ;doprnt.c: 1263: val = -val;
  3950  000806  0100               	movlb	0	; () banked
  3951  000808  1FE7               	comf	(printf@val+3)& (0+255),f,b
  3952  00080A  1FE6               	comf	(printf@val+2)& (0+255),f,b
  3953  00080C  1FE5               	comf	(printf@val+1)& (0+255),f,b
  3954  00080E  6DE4               	negf	printf@val& (0+255),b
  3955  000810  0E00               	movlw	0
  3956  000812  23E5               	addwfc	(printf@val+1)& (0+255),f,b
  3957  000814  23E6               	addwfc	(printf@val+2)& (0+255),f,b
  3958  000816  23E7               	addwfc	(printf@val+3)& (0+255),f,b
  3959                           
  3960                           ; BSR set to: 0
  3961                           ;doprnt.c: 1264: }
  3962                           ;doprnt.c: 1266: }
  3963  000818  D061               	goto	l4834
  3964  00081A                     l4800:
  3965                           
  3966                           ; BSR set to: 0
  3967                           ;doprnt.c: 1268: else
  3968                           ;doprnt.c: 1273: {
  3969                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3970  00081A  C0D6  FFD9         	movff	printf@ap,fsr2l
  3971  00081E  C0D7  FFDA         	movff	printf@ap+1,fsr2h
  3972  000822  CFDE F0CC          	movff	postinc2,??_printf
  3973  000826  CFDD F0CD          	movff	postdec2,??_printf+1
  3974  00082A  C0CC  F0E4         	movff	??_printf,printf@val
  3975  00082E  C0CD  F0E5         	movff	??_printf+1,printf@val+1
  3976  000832  0100               	movlb	0	; () banked
  3977  000834  6BE6               	clrf	(printf@val+2)& (0+255),b
  3978  000836  6BE7               	clrf	(printf@val+3)& (0+255),b
  3979                           
  3980                           ; BSR set to: 0
  3981  000838  0E02               	movlw	2
  3982  00083A  0100               	movlb	0	; () banked
  3983  00083C  27D6               	addwf	printf@ap& (0+255),f,b
  3984  00083E  0E00               	movlw	0
  3985  000840  23D7               	addwfc	(printf@ap+1)& (0+255),f,b
  3986                           
  3987                           ; BSR set to: 0
  3988                           ;doprnt.c: 1287: }
  3989                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  3990  000842  D04C               	goto	l4834
  3991  000844                     l4804:
  3992                           
  3993                           ; BSR set to: 0
  3994                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3995  000844  0E01               	movlw	1
  3996  000846  0100               	movlb	0	; () banked
  3997  000848  6FEB               	movwf	printf@c& (0+255),b
  3998  00084A                     l4806:
  3999                           
  4000                           ; BSR set to: 0
  4001  00084A  0E0A               	movlw	10
  4002  00084C  0100               	movlb	0	; () banked
  4003  00084E  19EB               	xorwf	printf@c& (0+255),w,b
  4004  000850  B4D8               	btfsc	status,2,c
  4005  000852  D04D               	goto	l4836
  4006                           
  4007                           ; BSR set to: 0
  4008                           ;doprnt.c: 1306: if(val < dpowers[c])
  4009                           
  4010                           ; BSR set to: 0
  4011                           
  4012                           ; BSR set to: 0
  4013  000854  0100               	movlb	0	; () banked
  4014  000856  51EB               	movf	printf@c& (0+255),w,b
  4015  000858  0D04               	mullw	4
  4016  00085A  0E8D               	movlw	low _dpowers
  4017  00085C  24F3               	addwf	prodl,w,c
  4018  00085E  6EF6               	movwf	tblptrl,c
  4019  000860  0EFE               	movlw	high _dpowers
  4020  000862  20F4               	addwfc	prodh,w,c
  4021  000864  6EF7               	movwf	tblptrh,c
  4022  000866                     	if	0	;There are less than 3 active tblptr bytes
  4023  000866                     	endif
  4024  000866  0009               	tblrd		*+
  4025  000868  50F5               	movf	tablat,w,c
  4026  00086A  0100               	movlb	0	; () banked
  4027  00086C  5DE4               	subwf	printf@val& (0+255),w,b
  4028  00086E  0009               	tblrd		*+
  4029  000870  50F5               	movf	tablat,w,c
  4030  000872  0100               	movlb	0	; () banked
  4031  000874  59E5               	subwfb	(printf@val+1)& (0+255),w,b
  4032  000876  0009               	tblrd		*+
  4033  000878  50F5               	movf	tablat,w,c
  4034  00087A  0100               	movlb	0	; () banked
  4035  00087C  59E6               	subwfb	(printf@val+2)& (0+255),w,b
  4036  00087E  0009               	tblrd		*+
  4037  000880  50F5               	movf	tablat,w,c
  4038  000882  0100               	movlb	0	; () banked
  4039  000884  59E7               	subwfb	(printf@val+3)& (0+255),w,b
  4040  000886  A0D8               	btfss	status,0,c
  4041  000888  D032               	goto	l4836
  4042                           
  4043                           ; BSR set to: 0
  4044                           
  4045                           ; BSR set to: 0
  4046                           
  4047                           ; BSR set to: 0
  4048                           ;doprnt.c: 1307: break;
  4049  00088A  0100               	movlb	0	; () banked
  4050  00088C  2BEB               	incf	printf@c& (0+255),f,b
  4051  00088E  D7DD               	goto	l4806
  4052  000890                     l4818:
  4053                           
  4054                           ; BSR set to: 0
  4055                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4056  000890  0E01               	movlw	1
  4057  000892  0100               	movlb	0	; () banked
  4058  000894  6FEB               	movwf	printf@c& (0+255),b
  4059  000896                     l4820:
  4060                           
  4061                           ; BSR set to: 0
  4062  000896  0E08               	movlw	8
  4063  000898  0100               	movlb	0	; () banked
  4064  00089A  19EB               	xorwf	printf@c& (0+255),w,b
  4065  00089C  B4D8               	btfsc	status,2,c
  4066  00089E  D027               	goto	l4836
  4067                           
  4068                           ; BSR set to: 0
  4069                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4070                           
  4071                           ; BSR set to: 0
  4072                           
  4073                           ; BSR set to: 0
  4074  0008A0  0100               	movlb	0	; () banked
  4075  0008A2  51EB               	movf	printf@c& (0+255),w,b
  4076  0008A4  0D04               	mullw	4
  4077  0008A6  0E03               	movlw	low _hexpowers
  4078  0008A8  24F3               	addwf	prodl,w,c
  4079  0008AA  6EF6               	movwf	tblptrl,c
  4080  0008AC  0EFF               	movlw	high _hexpowers
  4081  0008AE  20F4               	addwfc	prodh,w,c
  4082  0008B0  6EF7               	movwf	tblptrh,c
  4083  0008B2                     	if	0	;There are less than 3 active tblptr bytes
  4084  0008B2                     	endif
  4085  0008B2  0009               	tblrd		*+
  4086  0008B4  50F5               	movf	tablat,w,c
  4087  0008B6  0100               	movlb	0	; () banked
  4088  0008B8  5DE4               	subwf	printf@val& (0+255),w,b
  4089  0008BA  0009               	tblrd		*+
  4090  0008BC  50F5               	movf	tablat,w,c
  4091  0008BE  0100               	movlb	0	; () banked
  4092  0008C0  59E5               	subwfb	(printf@val+1)& (0+255),w,b
  4093  0008C2  0009               	tblrd		*+
  4094  0008C4  50F5               	movf	tablat,w,c
  4095  0008C6  0100               	movlb	0	; () banked
  4096  0008C8  59E6               	subwfb	(printf@val+2)& (0+255),w,b
  4097  0008CA  0009               	tblrd		*+
  4098  0008CC  50F5               	movf	tablat,w,c
  4099  0008CE  0100               	movlb	0	; () banked
  4100  0008D0  59E7               	subwfb	(printf@val+3)& (0+255),w,b
  4101  0008D2  A0D8               	btfss	status,0,c
  4102  0008D4  D00C               	goto	l4836
  4103                           
  4104                           ; BSR set to: 0
  4105                           
  4106                           ; BSR set to: 0
  4107                           
  4108                           ; BSR set to: 0
  4109                           ;doprnt.c: 1318: break;
  4110  0008D6  0100               	movlb	0	; () banked
  4111  0008D8  2BEB               	incf	printf@c& (0+255),f,b
  4112  0008DA  D7DD               	goto	l4820
  4113  0008DC                     l4834:
  4114                           
  4115                           ; BSR set to: 0
  4116  0008DC  0100               	movlb	0	; () banked
  4117  0008DE  51DA               	movf	printf@flag& (0+255),w,b
  4118  0008E0  0B80               	andlw	128
  4119                           
  4120                           ; Switch size 1, requested type "space"
  4121                           ; Number of cases is 2, Range of values is 0 to 128
  4122                           ; switch strategies available:
  4123                           ; Name         Instructions Cycles
  4124                           ; simple_byte            7     4 (average)
  4125                           ;	Chosen strategy is simple_byte
  4126  0008E2  0A00               	xorlw	0	; case 0
  4127  0008E4  B4D8               	btfsc	status,2,c
  4128  0008E6  D7AE               	goto	l4804
  4129  0008E8  0A80               	xorlw	128	; case 128
  4130  0008EA  B4D8               	btfsc	status,2,c
  4131  0008EC  D7D1               	goto	l4818
  4132  0008EE                     l4836:
  4133                           
  4134                           ; BSR set to: 0
  4135                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4136  0008EE  0100               	movlb	0	; () banked
  4137  0008F0  51D8               	movf	printf@width& (0+255),w,b
  4138  0008F2  0100               	movlb	0	; () banked
  4139  0008F4  11D9               	iorwf	(printf@width+1)& (0+255),w,b
  4140  0008F6  B4D8               	btfsc	status,2,c
  4141  0008F8  D014               	goto	l4842
  4142                           
  4143                           ; BSR set to: 0
  4144  0008FA  0E03               	movlw	3
  4145  0008FC  0100               	movlb	0	; () banked
  4146  0008FE  15DA               	andwf	printf@flag& (0+255),w,b
  4147  000900  0100               	movlb	0	; () banked
  4148  000902  6FCC               	movwf	??_printf& (0+255),b
  4149  000904  0E00               	movlw	0
  4150  000906  0100               	movlb	0	; () banked
  4151  000908  15DB               	andwf	(printf@flag+1)& (0+255),w,b
  4152  00090A  0100               	movlb	0	; () banked
  4153  00090C  6FCD               	movwf	(??_printf+1)& (0+255),b
  4154  00090E  0100               	movlb	0	; () banked
  4155  000910  51CC               	movf	??_printf& (0+255),w,b
  4156  000912  0100               	movlb	0	; () banked
  4157  000914  11CD               	iorwf	(??_printf+1)& (0+255),w,b
  4158  000916  B4D8               	btfsc	status,2,c
  4159  000918  D004               	goto	l4842
  4160                           
  4161                           ; BSR set to: 0
  4162                           ;doprnt.c: 1346: width--;
  4163  00091A  0100               	movlb	0	; () banked
  4164  00091C  07D8               	decf	printf@width& (0+255),f,b
  4165  00091E  A0D8               	btfss	status,0,c
  4166  000920  07D9               	decf	(printf@width+1)& (0+255),f,b
  4167  000922                     l4842:
  4168                           
  4169                           ; BSR set to: 0
  4170                           ;doprnt.c: 1381: if(width > c)
  4171  000922  0E80               	movlw	128
  4172  000924  0100               	movlb	0	; () banked
  4173  000926  BFEB               	btfsc	printf@c& (0+255),7,b
  4174  000928  0E7F               	movlw	127
  4175  00092A  0100               	movlb	0	; () banked
  4176  00092C  6FCC               	movwf	??_printf& (0+255),b
  4177  00092E  0100               	movlb	0	; () banked
  4178  000930  51D8               	movf	printf@width& (0+255),w,b
  4179  000932  0100               	movlb	0	; () banked
  4180  000934  5DEB               	subwf	printf@c& (0+255),w,b
  4181  000936  0100               	movlb	0	; () banked
  4182  000938  51D9               	movf	(printf@width+1)& (0+255),w,b
  4183  00093A  0A80               	xorlw	128
  4184  00093C  0100               	movlb	0	; () banked
  4185  00093E  59CC               	subwfb	??_printf& (0+255),w,b
  4186  000940  B0D8               	btfsc	status,0,c
  4187  000942  D00B               	goto	l4846
  4188                           
  4189                           ; BSR set to: 0
  4190                           ;doprnt.c: 1382: width -= c;
  4191  000944  0100               	movlb	0	; () banked
  4192  000946  51EB               	movf	printf@c& (0+255),w,b
  4193  000948  0100               	movlb	0	; () banked
  4194  00094A  5FD8               	subwf	printf@width& (0+255),f,b
  4195  00094C  0E00               	movlw	0
  4196  00094E  0100               	movlb	0	; () banked
  4197  000950  BFEB               	btfsc	printf@c& (0+255),7,b
  4198  000952  0EFF               	movlw	255
  4199  000954  0100               	movlb	0	; () banked
  4200  000956  5BD9               	subwfb	(printf@width+1)& (0+255),f,b
  4201  000958  D005               	goto	l4848
  4202  00095A                     l4846:
  4203                           
  4204                           ; BSR set to: 0
  4205                           ;doprnt.c: 1383: else
  4206                           ;doprnt.c: 1384: width = 0;
  4207  00095A  0E00               	movlw	0
  4208  00095C  0100               	movlb	0	; () banked
  4209  00095E  6FD9               	movwf	(printf@width+1)& (0+255),b
  4210  000960  0E00               	movlw	0
  4211  000962  6FD8               	movwf	printf@width& (0+255),b
  4212  000964                     l4848:
  4213                           
  4214                           ; BSR set to: 0
  4215                           ;doprnt.c: 1422: {
  4216                           ;doprnt.c: 1424: if(width
  4217                           ;doprnt.c: 1428: )
  4218  000964  0100               	movlb	0	; () banked
  4219  000966  51D8               	movf	printf@width& (0+255),w,b
  4220  000968  0100               	movlb	0	; () banked
  4221  00096A  11D9               	iorwf	(printf@width+1)& (0+255),w,b
  4222  00096C  B4D8               	btfsc	status,2,c
  4223  00096E  D00D               	goto	l4854
  4224  000970                     l4850:
  4225                           
  4226                           ; BSR set to: 0
  4227                           ;doprnt.c: 1430: (putch(' ') );
  4228  000970  0E20               	movlw	32
  4229  000972  EC1D  F025         	call	_putch
  4230                           
  4231                           ;doprnt.c: 1431: while(--width);
  4232  000976  0100               	movlb	0	; () banked
  4233  000978  07D8               	decf	printf@width& (0+255),f,b
  4234  00097A  A0D8               	btfss	status,0,c
  4235  00097C  07D9               	decf	(printf@width+1)& (0+255),f,b
  4236  00097E  0100               	movlb	0	; () banked
  4237  000980  51D8               	movf	printf@width& (0+255),w,b
  4238  000982  0100               	movlb	0	; () banked
  4239  000984  11D9               	iorwf	(printf@width+1)& (0+255),w,b
  4240  000986  A4D8               	btfss	status,2,c
  4241  000988  D7F3               	goto	l4850
  4242  00098A                     l4854:
  4243                           
  4244                           ; BSR set to: 0
  4245                           ;doprnt.c: 1438: if(flag & 0x03)
  4246  00098A  0E03               	movlw	3
  4247  00098C  0100               	movlb	0	; () banked
  4248  00098E  15DA               	andwf	printf@flag& (0+255),w,b
  4249  000990  0100               	movlb	0	; () banked
  4250  000992  6FCC               	movwf	??_printf& (0+255),b
  4251  000994  0E00               	movlw	0
  4252  000996  0100               	movlb	0	; () banked
  4253  000998  15DB               	andwf	(printf@flag+1)& (0+255),w,b
  4254  00099A  0100               	movlb	0	; () banked
  4255  00099C  6FCD               	movwf	(??_printf+1)& (0+255),b
  4256  00099E  0100               	movlb	0	; () banked
  4257  0009A0  51CC               	movf	??_printf& (0+255),w,b
  4258  0009A2  0100               	movlb	0	; () banked
  4259  0009A4  11CD               	iorwf	(??_printf+1)& (0+255),w,b
  4260  0009A6  B4D8               	btfsc	status,2,c
  4261  0009A8  D003               	goto	l4858
  4262                           
  4263                           ; BSR set to: 0
  4264                           ;doprnt.c: 1439: (putch('-') );
  4265  0009AA  0E2D               	movlw	45
  4266  0009AC  EC1D  F025         	call	_putch
  4267  0009B0                     l4858:
  4268                           
  4269                           ;doprnt.c: 1469: }
  4270                           ;doprnt.c: 1472: prec = c;
  4271  0009B0  0100               	movlb	0	; () banked
  4272  0009B2  51EB               	movf	printf@c& (0+255),w,b
  4273  0009B4  0100               	movlb	0	; () banked
  4274  0009B6  6FDC               	movwf	printf@prec& (0+255),b
  4275  0009B8  6BDD               	clrf	(printf@prec+1)& (0+255),b
  4276  0009BA  BFDC               	btfsc	printf@prec& (0+255),7,b
  4277  0009BC  07DD               	decf	(printf@prec+1)& (0+255),f,b
  4278                           
  4279                           ;doprnt.c: 1474: while(prec--) {
  4280  0009BE  D08A               	goto	l4872
  4281  0009C0                     l4860:
  4282                           
  4283                           ; BSR set to: 0
  4284                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4285  0009C0  C0DC  F0CC         	movff	printf@prec,??_printf
  4286  0009C4  C0DD  F0CD         	movff	printf@prec+1,??_printf+1
  4287  0009C8  0100               	movlb	0	; () banked
  4288  0009CA  90D8               	bcf	status,0,c
  4289  0009CC  37CC               	rlcf	??_printf& (0+255),f,b
  4290  0009CE  37CD               	rlcf	(??_printf+1)& (0+255),f,b
  4291  0009D0  0100               	movlb	0	; () banked
  4292  0009D2  90D8               	bcf	status,0,c
  4293  0009D4  37CC               	rlcf	??_printf& (0+255),f,b
  4294  0009D6  37CD               	rlcf	(??_printf+1)& (0+255),f,b
  4295  0009D8  0E8D               	movlw	low _dpowers
  4296  0009DA  0100               	movlb	0	; () banked
  4297  0009DC  25CC               	addwf	??_printf& (0+255),w,b
  4298  0009DE  6EF6               	movwf	tblptrl,c
  4299  0009E0  0EFE               	movlw	high _dpowers
  4300  0009E2  21CD               	addwfc	(??_printf+1)& (0+255),w,b
  4301  0009E4  6EF7               	movwf	tblptrh,c
  4302  0009E6                     	if	0	;There are less than 3 active tblptr bytes
  4303  0009E6                     	endif
  4304  0009E6  0009               	tblrd		*+
  4305  0009E8  CFF5 F084          	movff	tablat,___lldiv@divisor
  4306  0009EC  0009               	tblrd		*+
  4307  0009EE  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  4308  0009F2  0009               	tblrd		*+
  4309  0009F4  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  4310  0009F8  000A               	tblrd		*-
  4311  0009FA  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  4312  0009FE  C0E4  F080         	movff	printf@val,___lldiv@dividend
  4313  000A02  C0E5  F081         	movff	printf@val+1,___lldiv@dividend+1
  4314  000A06  C0E6  F082         	movff	printf@val+2,___lldiv@dividend+2
  4315  000A0A  C0E7  F083         	movff	printf@val+3,___lldiv@dividend+3
  4316  000A0E  EC9E  F01E         	call	___lldiv	;wreg free
  4317  000A12  C080  F08D         	movff	?___lldiv,___llmod@dividend
  4318  000A16  C081  F08E         	movff	?___lldiv+1,___llmod@dividend+1
  4319  000A1A  C082  F08F         	movff	?___lldiv+2,___llmod@dividend+2
  4320  000A1E  C083  F090         	movff	?___lldiv+3,___llmod@dividend+3
  4321  000A22  0E0A               	movlw	10
  4322  000A24  0100               	movlb	0	; () banked
  4323  000A26  6F91               	movwf	___llmod@divisor& (0+255),b
  4324  000A28  0E00               	movlw	0
  4325  000A2A  6F92               	movwf	(___llmod@divisor+1)& (0+255),b
  4326  000A2C  0E00               	movlw	0
  4327  000A2E  6F93               	movwf	(___llmod@divisor+2)& (0+255),b
  4328  000A30  0E00               	movlw	0
  4329  000A32  6F94               	movwf	(___llmod@divisor+3)& (0+255),b
  4330  000A34  ECA5  F020         	call	___llmod	;wreg free
  4331  000A38  0100               	movlb	0	; () banked
  4332  000A3A  518D               	movf	?___llmod& (0+255),w,b
  4333  000A3C  0F30               	addlw	48
  4334  000A3E  0100               	movlb	0	; () banked
  4335  000A40  6FEB               	movwf	printf@c& (0+255),b
  4336                           
  4337                           ;doprnt.c: 1491: break;
  4338  000A42  D044               	goto	l4870
  4339  000A44                     l4862:
  4340                           
  4341                           ; BSR set to: 0
  4342                           ;doprnt.c: 1499: {
  4343                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4344  000A44  C0E4  F080         	movff	printf@val,___lldiv@dividend
  4345  000A48  C0E5  F081         	movff	printf@val+1,___lldiv@dividend+1
  4346  000A4C  C0E6  F082         	movff	printf@val+2,___lldiv@dividend+2
  4347  000A50  C0E7  F083         	movff	printf@val+3,___lldiv@dividend+3
  4348  000A54  C0DC  F0CC         	movff	printf@prec,??_printf
  4349  000A58  C0DD  F0CD         	movff	printf@prec+1,??_printf+1
  4350  000A5C  0100               	movlb	0	; () banked
  4351  000A5E  90D8               	bcf	status,0,c
  4352  000A60  37CC               	rlcf	??_printf& (0+255),f,b
  4353  000A62  37CD               	rlcf	(??_printf+1)& (0+255),f,b
  4354  000A64  0100               	movlb	0	; () banked
  4355  000A66  90D8               	bcf	status,0,c
  4356  000A68  37CC               	rlcf	??_printf& (0+255),f,b
  4357  000A6A  37CD               	rlcf	(??_printf+1)& (0+255),f,b
  4358  000A6C  0E03               	movlw	low _hexpowers
  4359  000A6E  0100               	movlb	0	; () banked
  4360  000A70  25CC               	addwf	??_printf& (0+255),w,b
  4361  000A72  6EF6               	movwf	tblptrl,c
  4362  000A74  0EFF               	movlw	high _hexpowers
  4363  000A76  21CD               	addwfc	(??_printf+1)& (0+255),w,b
  4364  000A78  6EF7               	movwf	tblptrh,c
  4365  000A7A                     	if	0	;There are less than 3 active tblptr bytes
  4366  000A7A                     	endif
  4367  000A7A  0009               	tblrd		*+
  4368  000A7C  CFF5 F084          	movff	tablat,___lldiv@divisor
  4369  000A80  0009               	tblrd		*+
  4370  000A82  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  4371  000A86  0009               	tblrd		*+
  4372  000A88  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  4373  000A8C  000A               	tblrd		*-
  4374  000A8E  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  4375  000A92  EC9E  F01E         	call	___lldiv	;wreg free
  4376  000A96  0100               	movlb	0	; () banked
  4377  000A98  5180               	movf	?___lldiv& (0+255),w,b
  4378  000A9A  0B0F               	andlw	15
  4379  000A9C  0100               	movlb	0	; () banked
  4380  000A9E  6FD5               	movwf	printf@idx& (0+255),b
  4381                           
  4382                           ; BSR set to: 0
  4383                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4384  000AA0  0100               	movlb	0	; () banked
  4385  000AA2  51D5               	movf	printf@idx& (0+255),w,b
  4386  000AA4  0D01               	mullw	1
  4387  000AA6  0E3B               	movlw	low STR_21
  4388  000AA8  24F3               	addwf	prodl,w,c
  4389  000AAA  6EF6               	movwf	tblptrl,c
  4390  000AAC  0EFF               	movlw	high STR_21
  4391  000AAE  20F4               	addwfc	prodh,w,c
  4392  000AB0  6EF7               	movwf	tblptrh,c
  4393  000AB2                     	if	0	;There are less than 3 active tblptr bytes
  4394  000AB2                     	endif
  4395  000AB2  0008               	tblrd		*
  4396  000AB4  CFF5 F0EB          	movff	tablat,printf@c
  4397                           
  4398                           ; BSR set to: 0
  4399                           ;doprnt.c: 1523: }
  4400                           
  4401                           ;doprnt.c: 1508: }
  4402                           ;doprnt.c: 1510: break;
  4403  000AB8  D009               	goto	l4870
  4404  000ABA                     l4868:
  4405                           
  4406                           ; BSR set to: 0
  4407  000ABA  0100               	movlb	0	; () banked
  4408  000ABC  51DA               	movf	printf@flag& (0+255),w,b
  4409  000ABE  0B80               	andlw	128
  4410                           
  4411                           ; Switch size 1, requested type "space"
  4412                           ; Number of cases is 2, Range of values is 0 to 128
  4413                           ; switch strategies available:
  4414                           ; Name         Instructions Cycles
  4415                           ; simple_byte            7     4 (average)
  4416                           ;	Chosen strategy is simple_byte
  4417  000AC0  0A00               	xorlw	0	; case 0
  4418  000AC2  B4D8               	btfsc	status,2,c
  4419  000AC4  D77D               	goto	l4860
  4420  000AC6  0A80               	xorlw	128	; case 128
  4421  000AC8  B4D8               	btfsc	status,2,c
  4422  000ACA  D7BC               	goto	l4862
  4423  000ACC                     l4870:
  4424                           
  4425                           ; BSR set to: 0
  4426                           ;doprnt.c: 1524: (putch(c) );
  4427  000ACC  0100               	movlb	0	; () banked
  4428  000ACE  51EB               	movf	printf@c& (0+255),w,b
  4429  000AD0  EC1D  F025         	call	_putch
  4430  000AD4                     l4872:
  4431  000AD4  0100               	movlb	0	; () banked
  4432  000AD6  07DC               	decf	printf@prec& (0+255),f,b
  4433  000AD8  A0D8               	btfss	status,0,c
  4434  000ADA  07DD               	decf	(printf@prec+1)& (0+255),f,b
  4435  000ADC  0100               	movlb	0	; () banked
  4436  000ADE  29DC               	incf	printf@prec& (0+255),w,b
  4437  000AE0  E1EC               	bnz	l4868
  4438  000AE2  0100               	movlb	0	; () banked
  4439  000AE4  29DD               	incf	(printf@prec+1)& (0+255),w,b
  4440  000AE6  A4D8               	btfss	status,2,c
  4441  000AE8  D7E8               	goto	l4868
  4442  000AEA                     l4874:
  4443  000AEA  C0BF  FFF6         	movff	printf@f,tblptrl
  4444  000AEE  C0C0  FFF7         	movff	printf@f+1,tblptrh
  4445  000AF2  0100               	movlb	0	; () banked
  4446  000AF4  4BBF               	infsnz	printf@f& (0+255),f,b
  4447  000AF6  2BC0               	incf	(printf@f+1)& (0+255),f,b
  4448  000AF8                     	if	0	;tblptru may be non-zero
  4449  000AF8                     	endif
  4450  000AF8                     	if	0	;tblptru may be non-zero
  4451  000AF8                     	endif
  4452  000AF8  0008               	tblrd		*
  4453  000AFA  CFF5 F0EB          	movff	tablat,printf@c
  4454  000AFE  0100               	movlb	0	; () banked
  4455  000B00  51EB               	movf	printf@c& (0+255),w,b
  4456  000B02  B4D8               	btfsc	status,2,c
  4457  000B04  0012               	return	
  4458  000B06  EF11  F000         	goto	l4618
  4459  000B0A                     __end_of_printf:
  4460                           	opt stack 0
  4461                           tblptru	equ	0xFF8
  4462                           tblptrh	equ	0xFF7
  4463                           tblptrl	equ	0xFF6
  4464                           tablat	equ	0xFF5
  4465                           prodh	equ	0xFF4
  4466                           prodl	equ	0xFF3
  4467                           intcon	equ	0xFF2
  4468                           intcon2	equ	0xFF1
  4469                           intcon3	equ	0xFF0
  4470                           postinc0	equ	0xFEE
  4471                           wreg	equ	0xFE8
  4472                           postinc2	equ	0xFDE
  4473                           postdec2	equ	0xFDD
  4474                           fsr2h	equ	0xFDA
  4475                           fsr2l	equ	0xFD9
  4476                           status	equ	0xFD8
  4477                           
  4478 ;; *************** function _scale *****************
  4479 ;; Defined at:
  4480 ;;		line 425 in file "/Applications/microchip/xc8/v1.40/sources/common/doprnt.c"
  4481 ;; Parameters:    Size  Location     Type
  4482 ;;  scl             1    wreg     char 
  4483 ;; Auto vars:     Size  Location     Type
  4484 ;;  scl             1   41[BANK0 ] char 
  4485 ;; Return value:  Size  Location     Type
  4486 ;;                  3   35[BANK0 ] char 
  4487 ;; Registers used:
  4488 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4489 ;; Tracked objects:
  4490 ;;		On entry : 0/0
  4491 ;;		On exit  : 0/0
  4492 ;;		Unchanged: 0/0
  4493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4494 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4495 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4497 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4498 ;;Total ram usage:        7 bytes
  4499 ;; Hardware stack levels used:    1
  4500 ;; Hardware stack levels required when called:    8
  4501 ;; This function calls:
  4502 ;;		___awdiv
  4503 ;;		___awmod
  4504 ;;		___ftmul
  4505 ;;		___wmul
  4506 ;; This function is called by:
  4507 ;;		_printf
  4508 ;; This function uses a non-reentrant model
  4509 ;;
  4510                           
  4511                           	psect	text4
  4512  00197A                     __ptext4:
  4513                           	opt stack 0
  4514  00197A                     _scale:
  4515                           	opt stack 20
  4516                           
  4517                           ;incstack = 0
  4518                           ;scale@scl stored from wreg
  4519  00197A  0100               	movlb	0	; () banked
  4520  00197C  6FA9               	movwf	scale@scl& (0+255),b
  4521                           
  4522                           ;doprnt.c: 428: if(scl < 0) {
  4523  00197E  0100               	movlb	0	; () banked
  4524  001980  AFA9               	btfss	scale@scl& (0+255),7,b
  4525  001982  D12A               	goto	l4030
  4526                           
  4527                           ; BSR set to: 0
  4528                           ;doprnt.c: 429: scl = -scl;
  4529  001984  0100               	movlb	0	; () banked
  4530  001986  6DA9               	negf	scale@scl& (0+255),b
  4531                           
  4532                           ;doprnt.c: 430: if(scl>=110)
  4533  001988  0100               	movlb	0	; () banked
  4534  00198A  51A9               	movf	scale@scl& (0+255),w,b
  4535  00198C  0A80               	xorlw	128
  4536  00198E  0F12               	addlw	-238
  4537  001990  A0D8               	btfss	status,0,c
  4538  001992  D0AC               	goto	l4020
  4539                           
  4540                           ; BSR set to: 0
  4541                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4542  001994  0E00               	movlw	0
  4543  001996  0100               	movlb	0	; () banked
  4544  001998  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4545  00199A  0E03               	movlw	3
  4546  00199C  6F90               	movwf	___wmul@multiplicand& (0+255),b
  4547  00199E  0E00               	movlw	0
  4548  0019A0  0100               	movlb	0	; () banked
  4549  0019A2  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  4550  0019A4  0E0A               	movlw	10
  4551  0019A6  6F88               	movwf	___awdiv@divisor& (0+255),b
  4552  0019A8  0E00               	movlw	0
  4553  0019AA  0100               	movlb	0	; () banked
  4554  0019AC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  4555  0019AE  0E64               	movlw	100
  4556  0019B0  6F82               	movwf	___awmod@divisor& (0+255),b
  4557  0019B2  0100               	movlb	0	; () banked
  4558  0019B4  51A9               	movf	scale@scl& (0+255),w,b
  4559  0019B6  0100               	movlb	0	; () banked
  4560  0019B8  6F80               	movwf	___awmod@dividend& (0+255),b
  4561  0019BA  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  4562  0019BC  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  4563  0019BE  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  4564  0019C0  EC54  F020         	call	___awmod	;wreg free
  4565  0019C4  C080  F086         	movff	?___awmod,___awdiv@dividend
  4566  0019C8  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  4567  0019CC  EC3F  F01E         	call	___awdiv	;wreg free
  4568  0019D0  0E09               	movlw	9
  4569  0019D2  0100               	movlb	0	; () banked
  4570  0019D4  2586               	addwf	?___awdiv& (0+255),w,b
  4571  0019D6  0100               	movlb	0	; () banked
  4572  0019D8  6F8E               	movwf	___wmul@multiplier& (0+255),b
  4573  0019DA  0E00               	movlw	0
  4574  0019DC  0100               	movlb	0	; () banked
  4575  0019DE  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  4576  0019E0  0100               	movlb	0	; () banked
  4577  0019E2  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4578  0019E4  EC04  F024         	call	___wmul	;wreg free
  4579  0019E8  0EB5               	movlw	low __npowers_
  4580  0019EA  0100               	movlb	0	; () banked
  4581  0019EC  258E               	addwf	?___wmul& (0+255),w,b
  4582  0019EE  6EF6               	movwf	tblptrl,c
  4583  0019F0  0EFE               	movlw	high __npowers_
  4584  0019F2  0100               	movlb	0	; () banked
  4585  0019F4  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  4586  0019F6  6EF7               	movwf	tblptrh,c
  4587  0019F8                     	if	0	;There are less than 3 active tblptr bytes
  4588  0019F8                     	endif
  4589  0019F8  0009               	tblrd		*+
  4590  0019FA  CFF5 F097          	movff	tablat,___ftmul@f2
  4591  0019FE  0009               	tblrd		*+
  4592  001A00  CFF5 F098          	movff	tablat,___ftmul@f2+1
  4593  001A04  000A               	tblrd		*-
  4594  001A06  CFF5 F099          	movff	tablat,___ftmul@f2+2
  4595  001A0A  0E00               	movlw	0
  4596  001A0C  0100               	movlb	0	; () banked
  4597  001A0E  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  4598  001A10  0E64               	movlw	100
  4599  001A12  6F88               	movwf	___awdiv@divisor& (0+255),b
  4600  001A14  0100               	movlb	0	; () banked
  4601  001A16  51A9               	movf	scale@scl& (0+255),w,b
  4602  001A18  0100               	movlb	0	; () banked
  4603  001A1A  6F86               	movwf	___awdiv@dividend& (0+255),b
  4604  001A1C  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  4605  001A1E  BF86               	btfsc	___awdiv@dividend& (0+255),7,b
  4606  001A20  0787               	decf	(___awdiv@dividend+1)& (0+255),f,b
  4607  001A22  EC3F  F01E         	call	___awdiv	;wreg free
  4608  001A26  0E12               	movlw	18
  4609  001A28  0100               	movlb	0	; () banked
  4610  001A2A  2586               	addwf	?___awdiv& (0+255),w,b
  4611  001A2C  0100               	movlb	0	; () banked
  4612  001A2E  6F8E               	movwf	___wmul@multiplier& (0+255),b
  4613  001A30  0E00               	movlw	0
  4614  001A32  0100               	movlb	0	; () banked
  4615  001A34  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  4616  001A36  0100               	movlb	0	; () banked
  4617  001A38  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4618  001A3A  0E00               	movlw	0
  4619  001A3C  0100               	movlb	0	; () banked
  4620  001A3E  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4621  001A40  0E03               	movlw	3
  4622  001A42  6F90               	movwf	___wmul@multiplicand& (0+255),b
  4623  001A44  EC04  F024         	call	___wmul	;wreg free
  4624  001A48  0EB5               	movlw	low __npowers_
  4625  001A4A  0100               	movlb	0	; () banked
  4626  001A4C  258E               	addwf	?___wmul& (0+255),w,b
  4627  001A4E  6EF6               	movwf	tblptrl,c
  4628  001A50  0EFE               	movlw	high __npowers_
  4629  001A52  0100               	movlb	0	; () banked
  4630  001A54  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  4631  001A56  6EF7               	movwf	tblptrh,c
  4632  001A58                     	if	0	;There are less than 3 active tblptr bytes
  4633  001A58                     	endif
  4634  001A58  0009               	tblrd		*+
  4635  001A5A  CFF5 F094          	movff	tablat,___ftmul@f1
  4636  001A5E  0009               	tblrd		*+
  4637  001A60  CFF5 F095          	movff	tablat,___ftmul@f1+1
  4638  001A64  000A               	tblrd		*-
  4639  001A66  CFF5 F096          	movff	tablat,___ftmul@f1+2
  4640  001A6A  EC43  F018         	call	___ftmul	;wreg free
  4641  001A6E  C094  F0A6         	movff	?___ftmul,_scale$1339
  4642  001A72  C095  F0A7         	movff	?___ftmul+1,_scale$1339+1
  4643  001A76  C096  F0A8         	movff	?___ftmul+2,_scale$1339+2
  4644                           
  4645                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4646  001A7A  C0A6  F094         	movff	_scale$1339,___ftmul@f1
  4647  001A7E  C0A7  F095         	movff	_scale$1339+1,___ftmul@f1+1
  4648  001A82  C0A8  F096         	movff	_scale$1339+2,___ftmul@f1+2
  4649  001A86  0E00               	movlw	0
  4650  001A88  0100               	movlb	0	; () banked
  4651  001A8A  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4652  001A8C  0E03               	movlw	3
  4653  001A8E  6F90               	movwf	___wmul@multiplicand& (0+255),b
  4654  001A90  0E00               	movlw	0
  4655  001A92  0100               	movlb	0	; () banked
  4656  001A94  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  4657  001A96  0E0A               	movlw	10
  4658  001A98  6F82               	movwf	___awmod@divisor& (0+255),b
  4659  001A9A  0100               	movlb	0	; () banked
  4660  001A9C  51A9               	movf	scale@scl& (0+255),w,b
  4661  001A9E  0100               	movlb	0	; () banked
  4662  001AA0  6F80               	movwf	___awmod@dividend& (0+255),b
  4663  001AA2  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  4664  001AA4  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  4665  001AA6  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  4666  001AA8  EC54  F020         	call	___awmod	;wreg free
  4667  001AAC  C080  F08E         	movff	?___awmod,___wmul@multiplier
  4668  001AB0  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  4669  001AB4  EC04  F024         	call	___wmul	;wreg free
  4670  001AB8  0EB5               	movlw	low __npowers_
  4671  001ABA  0100               	movlb	0	; () banked
  4672  001ABC  258E               	addwf	?___wmul& (0+255),w,b
  4673  001ABE  6EF6               	movwf	tblptrl,c
  4674  001AC0  0EFE               	movlw	high __npowers_
  4675  001AC2  0100               	movlb	0	; () banked
  4676  001AC4  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  4677  001AC6  6EF7               	movwf	tblptrh,c
  4678  001AC8                     	if	0	;There are less than 3 active tblptr bytes
  4679  001AC8                     	endif
  4680  001AC8  0009               	tblrd		*+
  4681  001ACA  CFF5 F097          	movff	tablat,___ftmul@f2
  4682  001ACE  0009               	tblrd		*+
  4683  001AD0  CFF5 F098          	movff	tablat,___ftmul@f2+1
  4684  001AD4  000A               	tblrd		*-
  4685  001AD6  CFF5 F099          	movff	tablat,___ftmul@f2+2
  4686  001ADA  EC43  F018         	call	___ftmul	;wreg free
  4687  001ADE  C094  F0A3         	movff	?___ftmul,?_scale
  4688  001AE2  C095  F0A4         	movff	?___ftmul+1,?_scale+1
  4689  001AE6  C096  F0A5         	movff	?___ftmul+2,?_scale+2
  4690  001AEA  0012               	return	
  4691  001AEC                     l4020:
  4692                           
  4693                           ;doprnt.c: 432: else if(scl > 10)
  4694  001AEC  0100               	movlb	0	; () banked
  4695  001AEE  51A9               	movf	scale@scl& (0+255),w,b
  4696  001AF0  0A80               	xorlw	128
  4697  001AF2  0F75               	addlw	-139
  4698  001AF4  A0D8               	btfss	status,0,c
  4699  001AF6  D05D               	goto	l4026
  4700                           
  4701                           ; BSR set to: 0
  4702                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  4703  001AF8  0E00               	movlw	0
  4704  001AFA  0100               	movlb	0	; () banked
  4705  001AFC  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  4706  001AFE  0E0A               	movlw	10
  4707  001B00  6F88               	movwf	___awdiv@divisor& (0+255),b
  4708  001B02  0100               	movlb	0	; () banked
  4709  001B04  51A9               	movf	scale@scl& (0+255),w,b
  4710  001B06  0100               	movlb	0	; () banked
  4711  001B08  6F86               	movwf	___awdiv@dividend& (0+255),b
  4712  001B0A  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  4713  001B0C  BF86               	btfsc	___awdiv@dividend& (0+255),7,b
  4714  001B0E  0787               	decf	(___awdiv@dividend+1)& (0+255),f,b
  4715  001B10  EC3F  F01E         	call	___awdiv	;wreg free
  4716  001B14  0E09               	movlw	9
  4717  001B16  0100               	movlb	0	; () banked
  4718  001B18  2586               	addwf	?___awdiv& (0+255),w,b
  4719  001B1A  0100               	movlb	0	; () banked
  4720  001B1C  6F8E               	movwf	___wmul@multiplier& (0+255),b
  4721  001B1E  0E00               	movlw	0
  4722  001B20  0100               	movlb	0	; () banked
  4723  001B22  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  4724  001B24  0100               	movlb	0	; () banked
  4725  001B26  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4726  001B28  0E00               	movlw	0
  4727  001B2A  0100               	movlb	0	; () banked
  4728  001B2C  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4729  001B2E  0E03               	movlw	3
  4730  001B30  6F90               	movwf	___wmul@multiplicand& (0+255),b
  4731  001B32  EC04  F024         	call	___wmul	;wreg free
  4732  001B36  0EB5               	movlw	low __npowers_
  4733  001B38  0100               	movlb	0	; () banked
  4734  001B3A  258E               	addwf	?___wmul& (0+255),w,b
  4735  001B3C  6EF6               	movwf	tblptrl,c
  4736  001B3E  0EFE               	movlw	high __npowers_
  4737  001B40  0100               	movlb	0	; () banked
  4738  001B42  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  4739  001B44  6EF7               	movwf	tblptrh,c
  4740  001B46                     	if	0	;There are less than 3 active tblptr bytes
  4741  001B46                     	endif
  4742  001B46  0009               	tblrd		*+
  4743  001B48  CFF5 F094          	movff	tablat,___ftmul@f1
  4744  001B4C  0009               	tblrd		*+
  4745  001B4E  CFF5 F095          	movff	tablat,___ftmul@f1+1
  4746  001B52  000A               	tblrd		*-
  4747  001B54  CFF5 F096          	movff	tablat,___ftmul@f1+2
  4748  001B58  0E00               	movlw	0
  4749  001B5A  0100               	movlb	0	; () banked
  4750  001B5C  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4751  001B5E  0E03               	movlw	3
  4752  001B60  6F90               	movwf	___wmul@multiplicand& (0+255),b
  4753  001B62  0E00               	movlw	0
  4754  001B64  0100               	movlb	0	; () banked
  4755  001B66  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  4756  001B68  0E0A               	movlw	10
  4757  001B6A  6F82               	movwf	___awmod@divisor& (0+255),b
  4758  001B6C  0100               	movlb	0	; () banked
  4759  001B6E  51A9               	movf	scale@scl& (0+255),w,b
  4760  001B70  0100               	movlb	0	; () banked
  4761  001B72  6F80               	movwf	___awmod@dividend& (0+255),b
  4762  001B74  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  4763  001B76  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  4764  001B78  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  4765  001B7A  EC54  F020         	call	___awmod	;wreg free
  4766  001B7E  C080  F08E         	movff	?___awmod,___wmul@multiplier
  4767  001B82  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  4768  001B86  EC04  F024         	call	___wmul	;wreg free
  4769  001B8A  0EB5               	movlw	low __npowers_
  4770  001B8C  0100               	movlb	0	; () banked
  4771  001B8E  258E               	addwf	?___wmul& (0+255),w,b
  4772  001B90  6EF6               	movwf	tblptrl,c
  4773  001B92  0EFE               	movlw	high __npowers_
  4774  001B94  0100               	movlb	0	; () banked
  4775  001B96  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  4776  001B98  6EF7               	movwf	tblptrh,c
  4777  001B9A                     	if	0	;There are less than 3 active tblptr bytes
  4778  001B9A                     	endif
  4779  001B9A  0009               	tblrd		*+
  4780  001B9C  CFF5 F097          	movff	tablat,___ftmul@f2
  4781  001BA0  0009               	tblrd		*+
  4782  001BA2  CFF5 F098          	movff	tablat,___ftmul@f2+1
  4783  001BA6  000A               	tblrd		*-
  4784  001BA8  CFF5 F099          	movff	tablat,___ftmul@f2+2
  4785  001BAC  EC43  F018         	call	___ftmul	;wreg free
  4786  001BB0  D796               	goto	L2
  4787  001BB2                     l4026:
  4788                           
  4789                           ;doprnt.c: 434: return _npowers_[scl];
  4790  001BB2  0100               	movlb	0	; () banked
  4791  001BB4  51A9               	movf	scale@scl& (0+255),w,b
  4792  001BB6  0D03               	mullw	3
  4793  001BB8  0EB5               	movlw	low __npowers_
  4794  001BBA  24F3               	addwf	prodl,w,c
  4795  001BBC  6EF6               	movwf	tblptrl,c
  4796  001BBE  0EFE               	movlw	high __npowers_
  4797  001BC0  20F4               	addwfc	prodh,w,c
  4798  001BC2  6EF7               	movwf	tblptrh,c
  4799  001BC4                     	if	0	;There are less than 3 active tblptr bytes
  4800  001BC4                     	endif
  4801  001BC4  0009               	tblrd		*+
  4802  001BC6  CFF5 F0A3          	movff	tablat,?_scale
  4803  001BCA  0009               	tblrd		*+
  4804  001BCC  CFF5 F0A4          	movff	tablat,?_scale+1
  4805  001BD0  000A               	tblrd		*-
  4806  001BD2  CFF5 F0A5          	movff	tablat,?_scale+2
  4807                           
  4808                           ; BSR set to: 0
  4809  001BD6  0012               	return	
  4810  001BD8                     l4030:
  4811                           
  4812                           ; BSR set to: 0
  4813                           ;doprnt.c: 435: }
  4814                           ;doprnt.c: 436: if(scl>=110)
  4815  001BD8  0100               	movlb	0	; () banked
  4816  001BDA  51A9               	movf	scale@scl& (0+255),w,b
  4817  001BDC  0A80               	xorlw	128
  4818  001BDE  0F12               	addlw	-238
  4819  001BE0  A0D8               	btfss	status,0,c
  4820  001BE2  D0AC               	goto	l4038
  4821                           
  4822                           ; BSR set to: 0
  4823                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4824  001BE4  0E00               	movlw	0
  4825  001BE6  0100               	movlb	0	; () banked
  4826  001BE8  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4827  001BEA  0E03               	movlw	3
  4828  001BEC  6F90               	movwf	___wmul@multiplicand& (0+255),b
  4829  001BEE  0E00               	movlw	0
  4830  001BF0  0100               	movlb	0	; () banked
  4831  001BF2  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  4832  001BF4  0E0A               	movlw	10
  4833  001BF6  6F88               	movwf	___awdiv@divisor& (0+255),b
  4834  001BF8  0E00               	movlw	0
  4835  001BFA  0100               	movlb	0	; () banked
  4836  001BFC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  4837  001BFE  0E64               	movlw	100
  4838  001C00  6F82               	movwf	___awmod@divisor& (0+255),b
  4839  001C02  0100               	movlb	0	; () banked
  4840  001C04  51A9               	movf	scale@scl& (0+255),w,b
  4841  001C06  0100               	movlb	0	; () banked
  4842  001C08  6F80               	movwf	___awmod@dividend& (0+255),b
  4843  001C0A  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  4844  001C0C  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  4845  001C0E  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  4846  001C10  EC54  F020         	call	___awmod	;wreg free
  4847  001C14  C080  F086         	movff	?___awmod,___awdiv@dividend
  4848  001C18  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  4849  001C1C  EC3F  F01E         	call	___awdiv	;wreg free
  4850  001C20  0E09               	movlw	9
  4851  001C22  0100               	movlb	0	; () banked
  4852  001C24  2586               	addwf	?___awdiv& (0+255),w,b
  4853  001C26  0100               	movlb	0	; () banked
  4854  001C28  6F8E               	movwf	___wmul@multiplier& (0+255),b
  4855  001C2A  0E00               	movlw	0
  4856  001C2C  0100               	movlb	0	; () banked
  4857  001C2E  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  4858  001C30  0100               	movlb	0	; () banked
  4859  001C32  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4860  001C34  EC04  F024         	call	___wmul	;wreg free
  4861  001C38  0EDC               	movlw	low __powers_
  4862  001C3A  0100               	movlb	0	; () banked
  4863  001C3C  258E               	addwf	?___wmul& (0+255),w,b
  4864  001C3E  6EF6               	movwf	tblptrl,c
  4865  001C40  0EFE               	movlw	high __powers_
  4866  001C42  0100               	movlb	0	; () banked
  4867  001C44  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  4868  001C46  6EF7               	movwf	tblptrh,c
  4869  001C48                     	if	0	;There are less than 3 active tblptr bytes
  4870  001C48                     	endif
  4871  001C48  0009               	tblrd		*+
  4872  001C4A  CFF5 F097          	movff	tablat,___ftmul@f2
  4873  001C4E  0009               	tblrd		*+
  4874  001C50  CFF5 F098          	movff	tablat,___ftmul@f2+1
  4875  001C54  000A               	tblrd		*-
  4876  001C56  CFF5 F099          	movff	tablat,___ftmul@f2+2
  4877  001C5A  0E00               	movlw	0
  4878  001C5C  0100               	movlb	0	; () banked
  4879  001C5E  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  4880  001C60  0E64               	movlw	100
  4881  001C62  6F88               	movwf	___awdiv@divisor& (0+255),b
  4882  001C64  0100               	movlb	0	; () banked
  4883  001C66  51A9               	movf	scale@scl& (0+255),w,b
  4884  001C68  0100               	movlb	0	; () banked
  4885  001C6A  6F86               	movwf	___awdiv@dividend& (0+255),b
  4886  001C6C  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  4887  001C6E  BF86               	btfsc	___awdiv@dividend& (0+255),7,b
  4888  001C70  0787               	decf	(___awdiv@dividend+1)& (0+255),f,b
  4889  001C72  EC3F  F01E         	call	___awdiv	;wreg free
  4890  001C76  0E12               	movlw	18
  4891  001C78  0100               	movlb	0	; () banked
  4892  001C7A  2586               	addwf	?___awdiv& (0+255),w,b
  4893  001C7C  0100               	movlb	0	; () banked
  4894  001C7E  6F8E               	movwf	___wmul@multiplier& (0+255),b
  4895  001C80  0E00               	movlw	0
  4896  001C82  0100               	movlb	0	; () banked
  4897  001C84  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  4898  001C86  0100               	movlb	0	; () banked
  4899  001C88  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4900  001C8A  0E00               	movlw	0
  4901  001C8C  0100               	movlb	0	; () banked
  4902  001C8E  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4903  001C90  0E03               	movlw	3
  4904  001C92  6F90               	movwf	___wmul@multiplicand& (0+255),b
  4905  001C94  EC04  F024         	call	___wmul	;wreg free
  4906  001C98  0EDC               	movlw	low __powers_
  4907  001C9A  0100               	movlb	0	; () banked
  4908  001C9C  258E               	addwf	?___wmul& (0+255),w,b
  4909  001C9E  6EF6               	movwf	tblptrl,c
  4910  001CA0  0EFE               	movlw	high __powers_
  4911  001CA2  0100               	movlb	0	; () banked
  4912  001CA4  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  4913  001CA6  6EF7               	movwf	tblptrh,c
  4914  001CA8                     	if	0	;There are less than 3 active tblptr bytes
  4915  001CA8                     	endif
  4916  001CA8  0009               	tblrd		*+
  4917  001CAA  CFF5 F094          	movff	tablat,___ftmul@f1
  4918  001CAE  0009               	tblrd		*+
  4919  001CB0  CFF5 F095          	movff	tablat,___ftmul@f1+1
  4920  001CB4  000A               	tblrd		*-
  4921  001CB6  CFF5 F096          	movff	tablat,___ftmul@f1+2
  4922  001CBA  EC43  F018         	call	___ftmul	;wreg free
  4923  001CBE  C094  F0A6         	movff	?___ftmul,_scale$1339
  4924  001CC2  C095  F0A7         	movff	?___ftmul+1,_scale$1339+1
  4925  001CC6  C096  F0A8         	movff	?___ftmul+2,_scale$1339+2
  4926                           
  4927                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4928  001CCA  C0A6  F094         	movff	_scale$1339,___ftmul@f1
  4929  001CCE  C0A7  F095         	movff	_scale$1339+1,___ftmul@f1+1
  4930  001CD2  C0A8  F096         	movff	_scale$1339+2,___ftmul@f1+2
  4931  001CD6  0E00               	movlw	0
  4932  001CD8  0100               	movlb	0	; () banked
  4933  001CDA  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4934  001CDC  0E03               	movlw	3
  4935  001CDE  6F90               	movwf	___wmul@multiplicand& (0+255),b
  4936  001CE0  0E00               	movlw	0
  4937  001CE2  0100               	movlb	0	; () banked
  4938  001CE4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  4939  001CE6  0E0A               	movlw	10
  4940  001CE8  6F82               	movwf	___awmod@divisor& (0+255),b
  4941  001CEA  0100               	movlb	0	; () banked
  4942  001CEC  51A9               	movf	scale@scl& (0+255),w,b
  4943  001CEE  0100               	movlb	0	; () banked
  4944  001CF0  6F80               	movwf	___awmod@dividend& (0+255),b
  4945  001CF2  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  4946  001CF4  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  4947  001CF6  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  4948  001CF8  EC54  F020         	call	___awmod	;wreg free
  4949  001CFC  C080  F08E         	movff	?___awmod,___wmul@multiplier
  4950  001D00  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  4951  001D04  EC04  F024         	call	___wmul	;wreg free
  4952  001D08  0EDC               	movlw	low __powers_
  4953  001D0A  0100               	movlb	0	; () banked
  4954  001D0C  258E               	addwf	?___wmul& (0+255),w,b
  4955  001D0E  6EF6               	movwf	tblptrl,c
  4956  001D10  0EFE               	movlw	high __powers_
  4957  001D12  0100               	movlb	0	; () banked
  4958  001D14  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  4959  001D16  6EF7               	movwf	tblptrh,c
  4960  001D18                     	if	0	;There are less than 3 active tblptr bytes
  4961  001D18                     	endif
  4962  001D18  0009               	tblrd		*+
  4963  001D1A  CFF5 F097          	movff	tablat,___ftmul@f2
  4964  001D1E  0009               	tblrd		*+
  4965  001D20  CFF5 F098          	movff	tablat,___ftmul@f2+1
  4966  001D24  000A               	tblrd		*-
  4967  001D26  CFF5 F099          	movff	tablat,___ftmul@f2+2
  4968  001D2A  EC43  F018         	call	___ftmul	;wreg free
  4969  001D2E  C094  F0A3         	movff	?___ftmul,?_scale
  4970  001D32  C095  F0A4         	movff	?___ftmul+1,?_scale+1
  4971  001D36  C096  F0A5         	movff	?___ftmul+2,?_scale+2
  4972  001D3A  0012               	return	
  4973  001D3C                     l4038:
  4974                           
  4975                           ;doprnt.c: 438: else if(scl > 10)
  4976  001D3C  0100               	movlb	0	; () banked
  4977  001D3E  51A9               	movf	scale@scl& (0+255),w,b
  4978  001D40  0A80               	xorlw	128
  4979  001D42  0F75               	addlw	-139
  4980  001D44  A0D8               	btfss	status,0,c
  4981  001D46  D05D               	goto	l4044
  4982                           
  4983                           ; BSR set to: 0
  4984                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  4985  001D48  0E00               	movlw	0
  4986  001D4A  0100               	movlb	0	; () banked
  4987  001D4C  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  4988  001D4E  0E0A               	movlw	10
  4989  001D50  6F88               	movwf	___awdiv@divisor& (0+255),b
  4990  001D52  0100               	movlb	0	; () banked
  4991  001D54  51A9               	movf	scale@scl& (0+255),w,b
  4992  001D56  0100               	movlb	0	; () banked
  4993  001D58  6F86               	movwf	___awdiv@dividend& (0+255),b
  4994  001D5A  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  4995  001D5C  BF86               	btfsc	___awdiv@dividend& (0+255),7,b
  4996  001D5E  0787               	decf	(___awdiv@dividend+1)& (0+255),f,b
  4997  001D60  EC3F  F01E         	call	___awdiv	;wreg free
  4998  001D64  0E09               	movlw	9
  4999  001D66  0100               	movlb	0	; () banked
  5000  001D68  2586               	addwf	?___awdiv& (0+255),w,b
  5001  001D6A  0100               	movlb	0	; () banked
  5002  001D6C  6F8E               	movwf	___wmul@multiplier& (0+255),b
  5003  001D6E  0E00               	movlw	0
  5004  001D70  0100               	movlb	0	; () banked
  5005  001D72  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  5006  001D74  0100               	movlb	0	; () banked
  5007  001D76  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5008  001D78  0E00               	movlw	0
  5009  001D7A  0100               	movlb	0	; () banked
  5010  001D7C  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5011  001D7E  0E03               	movlw	3
  5012  001D80  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5013  001D82  EC04  F024         	call	___wmul	;wreg free
  5014  001D86  0EDC               	movlw	low __powers_
  5015  001D88  0100               	movlb	0	; () banked
  5016  001D8A  258E               	addwf	?___wmul& (0+255),w,b
  5017  001D8C  6EF6               	movwf	tblptrl,c
  5018  001D8E  0EFE               	movlw	high __powers_
  5019  001D90  0100               	movlb	0	; () banked
  5020  001D92  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5021  001D94  6EF7               	movwf	tblptrh,c
  5022  001D96                     	if	0	;There are less than 3 active tblptr bytes
  5023  001D96                     	endif
  5024  001D96  0009               	tblrd		*+
  5025  001D98  CFF5 F094          	movff	tablat,___ftmul@f1
  5026  001D9C  0009               	tblrd		*+
  5027  001D9E  CFF5 F095          	movff	tablat,___ftmul@f1+1
  5028  001DA2  000A               	tblrd		*-
  5029  001DA4  CFF5 F096          	movff	tablat,___ftmul@f1+2
  5030  001DA8  0E00               	movlw	0
  5031  001DAA  0100               	movlb	0	; () banked
  5032  001DAC  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5033  001DAE  0E03               	movlw	3
  5034  001DB0  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5035  001DB2  0E00               	movlw	0
  5036  001DB4  0100               	movlb	0	; () banked
  5037  001DB6  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5038  001DB8  0E0A               	movlw	10
  5039  001DBA  6F82               	movwf	___awmod@divisor& (0+255),b
  5040  001DBC  0100               	movlb	0	; () banked
  5041  001DBE  51A9               	movf	scale@scl& (0+255),w,b
  5042  001DC0  0100               	movlb	0	; () banked
  5043  001DC2  6F80               	movwf	___awmod@dividend& (0+255),b
  5044  001DC4  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  5045  001DC6  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  5046  001DC8  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  5047  001DCA  EC54  F020         	call	___awmod	;wreg free
  5048  001DCE  C080  F08E         	movff	?___awmod,___wmul@multiplier
  5049  001DD2  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  5050  001DD6  EC04  F024         	call	___wmul	;wreg free
  5051  001DDA  0EDC               	movlw	low __powers_
  5052  001DDC  0100               	movlb	0	; () banked
  5053  001DDE  258E               	addwf	?___wmul& (0+255),w,b
  5054  001DE0  6EF6               	movwf	tblptrl,c
  5055  001DE2  0EFE               	movlw	high __powers_
  5056  001DE4  0100               	movlb	0	; () banked
  5057  001DE6  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5058  001DE8  6EF7               	movwf	tblptrh,c
  5059  001DEA                     	if	0	;There are less than 3 active tblptr bytes
  5060  001DEA                     	endif
  5061  001DEA  0009               	tblrd		*+
  5062  001DEC  CFF5 F097          	movff	tablat,___ftmul@f2
  5063  001DF0  0009               	tblrd		*+
  5064  001DF2  CFF5 F098          	movff	tablat,___ftmul@f2+1
  5065  001DF6  000A               	tblrd		*-
  5066  001DF8  CFF5 F099          	movff	tablat,___ftmul@f2+2
  5067  001DFC  EC43  F018         	call	___ftmul	;wreg free
  5068  001E00  D796               	goto	L3
  5069  001E02                     l4044:
  5070                           
  5071                           ;doprnt.c: 440: return _powers_[scl];
  5072  001E02  0100               	movlb	0	; () banked
  5073  001E04  51A9               	movf	scale@scl& (0+255),w,b
  5074  001E06  0D03               	mullw	3
  5075  001E08  0EDC               	movlw	low __powers_
  5076  001E0A  24F3               	addwf	prodl,w,c
  5077  001E0C  6EF6               	movwf	tblptrl,c
  5078  001E0E  0EFE               	movlw	high __powers_
  5079  001E10  20F4               	addwfc	prodh,w,c
  5080  001E12  6EF7               	movwf	tblptrh,c
  5081  001E14                     	if	0	;There are less than 3 active tblptr bytes
  5082  001E14                     	endif
  5083  001E14  0009               	tblrd		*+
  5084  001E16  CFF5 F0A3          	movff	tablat,?_scale
  5085  001E1A  0009               	tblrd		*+
  5086  001E1C  CFF5 F0A4          	movff	tablat,?_scale+1
  5087  001E20  000A               	tblrd		*-
  5088  001E22  CFF5 F0A5          	movff	tablat,?_scale+2
  5089  001E26  0012               	return	
  5090  001E28                     __end_of_scale:
  5091                           	opt stack 0
  5092                           tblptru	equ	0xFF8
  5093                           tblptrh	equ	0xFF7
  5094                           tblptrl	equ	0xFF6
  5095                           tablat	equ	0xFF5
  5096                           prodh	equ	0xFF4
  5097                           prodl	equ	0xFF3
  5098                           intcon	equ	0xFF2
  5099                           intcon2	equ	0xFF1
  5100                           intcon3	equ	0xFF0
  5101                           postinc0	equ	0xFEE
  5102                           wreg	equ	0xFE8
  5103                           postinc2	equ	0xFDE
  5104                           postdec2	equ	0xFDD
  5105                           fsr2h	equ	0xFDA
  5106                           fsr2l	equ	0xFD9
  5107                           status	equ	0xFD8
  5108                           
  5109 ;; *************** function _putch *****************
  5110 ;; Defined at:
  5111 ;;		line 30 in file "lcd.c"
  5112 ;; Parameters:    Size  Location     Type
  5113 ;;  data            1    wreg     unsigned char 
  5114 ;; Auto vars:     Size  Location     Type
  5115 ;;  data            1    2[BANK0 ] unsigned char 
  5116 ;; Return value:  Size  Location     Type
  5117 ;;                  1    wreg      void 
  5118 ;; Registers used:
  5119 ;;		wreg, status,2, status,0, cstack
  5120 ;; Tracked objects:
  5121 ;;		On entry : 0/0
  5122 ;;		On exit  : 0/0
  5123 ;;		Unchanged: 0/0
  5124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5126 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5128 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5129 ;;Total ram usage:        1 bytes
  5130 ;; Hardware stack levels used:    1
  5131 ;; Hardware stack levels required when called:    7
  5132 ;; This function calls:
  5133 ;;		_lcdNibble
  5134 ;; This function is called by:
  5135 ;;		_printf
  5136 ;; This function uses a non-reentrant model
  5137 ;;
  5138                           
  5139                           	psect	text5
  5140  004A3A                     __ptext5:
  5141                           	opt stack 0
  5142  004A3A                     _putch:
  5143                           	opt stack 21
  5144                           
  5145                           ;incstack = 0
  5146                           ;putch@data stored from wreg
  5147  004A3A  0100               	movlb	0	; () banked
  5148  004A3C  6F82               	movwf	putch@data& (0+255),b
  5149                           
  5150                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  5151  004A3E  848C               	bsf	3980,2,c	;volatile
  5152                           
  5153                           ;lcd.c: 32: lcdNibble(data);
  5154  004A40  0100               	movlb	0	; () banked
  5155  004A42  5182               	movf	putch@data& (0+255),w,b
  5156  004A44  EC33  F022         	call	_lcdNibble
  5157  004A48  0012               	return		;funcret
  5158  004A4A                     __end_of_putch:
  5159                           	opt stack 0
  5160                           tblptru	equ	0xFF8
  5161                           tblptrh	equ	0xFF7
  5162                           tblptrl	equ	0xFF6
  5163                           tablat	equ	0xFF5
  5164                           prodh	equ	0xFF4
  5165                           prodl	equ	0xFF3
  5166                           intcon	equ	0xFF2
  5167                           intcon2	equ	0xFF1
  5168                           intcon3	equ	0xFF0
  5169                           postinc0	equ	0xFEE
  5170                           wreg	equ	0xFE8
  5171                           postinc2	equ	0xFDE
  5172                           postdec2	equ	0xFDD
  5173                           fsr2h	equ	0xFDA
  5174                           fsr2l	equ	0xFD9
  5175                           status	equ	0xFD8
  5176                           
  5177 ;; *************** function _isdigit *****************
  5178 ;; Defined at:
  5179 ;;		line 8 in file "/Applications/microchip/xc8/v1.40/sources/common/isdigit.c"
  5180 ;; Parameters:    Size  Location     Type
  5181 ;;  c               1    wreg     unsigned char 
  5182 ;; Auto vars:     Size  Location     Type
  5183 ;;  c               1    2[BANK0 ] unsigned char 
  5184 ;; Return value:  Size  Location     Type
  5185 ;;		None               void
  5186 ;; Registers used:
  5187 ;;		wreg, status,2, status,0
  5188 ;; Tracked objects:
  5189 ;;		On entry : 0/0
  5190 ;;		On exit  : 0/0
  5191 ;;		Unchanged: 0/0
  5192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5194 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5195 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5196 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5197 ;;Total ram usage:        3 bytes
  5198 ;; Hardware stack levels used:    1
  5199 ;; Hardware stack levels required when called:    6
  5200 ;; This function calls:
  5201 ;;		Nothing
  5202 ;; This function is called by:
  5203 ;;		_printf
  5204 ;; This function uses a non-reentrant model
  5205 ;;
  5206                           
  5207                           	psect	text6
  5208  0048FC                     __ptext6:
  5209                           	opt stack 0
  5210  0048FC                     _isdigit:
  5211                           	opt stack 22
  5212                           
  5213                           ;incstack = 0
  5214                           ;isdigit@c stored from wreg
  5215  0048FC  0100               	movlb	0	; () banked
  5216  0048FE  6F82               	movwf	isdigit@c& (0+255),b
  5217  004900  0E00               	movlw	0
  5218  004902  0100               	movlb	0	; () banked
  5219  004904  6F81               	movwf	_isdigit$999& (0+255),b
  5220                           
  5221                           ; BSR set to: 0
  5222  004906  0E3A               	movlw	58
  5223  004908  0100               	movlb	0	; () banked
  5224  00490A  6182               	cpfslt	isdigit@c& (0+255),b
  5225  00490C  D007               	goto	l4056
  5226                           
  5227                           ; BSR set to: 0
  5228  00490E  0E2F               	movlw	47
  5229  004910  0100               	movlb	0	; () banked
  5230  004912  6582               	cpfsgt	isdigit@c& (0+255),b
  5231  004914  D003               	goto	l4056
  5232                           
  5233                           ; BSR set to: 0
  5234  004916  0E01               	movlw	1
  5235  004918  0100               	movlb	0	; () banked
  5236  00491A  6F81               	movwf	_isdigit$999& (0+255),b
  5237  00491C                     l4056:
  5238                           
  5239                           ; BSR set to: 0
  5240  00491C  C081  F080         	movff	_isdigit$999,??_isdigit
  5241  004920  0100               	movlb	0	; () banked
  5242  004922  3180               	rrcf	??_isdigit& (0+255),w,b
  5243  004924  0012               	return	
  5244  004926                     __end_of_isdigit:
  5245                           	opt stack 0
  5246                           tblptru	equ	0xFF8
  5247                           tblptrh	equ	0xFF7
  5248                           tblptrl	equ	0xFF6
  5249                           tablat	equ	0xFF5
  5250                           prodh	equ	0xFF4
  5251                           prodl	equ	0xFF3
  5252                           intcon	equ	0xFF2
  5253                           intcon2	equ	0xFF1
  5254                           intcon3	equ	0xFF0
  5255                           postinc0	equ	0xFEE
  5256                           wreg	equ	0xFE8
  5257                           postinc2	equ	0xFDE
  5258                           postdec2	equ	0xFDD
  5259                           fsr2h	equ	0xFDA
  5260                           fsr2l	equ	0xFD9
  5261                           status	equ	0xFD8
  5262                           
  5263 ;; *************** function _fround *****************
  5264 ;; Defined at:
  5265 ;;		line 409 in file "/Applications/microchip/xc8/v1.40/sources/common/doprnt.c"
  5266 ;; Parameters:    Size  Location     Type
  5267 ;;  prec            1    wreg     unsigned char 
  5268 ;; Auto vars:     Size  Location     Type
  5269 ;;  prec            1   44[BANK0 ] unsigned char 
  5270 ;; Return value:  Size  Location     Type
  5271 ;;                  3   35[BANK0 ] unsigned char 
  5272 ;; Registers used:
  5273 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5274 ;; Tracked objects:
  5275 ;;		On entry : 0/0
  5276 ;;		On exit  : 0/0
  5277 ;;		Unchanged: 0/0
  5278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5279 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5280 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5282 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5283 ;;Total ram usage:       10 bytes
  5284 ;; Hardware stack levels used:    1
  5285 ;; Hardware stack levels required when called:    8
  5286 ;; This function calls:
  5287 ;;		___awdiv
  5288 ;;		___awmod
  5289 ;;		___ftmul
  5290 ;;		___wmul
  5291 ;; This function is called by:
  5292 ;;		_printf
  5293 ;; This function uses a non-reentrant model
  5294 ;;
  5295                           
  5296                           	psect	text7
  5297  002218                     __ptext7:
  5298                           	opt stack 0
  5299  002218                     _fround:
  5300                           	opt stack 20
  5301                           
  5302                           ; BSR set to: 0
  5303                           ;incstack = 0
  5304                           ;fround@prec stored from wreg
  5305  002218  0100               	movlb	0	; () banked
  5306  00221A  6FAC               	movwf	fround@prec& (0+255),b
  5307                           
  5308                           ;doprnt.c: 413: if(prec>=110)
  5309  00221C  0E6D               	movlw	109
  5310  00221E  0100               	movlb	0	; () banked
  5311  002220  65AC               	cpfsgt	fround@prec& (0+255),b
  5312  002222  D0BA               	goto	l3998
  5313                           
  5314                           ; BSR set to: 0
  5315                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5316  002224  0E00               	movlw	0
  5317  002226  0100               	movlb	0	; () banked
  5318  002228  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5319  00222A  0E03               	movlw	3
  5320  00222C  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5321  00222E  0E00               	movlw	0
  5322  002230  0100               	movlb	0	; () banked
  5323  002232  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  5324  002234  0E0A               	movlw	10
  5325  002236  6F88               	movwf	___awdiv@divisor& (0+255),b
  5326  002238  0E00               	movlw	0
  5327  00223A  0100               	movlb	0	; () banked
  5328  00223C  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5329  00223E  0E64               	movlw	100
  5330  002240  6F82               	movwf	___awmod@divisor& (0+255),b
  5331  002242  C0AC  F080         	movff	fround@prec,___awmod@dividend
  5332  002246  0100               	movlb	0	; () banked
  5333  002248  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  5334  00224A  EC54  F020         	call	___awmod	;wreg free
  5335  00224E  C080  F086         	movff	?___awmod,___awdiv@dividend
  5336  002252  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  5337  002256  EC3F  F01E         	call	___awdiv	;wreg free
  5338  00225A  0E09               	movlw	9
  5339  00225C  0100               	movlb	0	; () banked
  5340  00225E  2586               	addwf	?___awdiv& (0+255),w,b
  5341  002260  0100               	movlb	0	; () banked
  5342  002262  6F8E               	movwf	___wmul@multiplier& (0+255),b
  5343  002264  0E00               	movlw	0
  5344  002266  0100               	movlb	0	; () banked
  5345  002268  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  5346  00226A  0100               	movlb	0	; () banked
  5347  00226C  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5348  00226E  EC04  F024         	call	___wmul	;wreg free
  5349  002272  0EB5               	movlw	low __npowers_
  5350  002274  0100               	movlb	0	; () banked
  5351  002276  258E               	addwf	?___wmul& (0+255),w,b
  5352  002278  6EF6               	movwf	tblptrl,c
  5353  00227A  0EFE               	movlw	high __npowers_
  5354  00227C  0100               	movlb	0	; () banked
  5355  00227E  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5356  002280  6EF7               	movwf	tblptrh,c
  5357  002282                     	if	0	;There are less than 3 active tblptr bytes
  5358  002282                     	endif
  5359  002282  0009               	tblrd		*+
  5360  002284  CFF5 F097          	movff	tablat,___ftmul@f2
  5361  002288  0009               	tblrd		*+
  5362  00228A  CFF5 F098          	movff	tablat,___ftmul@f2+1
  5363  00228E  000A               	tblrd		*-
  5364  002290  CFF5 F099          	movff	tablat,___ftmul@f2+2
  5365  002294  0E00               	movlw	0
  5366  002296  0100               	movlb	0	; () banked
  5367  002298  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  5368  00229A  0E64               	movlw	100
  5369  00229C  6F88               	movwf	___awdiv@divisor& (0+255),b
  5370  00229E  C0AC  F086         	movff	fround@prec,___awdiv@dividend
  5371  0022A2  0100               	movlb	0	; () banked
  5372  0022A4  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  5373  0022A6  EC3F  F01E         	call	___awdiv	;wreg free
  5374  0022AA  0E12               	movlw	18
  5375  0022AC  0100               	movlb	0	; () banked
  5376  0022AE  2586               	addwf	?___awdiv& (0+255),w,b
  5377  0022B0  0100               	movlb	0	; () banked
  5378  0022B2  6F8E               	movwf	___wmul@multiplier& (0+255),b
  5379  0022B4  0E00               	movlw	0
  5380  0022B6  0100               	movlb	0	; () banked
  5381  0022B8  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  5382  0022BA  0100               	movlb	0	; () banked
  5383  0022BC  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5384  0022BE  0E00               	movlw	0
  5385  0022C0  0100               	movlb	0	; () banked
  5386  0022C2  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5387  0022C4  0E03               	movlw	3
  5388  0022C6  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5389  0022C8  EC04  F024         	call	___wmul	;wreg free
  5390  0022CC  0EB5               	movlw	low __npowers_
  5391  0022CE  0100               	movlb	0	; () banked
  5392  0022D0  258E               	addwf	?___wmul& (0+255),w,b
  5393  0022D2  6EF6               	movwf	tblptrl,c
  5394  0022D4  0EFE               	movlw	high __npowers_
  5395  0022D6  0100               	movlb	0	; () banked
  5396  0022D8  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5397  0022DA  6EF7               	movwf	tblptrh,c
  5398  0022DC                     	if	0	;There are less than 3 active tblptr bytes
  5399  0022DC                     	endif
  5400  0022DC  0009               	tblrd		*+
  5401  0022DE  CFF5 F094          	movff	tablat,___ftmul@f1
  5402  0022E2  0009               	tblrd		*+
  5403  0022E4  CFF5 F095          	movff	tablat,___ftmul@f1+1
  5404  0022E8  000A               	tblrd		*-
  5405  0022EA  CFF5 F096          	movff	tablat,___ftmul@f1+2
  5406  0022EE  EC43  F018         	call	___ftmul	;wreg free
  5407  0022F2  C094  F0A9         	movff	?___ftmul,_fround$1337
  5408  0022F6  C095  F0AA         	movff	?___ftmul+1,_fround$1337+1
  5409  0022FA  C096  F0AB         	movff	?___ftmul+2,_fround$1337+2
  5410                           
  5411                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5412  0022FE  0E00               	movlw	0
  5413  002300  0100               	movlb	0	; () banked
  5414  002302  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5415  002304  0E03               	movlw	3
  5416  002306  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5417  002308  0E00               	movlw	0
  5418  00230A  0100               	movlb	0	; () banked
  5419  00230C  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5420  00230E  0E0A               	movlw	10
  5421  002310  6F82               	movwf	___awmod@divisor& (0+255),b
  5422  002312  C0AC  F080         	movff	fround@prec,___awmod@dividend
  5423  002316  0100               	movlb	0	; () banked
  5424  002318  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  5425  00231A  EC54  F020         	call	___awmod	;wreg free
  5426  00231E  C080  F08E         	movff	?___awmod,___wmul@multiplier
  5427  002322  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  5428  002326  EC04  F024         	call	___wmul	;wreg free
  5429  00232A  0EB5               	movlw	low __npowers_
  5430  00232C  0100               	movlb	0	; () banked
  5431  00232E  258E               	addwf	?___wmul& (0+255),w,b
  5432  002330  6EF6               	movwf	tblptrl,c
  5433  002332  0EFE               	movlw	high __npowers_
  5434  002334  0100               	movlb	0	; () banked
  5435  002336  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5436  002338  6EF7               	movwf	tblptrh,c
  5437  00233A                     	if	0	;There are less than 3 active tblptr bytes
  5438  00233A                     	endif
  5439  00233A  0009               	tblrd		*+
  5440  00233C  CFF5 F097          	movff	tablat,___ftmul@f2
  5441  002340  0009               	tblrd		*+
  5442  002342  CFF5 F098          	movff	tablat,___ftmul@f2+1
  5443  002346  000A               	tblrd		*-
  5444  002348  CFF5 F099          	movff	tablat,___ftmul@f2+2
  5445  00234C  C0A9  F094         	movff	_fround$1337,___ftmul@f1
  5446  002350  C0AA  F095         	movff	_fround$1337+1,___ftmul@f1+1
  5447  002354  C0AB  F096         	movff	_fround$1337+2,___ftmul@f1+2
  5448  002358  EC43  F018         	call	___ftmul	;wreg free
  5449  00235C  C094  F0A6         	movff	?___ftmul,_fround$1338
  5450  002360  C095  F0A7         	movff	?___ftmul+1,_fround$1338+1
  5451  002364  C096  F0A8         	movff	?___ftmul+2,_fround$1338+2
  5452                           
  5453                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5454  002368  C0A6  F094         	movff	_fround$1338,___ftmul@f1
  5455  00236C  C0A7  F095         	movff	_fround$1338+1,___ftmul@f1+1
  5456  002370  C0A8  F096         	movff	_fround$1338+2,___ftmul@f1+2
  5457  002374  0E00               	movlw	0
  5458  002376  0100               	movlb	0	; () banked
  5459  002378  6F97               	movwf	___ftmul@f2& (0+255),b
  5460  00237A  0E00               	movlw	0
  5461  00237C  0100               	movlb	0	; () banked
  5462  00237E  6F98               	movwf	(___ftmul@f2+1)& (0+255),b
  5463  002380  0E3F               	movlw	63
  5464  002382  0100               	movlb	0	; () banked
  5465  002384  6F99               	movwf	(___ftmul@f2+2)& (0+255),b
  5466  002386  EC43  F018         	call	___ftmul	;wreg free
  5467  00238A  C094  F0A3         	movff	?___ftmul,?_fround
  5468  00238E  C095  F0A4         	movff	?___ftmul+1,?_fround+1
  5469  002392  C096  F0A5         	movff	?___ftmul+2,?_fround+2
  5470  002396  0012               	return	
  5471  002398                     l3998:
  5472                           
  5473                           ;doprnt.c: 415: else if(prec > 10)
  5474  002398  0E0A               	movlw	10
  5475  00239A  0100               	movlb	0	; () banked
  5476  00239C  65AC               	cpfsgt	fround@prec& (0+255),b
  5477  00239E  D06E               	goto	l4006
  5478                           
  5479                           ; BSR set to: 0
  5480                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5481  0023A0  0E00               	movlw	0
  5482  0023A2  0100               	movlb	0	; () banked
  5483  0023A4  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5484  0023A6  0E03               	movlw	3
  5485  0023A8  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5486  0023AA  0E00               	movlw	0
  5487  0023AC  0100               	movlb	0	; () banked
  5488  0023AE  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5489  0023B0  0E0A               	movlw	10
  5490  0023B2  6F82               	movwf	___awmod@divisor& (0+255),b
  5491  0023B4  C0AC  F080         	movff	fround@prec,___awmod@dividend
  5492  0023B8  0100               	movlb	0	; () banked
  5493  0023BA  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  5494  0023BC  EC54  F020         	call	___awmod	;wreg free
  5495  0023C0  C080  F08E         	movff	?___awmod,___wmul@multiplier
  5496  0023C4  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  5497  0023C8  EC04  F024         	call	___wmul	;wreg free
  5498  0023CC  0EB5               	movlw	low __npowers_
  5499  0023CE  0100               	movlb	0	; () banked
  5500  0023D0  258E               	addwf	?___wmul& (0+255),w,b
  5501  0023D2  6EF6               	movwf	tblptrl,c
  5502  0023D4  0EFE               	movlw	high __npowers_
  5503  0023D6  0100               	movlb	0	; () banked
  5504  0023D8  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5505  0023DA  6EF7               	movwf	tblptrh,c
  5506  0023DC                     	if	0	;There are less than 3 active tblptr bytes
  5507  0023DC                     	endif
  5508  0023DC  0009               	tblrd		*+
  5509  0023DE  CFF5 F097          	movff	tablat,___ftmul@f2
  5510  0023E2  0009               	tblrd		*+
  5511  0023E4  CFF5 F098          	movff	tablat,___ftmul@f2+1
  5512  0023E8  000A               	tblrd		*-
  5513  0023EA  CFF5 F099          	movff	tablat,___ftmul@f2+2
  5514  0023EE  0E00               	movlw	0
  5515  0023F0  0100               	movlb	0	; () banked
  5516  0023F2  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  5517  0023F4  0E0A               	movlw	10
  5518  0023F6  6F88               	movwf	___awdiv@divisor& (0+255),b
  5519  0023F8  C0AC  F086         	movff	fround@prec,___awdiv@dividend
  5520  0023FC  0100               	movlb	0	; () banked
  5521  0023FE  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  5522  002400  EC3F  F01E         	call	___awdiv	;wreg free
  5523  002404  0E09               	movlw	9
  5524  002406  0100               	movlb	0	; () banked
  5525  002408  2586               	addwf	?___awdiv& (0+255),w,b
  5526  00240A  0100               	movlb	0	; () banked
  5527  00240C  6F8E               	movwf	___wmul@multiplier& (0+255),b
  5528  00240E  0E00               	movlw	0
  5529  002410  0100               	movlb	0	; () banked
  5530  002412  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  5531  002414  0100               	movlb	0	; () banked
  5532  002416  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5533  002418  0E00               	movlw	0
  5534  00241A  0100               	movlb	0	; () banked
  5535  00241C  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5536  00241E  0E03               	movlw	3
  5537  002420  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5538  002422  EC04  F024         	call	___wmul	;wreg free
  5539  002426  0EB5               	movlw	low __npowers_
  5540  002428  0100               	movlb	0	; () banked
  5541  00242A  258E               	addwf	?___wmul& (0+255),w,b
  5542  00242C  6EF6               	movwf	tblptrl,c
  5543  00242E  0EFE               	movlw	high __npowers_
  5544  002430  0100               	movlb	0	; () banked
  5545  002432  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5546  002434  6EF7               	movwf	tblptrh,c
  5547  002436                     	if	0	;There are less than 3 active tblptr bytes
  5548  002436                     	endif
  5549  002436  0009               	tblrd		*+
  5550  002438  CFF5 F094          	movff	tablat,___ftmul@f1
  5551  00243C  0009               	tblrd		*+
  5552  00243E  CFF5 F095          	movff	tablat,___ftmul@f1+1
  5553  002442  000A               	tblrd		*-
  5554  002444  CFF5 F096          	movff	tablat,___ftmul@f1+2
  5555  002448  EC43  F018         	call	___ftmul	;wreg free
  5556  00244C  C094  F0A9         	movff	?___ftmul,_fround$1337
  5557  002450  C095  F0AA         	movff	?___ftmul+1,_fround$1337+1
  5558  002454  C096  F0AB         	movff	?___ftmul+2,_fround$1337+2
  5559                           
  5560                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5561  002458  C0A9  F094         	movff	_fround$1337,___ftmul@f1
  5562  00245C  C0AA  F095         	movff	_fround$1337+1,___ftmul@f1+1
  5563  002460  C0AB  F096         	movff	_fround$1337+2,___ftmul@f1+2
  5564  002464  0E00               	movlw	0
  5565  002466  0100               	movlb	0	; () banked
  5566  002468  6F97               	movwf	___ftmul@f2& (0+255),b
  5567  00246A  0E00               	movlw	0
  5568  00246C  0100               	movlb	0	; () banked
  5569  00246E  6F98               	movwf	(___ftmul@f2+1)& (0+255),b
  5570  002470  0E3F               	movlw	63
  5571  002472  0100               	movlb	0	; () banked
  5572  002474  6F99               	movwf	(___ftmul@f2+2)& (0+255),b
  5573  002476  EC43  F018         	call	___ftmul	;wreg free
  5574  00247A  D787               	goto	L4
  5575  00247C                     l4006:
  5576                           
  5577                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5578  00247C  0100               	movlb	0	; () banked
  5579  00247E  51AC               	movf	fround@prec& (0+255),w,b
  5580  002480  0D03               	mullw	3
  5581  002482  0EB5               	movlw	low __npowers_
  5582  002484  24F3               	addwf	prodl,w,c
  5583  002486  6EF6               	movwf	tblptrl,c
  5584  002488  0EFE               	movlw	high __npowers_
  5585  00248A  20F4               	addwfc	prodh,w,c
  5586  00248C  6EF7               	movwf	tblptrh,c
  5587  00248E                     	if	0	;There are less than 3 active tblptr bytes
  5588  00248E                     	endif
  5589  00248E  0009               	tblrd		*+
  5590  002490  CFF5 F094          	movff	tablat,___ftmul@f1
  5591  002494  0009               	tblrd		*+
  5592  002496  CFF5 F095          	movff	tablat,___ftmul@f1+1
  5593  00249A  000A               	tblrd		*-
  5594  00249C  CFF5 F096          	movff	tablat,___ftmul@f1+2
  5595  0024A0  0E00               	movlw	0
  5596  0024A2  0100               	movlb	0	; () banked
  5597  0024A4  6F97               	movwf	___ftmul@f2& (0+255),b
  5598  0024A6  0E00               	movlw	0
  5599  0024A8  0100               	movlb	0	; () banked
  5600  0024AA  6F98               	movwf	(___ftmul@f2+1)& (0+255),b
  5601  0024AC  0E3F               	movlw	63
  5602  0024AE  0100               	movlb	0	; () banked
  5603  0024B0  6F99               	movwf	(___ftmul@f2+2)& (0+255),b
  5604  0024B2  EC43  F018         	call	___ftmul	;wreg free
  5605  0024B6  C094  F0A3         	movff	?___ftmul,?_fround
  5606  0024BA  C095  F0A4         	movff	?___ftmul+1,?_fround+1
  5607  0024BE  C096  F0A5         	movff	?___ftmul+2,?_fround+2
  5608  0024C2  0012               	return	
  5609  0024C4                     __end_of_fround:
  5610                           	opt stack 0
  5611                           tblptru	equ	0xFF8
  5612                           tblptrh	equ	0xFF7
  5613                           tblptrl	equ	0xFF6
  5614                           tablat	equ	0xFF5
  5615                           prodh	equ	0xFF4
  5616                           prodl	equ	0xFF3
  5617                           intcon	equ	0xFF2
  5618                           intcon2	equ	0xFF1
  5619                           intcon3	equ	0xFF0
  5620                           postinc0	equ	0xFEE
  5621                           wreg	equ	0xFE8
  5622                           postinc2	equ	0xFDE
  5623                           postdec2	equ	0xFDD
  5624                           fsr2h	equ	0xFDA
  5625                           fsr2l	equ	0xFD9
  5626                           status	equ	0xFD8
  5627                           
  5628 ;; *************** function ___wmul *****************
  5629 ;; Defined at:
  5630 ;;		line 15 in file "/Applications/microchip/xc8/v1.40/sources/common/Umul16.c"
  5631 ;; Parameters:    Size  Location     Type
  5632 ;;  multiplier      2   14[BANK0 ] unsigned int 
  5633 ;;  multiplicand    2   16[BANK0 ] unsigned int 
  5634 ;; Auto vars:     Size  Location     Type
  5635 ;;  product         2   18[BANK0 ] unsigned int 
  5636 ;; Return value:  Size  Location     Type
  5637 ;;                  2   14[BANK0 ] unsigned int 
  5638 ;; Registers used:
  5639 ;;		wreg, status,2, status,0, prodl, prodh
  5640 ;; Tracked objects:
  5641 ;;		On entry : 0/0
  5642 ;;		On exit  : 0/0
  5643 ;;		Unchanged: 0/0
  5644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5645 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5646 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5648 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5649 ;;Total ram usage:        6 bytes
  5650 ;; Hardware stack levels used:    1
  5651 ;; Hardware stack levels required when called:    6
  5652 ;; This function calls:
  5653 ;;		Nothing
  5654 ;; This function is called by:
  5655 ;;		_fround
  5656 ;;		_scale
  5657 ;;		_printf
  5658 ;; This function uses a non-reentrant model
  5659 ;;
  5660                           
  5661                           	psect	text8
  5662  004808                     __ptext8:
  5663                           	opt stack 0
  5664  004808                     ___wmul:
  5665                           	opt stack 21
  5666                           
  5667                           ;incstack = 0
  5668  004808  0100               	movlb	0	; () banked
  5669  00480A  518E               	movf	___wmul@multiplier& (0+255),w,b
  5670  00480C  0100               	movlb	0	; () banked
  5671  00480E  0390               	mulwf	___wmul@multiplicand& (0+255),b
  5672  004810  CFF3 F092          	movff	prodl,___wmul@product
  5673  004814  CFF4 F093          	movff	prodh,___wmul@product+1
  5674  004818  0100               	movlb	0	; () banked
  5675  00481A  518E               	movf	___wmul@multiplier& (0+255),w,b
  5676  00481C  0100               	movlb	0	; () banked
  5677  00481E  0391               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  5678  004820  50F3               	movf	prodl,w,c
  5679  004822  0100               	movlb	0	; () banked
  5680  004824  2793               	addwf	(___wmul@product+1)& (0+255),f,b
  5681  004826  0100               	movlb	0	; () banked
  5682  004828  518F               	movf	(___wmul@multiplier+1)& (0+255),w,b
  5683  00482A  0100               	movlb	0	; () banked
  5684  00482C  0390               	mulwf	___wmul@multiplicand& (0+255),b
  5685  00482E  50F3               	movf	prodl,w,c
  5686  004830  0100               	movlb	0	; () banked
  5687  004832  2793               	addwf	(___wmul@product+1)& (0+255),f,b
  5688                           
  5689                           ; BSR set to: 0
  5690  004834  C092  F08E         	movff	___wmul@product,?___wmul
  5691  004838  C093  F08F         	movff	___wmul@product+1,?___wmul+1
  5692  00483C  0012               	return	
  5693  00483E                     __end_of___wmul:
  5694                           	opt stack 0
  5695                           tblptru	equ	0xFF8
  5696                           tblptrh	equ	0xFF7
  5697                           tblptrl	equ	0xFF6
  5698                           tablat	equ	0xFF5
  5699                           prodh	equ	0xFF4
  5700                           prodl	equ	0xFF3
  5701                           intcon	equ	0xFF2
  5702                           intcon2	equ	0xFF1
  5703                           intcon3	equ	0xFF0
  5704                           postinc0	equ	0xFEE
  5705                           wreg	equ	0xFE8
  5706                           postinc2	equ	0xFDE
  5707                           postdec2	equ	0xFDD
  5708                           fsr2h	equ	0xFDA
  5709                           fsr2l	equ	0xFD9
  5710                           status	equ	0xFD8
  5711                           
  5712 ;; *************** function ___awmod *****************
  5713 ;; Defined at:
  5714 ;;		line 8 in file "/Applications/microchip/xc8/v1.40/sources/common/awmod.c"
  5715 ;; Parameters:    Size  Location     Type
  5716 ;;  dividend        2    0[BANK0 ] int 
  5717 ;;  divisor         2    2[BANK0 ] int 
  5718 ;; Auto vars:     Size  Location     Type
  5719 ;;  sign            1    5[BANK0 ] unsigned char 
  5720 ;;  counter         1    4[BANK0 ] unsigned char 
  5721 ;; Return value:  Size  Location     Type
  5722 ;;                  2    0[BANK0 ] int 
  5723 ;; Registers used:
  5724 ;;		wreg, status,2, status,0
  5725 ;; Tracked objects:
  5726 ;;		On entry : 0/0
  5727 ;;		On exit  : 0/0
  5728 ;;		Unchanged: 0/0
  5729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5730 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5731 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5733 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5734 ;;Total ram usage:        6 bytes
  5735 ;; Hardware stack levels used:    1
  5736 ;; Hardware stack levels required when called:    6
  5737 ;; This function calls:
  5738 ;;		Nothing
  5739 ;; This function is called by:
  5740 ;;		_fround
  5741 ;;		_scale
  5742 ;; This function uses a non-reentrant model
  5743 ;;
  5744                           
  5745                           	psect	text9
  5746  0040A8                     __ptext9:
  5747                           	opt stack 0
  5748  0040A8                     ___awmod:
  5749                           	opt stack 21
  5750                           
  5751                           ; BSR set to: 0
  5752                           ;incstack = 0
  5753  0040A8  0E00               	movlw	0
  5754  0040AA  0100               	movlb	0	; () banked
  5755  0040AC  6F85               	movwf	___awmod@sign& (0+255),b
  5756                           
  5757                           ; BSR set to: 0
  5758  0040AE  0100               	movlb	0	; () banked
  5759  0040B0  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  5760  0040B2  D008               	goto	l3730
  5761                           
  5762                           ; BSR set to: 0
  5763  0040B4  0100               	movlb	0	; () banked
  5764  0040B6  6D80               	negf	___awmod@dividend& (0+255),b
  5765  0040B8  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  5766  0040BA  B0D8               	btfsc	status,0,c
  5767  0040BC  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  5768                           
  5769                           ; BSR set to: 0
  5770  0040BE  0E01               	movlw	1
  5771  0040C0  0100               	movlb	0	; () banked
  5772  0040C2  6F85               	movwf	___awmod@sign& (0+255),b
  5773  0040C4                     l3730:
  5774                           
  5775                           ; BSR set to: 0
  5776  0040C4  0100               	movlb	0	; () banked
  5777  0040C6  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5778  0040C8  D005               	goto	l3734
  5779                           
  5780                           ; BSR set to: 0
  5781  0040CA  0100               	movlb	0	; () banked
  5782  0040CC  6D82               	negf	___awmod@divisor& (0+255),b
  5783  0040CE  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  5784  0040D0  B0D8               	btfsc	status,0,c
  5785  0040D2  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  5786  0040D4                     l3734:
  5787                           
  5788                           ; BSR set to: 0
  5789  0040D4  0100               	movlb	0	; () banked
  5790  0040D6  5182               	movf	___awmod@divisor& (0+255),w,b
  5791  0040D8  0100               	movlb	0	; () banked
  5792  0040DA  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  5793  0040DC  B4D8               	btfsc	status,2,c
  5794  0040DE  D026               	goto	l3750
  5795                           
  5796                           ; BSR set to: 0
  5797  0040E0  0E01               	movlw	1
  5798  0040E2  0100               	movlb	0	; () banked
  5799  0040E4  6F84               	movwf	___awmod@counter& (0+255),b
  5800  0040E6  D006               	goto	l3740
  5801  0040E8                     l3738:
  5802                           
  5803                           ; BSR set to: 0
  5804  0040E8  0100               	movlb	0	; () banked
  5805  0040EA  90D8               	bcf	status,0,c
  5806  0040EC  3782               	rlcf	___awmod@divisor& (0+255),f,b
  5807  0040EE  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  5808  0040F0  0100               	movlb	0	; () banked
  5809  0040F2  2B84               	incf	___awmod@counter& (0+255),f,b
  5810  0040F4                     l3740:
  5811                           
  5812                           ; BSR set to: 0
  5813  0040F4  0100               	movlb	0	; () banked
  5814  0040F6  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5815  0040F8  D7F7               	goto	l3738
  5816  0040FA                     l3742:
  5817                           
  5818                           ; BSR set to: 0
  5819  0040FA  0100               	movlb	0	; () banked
  5820  0040FC  5182               	movf	___awmod@divisor& (0+255),w,b
  5821  0040FE  0100               	movlb	0	; () banked
  5822  004100  5D80               	subwf	___awmod@dividend& (0+255),w,b
  5823  004102  0100               	movlb	0	; () banked
  5824  004104  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  5825  004106  0100               	movlb	0	; () banked
  5826  004108  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  5827  00410A  A0D8               	btfss	status,0,c
  5828  00410C  D008               	goto	l3746
  5829                           
  5830                           ; BSR set to: 0
  5831  00410E  0100               	movlb	0	; () banked
  5832  004110  5182               	movf	___awmod@divisor& (0+255),w,b
  5833  004112  0100               	movlb	0	; () banked
  5834  004114  5F80               	subwf	___awmod@dividend& (0+255),f,b
  5835  004116  0100               	movlb	0	; () banked
  5836  004118  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  5837  00411A  0100               	movlb	0	; () banked
  5838  00411C  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  5839  00411E                     l3746:
  5840                           
  5841                           ; BSR set to: 0
  5842  00411E  0100               	movlb	0	; () banked
  5843  004120  90D8               	bcf	status,0,c
  5844  004122  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  5845  004124  3382               	rrcf	___awmod@divisor& (0+255),f,b
  5846                           
  5847                           ; BSR set to: 0
  5848  004126  0100               	movlb	0	; () banked
  5849  004128  2F84               	decfsz	___awmod@counter& (0+255),f,b
  5850  00412A  D7E7               	goto	l3742
  5851  00412C                     l3750:
  5852                           
  5853                           ; BSR set to: 0
  5854  00412C  0100               	movlb	0	; () banked
  5855  00412E  5185               	movf	___awmod@sign& (0+255),w,b
  5856  004130  0100               	movlb	0	; () banked
  5857  004132  B4D8               	btfsc	status,2,c
  5858  004134  D005               	goto	l3754
  5859                           
  5860                           ; BSR set to: 0
  5861  004136  0100               	movlb	0	; () banked
  5862  004138  6D80               	negf	___awmod@dividend& (0+255),b
  5863  00413A  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  5864  00413C  B0D8               	btfsc	status,0,c
  5865  00413E  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  5866  004140                     l3754:
  5867                           
  5868                           ; BSR set to: 0
  5869  004140  C080  F080         	movff	___awmod@dividend,?___awmod
  5870  004144  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  5871  004148  0012               	return	
  5872  00414A                     __end_of___awmod:
  5873                           	opt stack 0
  5874                           tblptru	equ	0xFF8
  5875                           tblptrh	equ	0xFF7
  5876                           tblptrl	equ	0xFF6
  5877                           tablat	equ	0xFF5
  5878                           prodh	equ	0xFF4
  5879                           prodl	equ	0xFF3
  5880                           intcon	equ	0xFF2
  5881                           intcon2	equ	0xFF1
  5882                           intcon3	equ	0xFF0
  5883                           postinc0	equ	0xFEE
  5884                           wreg	equ	0xFE8
  5885                           postinc2	equ	0xFDE
  5886                           postdec2	equ	0xFDD
  5887                           fsr2h	equ	0xFDA
  5888                           fsr2l	equ	0xFD9
  5889                           status	equ	0xFD8
  5890                           
  5891 ;; *************** function ___awdiv *****************
  5892 ;; Defined at:
  5893 ;;		line 8 in file "/Applications/microchip/xc8/v1.40/sources/common/awdiv.c"
  5894 ;; Parameters:    Size  Location     Type
  5895 ;;  dividend        2    6[BANK0 ] int 
  5896 ;;  divisor         2    8[BANK0 ] int 
  5897 ;; Auto vars:     Size  Location     Type
  5898 ;;  quotient        2   12[BANK0 ] int 
  5899 ;;  sign            1   11[BANK0 ] unsigned char 
  5900 ;;  counter         1   10[BANK0 ] unsigned char 
  5901 ;; Return value:  Size  Location     Type
  5902 ;;                  2    6[BANK0 ] int 
  5903 ;; Registers used:
  5904 ;;		wreg, status,2, status,0
  5905 ;; Tracked objects:
  5906 ;;		On entry : 0/0
  5907 ;;		On exit  : 0/0
  5908 ;;		Unchanged: 0/0
  5909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5910 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5911 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5913 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5914 ;;Total ram usage:        8 bytes
  5915 ;; Hardware stack levels used:    1
  5916 ;; Hardware stack levels required when called:    6
  5917 ;; This function calls:
  5918 ;;		Nothing
  5919 ;; This function is called by:
  5920 ;;		_fround
  5921 ;;		_scale
  5922 ;;		_printf
  5923 ;; This function uses a non-reentrant model
  5924 ;;
  5925                           
  5926                           	psect	text10
  5927  003C7E                     __ptext10:
  5928                           	opt stack 0
  5929  003C7E                     ___awdiv:
  5930                           	opt stack 21
  5931                           
  5932                           ; BSR set to: 0
  5933                           ;incstack = 0
  5934  003C7E  0E00               	movlw	0
  5935  003C80  0100               	movlb	0	; () banked
  5936  003C82  6F8B               	movwf	___awdiv@sign& (0+255),b
  5937                           
  5938                           ; BSR set to: 0
  5939  003C84  0100               	movlb	0	; () banked
  5940  003C86  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5941  003C88  D008               	goto	l3686
  5942                           
  5943                           ; BSR set to: 0
  5944  003C8A  0100               	movlb	0	; () banked
  5945  003C8C  6D88               	negf	___awdiv@divisor& (0+255),b
  5946  003C8E  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  5947  003C90  B0D8               	btfsc	status,0,c
  5948  003C92  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  5949                           
  5950                           ; BSR set to: 0
  5951  003C94  0E01               	movlw	1
  5952  003C96  0100               	movlb	0	; () banked
  5953  003C98  6F8B               	movwf	___awdiv@sign& (0+255),b
  5954  003C9A                     l3686:
  5955                           
  5956                           ; BSR set to: 0
  5957  003C9A  0100               	movlb	0	; () banked
  5958  003C9C  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  5959  003C9E  D008               	goto	l3692
  5960                           
  5961                           ; BSR set to: 0
  5962  003CA0  0100               	movlb	0	; () banked
  5963  003CA2  6D86               	negf	___awdiv@dividend& (0+255),b
  5964  003CA4  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  5965  003CA6  B0D8               	btfsc	status,0,c
  5966  003CA8  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  5967                           
  5968                           ; BSR set to: 0
  5969  003CAA  0E01               	movlw	1
  5970  003CAC  0100               	movlb	0	; () banked
  5971  003CAE  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  5972  003CB0                     l3692:
  5973                           
  5974                           ; BSR set to: 0
  5975  003CB0  0E00               	movlw	0
  5976  003CB2  0100               	movlb	0	; () banked
  5977  003CB4  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  5978  003CB6  0E00               	movlw	0
  5979  003CB8  6F8C               	movwf	___awdiv@quotient& (0+255),b
  5980                           
  5981                           ; BSR set to: 0
  5982  003CBA  0100               	movlb	0	; () banked
  5983  003CBC  5188               	movf	___awdiv@divisor& (0+255),w,b
  5984  003CBE  0100               	movlb	0	; () banked
  5985  003CC0  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  5986  003CC2  B4D8               	btfsc	status,2,c
  5987  003CC4  D02C               	goto	l3714
  5988                           
  5989                           ; BSR set to: 0
  5990  003CC6  0E01               	movlw	1
  5991  003CC8  0100               	movlb	0	; () banked
  5992  003CCA  6F8A               	movwf	___awdiv@counter& (0+255),b
  5993  003CCC  D006               	goto	l3700
  5994  003CCE                     l3698:
  5995                           
  5996                           ; BSR set to: 0
  5997  003CCE  0100               	movlb	0	; () banked
  5998  003CD0  90D8               	bcf	status,0,c
  5999  003CD2  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  6000  003CD4  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  6001  003CD6  0100               	movlb	0	; () banked
  6002  003CD8  2B8A               	incf	___awdiv@counter& (0+255),f,b
  6003  003CDA                     l3700:
  6004                           
  6005                           ; BSR set to: 0
  6006  003CDA  0100               	movlb	0	; () banked
  6007  003CDC  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6008  003CDE  D7F7               	goto	l3698
  6009  003CE0                     l3702:
  6010                           
  6011                           ; BSR set to: 0
  6012  003CE0  0100               	movlb	0	; () banked
  6013  003CE2  90D8               	bcf	status,0,c
  6014  003CE4  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  6015  003CE6  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  6016                           
  6017                           ; BSR set to: 0
  6018  003CE8  0100               	movlb	0	; () banked
  6019  003CEA  5188               	movf	___awdiv@divisor& (0+255),w,b
  6020  003CEC  0100               	movlb	0	; () banked
  6021  003CEE  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  6022  003CF0  0100               	movlb	0	; () banked
  6023  003CF2  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6024  003CF4  0100               	movlb	0	; () banked
  6025  003CF6  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  6026  003CF8  A0D8               	btfss	status,0,c
  6027  003CFA  D00A               	goto	l3710
  6028                           
  6029                           ; BSR set to: 0
  6030  003CFC  0100               	movlb	0	; () banked
  6031  003CFE  5188               	movf	___awdiv@divisor& (0+255),w,b
  6032  003D00  0100               	movlb	0	; () banked
  6033  003D02  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  6034  003D04  0100               	movlb	0	; () banked
  6035  003D06  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6036  003D08  0100               	movlb	0	; () banked
  6037  003D0A  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  6038                           
  6039                           ; BSR set to: 0
  6040  003D0C  0100               	movlb	0	; () banked
  6041  003D0E  818C               	bsf	___awdiv@quotient& (0+255),0,b
  6042  003D10                     l3710:
  6043                           
  6044                           ; BSR set to: 0
  6045  003D10  0100               	movlb	0	; () banked
  6046  003D12  90D8               	bcf	status,0,c
  6047  003D14  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  6048  003D16  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  6049                           
  6050                           ; BSR set to: 0
  6051  003D18  0100               	movlb	0	; () banked
  6052  003D1A  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  6053  003D1C  D7E1               	goto	l3702
  6054  003D1E                     l3714:
  6055                           
  6056                           ; BSR set to: 0
  6057  003D1E  0100               	movlb	0	; () banked
  6058  003D20  518B               	movf	___awdiv@sign& (0+255),w,b
  6059  003D22  0100               	movlb	0	; () banked
  6060  003D24  B4D8               	btfsc	status,2,c
  6061  003D26  D005               	goto	l3718
  6062                           
  6063                           ; BSR set to: 0
  6064  003D28  0100               	movlb	0	; () banked
  6065  003D2A  6D8C               	negf	___awdiv@quotient& (0+255),b
  6066  003D2C  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  6067  003D2E  B0D8               	btfsc	status,0,c
  6068  003D30  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  6069  003D32                     l3718:
  6070                           
  6071                           ; BSR set to: 0
  6072  003D32  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  6073  003D36  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  6074  003D3A  0012               	return	
  6075  003D3C                     __end_of___awdiv:
  6076                           	opt stack 0
  6077                           tblptru	equ	0xFF8
  6078                           tblptrh	equ	0xFF7
  6079                           tblptrl	equ	0xFF6
  6080                           tablat	equ	0xFF5
  6081                           prodh	equ	0xFF4
  6082                           prodl	equ	0xFF3
  6083                           intcon	equ	0xFF2
  6084                           intcon2	equ	0xFF1
  6085                           intcon3	equ	0xFF0
  6086                           postinc0	equ	0xFEE
  6087                           wreg	equ	0xFE8
  6088                           postinc2	equ	0xFDE
  6089                           postdec2	equ	0xFDD
  6090                           fsr2h	equ	0xFDA
  6091                           fsr2l	equ	0xFD9
  6092                           status	equ	0xFD8
  6093                           
  6094 ;; *************** function __tdiv_to_l_ *****************
  6095 ;; Defined at:
  6096 ;;		line 60 in file "/Applications/microchip/xc8/v1.40/sources/common/ftdivl.c"
  6097 ;; Parameters:    Size  Location     Type
  6098 ;;  f1              3    0[BANK0 ] float 
  6099 ;;  f2              3    3[BANK0 ] float 
  6100 ;; Auto vars:     Size  Location     Type
  6101 ;;  quot            4    9[BANK0 ] unsigned long 
  6102 ;;  exp1            1   14[BANK0 ] unsigned char 
  6103 ;;  cntr            1   13[BANK0 ] unsigned char 
  6104 ;; Return value:  Size  Location     Type
  6105 ;;                  4    0[BANK0 ] unsigned long 
  6106 ;; Registers used:
  6107 ;;		wreg, status,2, status,0
  6108 ;; Tracked objects:
  6109 ;;		On entry : 0/0
  6110 ;;		On exit  : 0/0
  6111 ;;		Unchanged: 0/0
  6112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6113 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6114 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6115 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6116 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6117 ;;Total ram usage:       15 bytes
  6118 ;; Hardware stack levels used:    1
  6119 ;; Hardware stack levels required when called:    6
  6120 ;; This function calls:
  6121 ;;		Nothing
  6122 ;; This function is called by:
  6123 ;;		_printf
  6124 ;; This function uses a non-reentrant model
  6125 ;;
  6126                           
  6127                           	psect	text11
  6128  002D60                     __ptext11:
  6129                           	opt stack 0
  6130  002D60                     __tdiv_to_l_:
  6131                           	opt stack 22
  6132                           
  6133                           ; BSR set to: 0
  6134                           ;incstack = 0
  6135  002D60  C082  F086         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  6136  002D64  0100               	movlb	0	; () banked
  6137  002D66  6B87               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  6138  002D68  6B88               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  6139  002D6A  0100               	movlb	0	; () banked
  6140  002D6C  3581               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
  6141  002D6E  0100               	movlb	0	; () banked
  6142  002D70  3786               	rlcf	??__tdiv_to_l_& (0+255),f,b
  6143  002D72  E301               	bnc	u4481
  6144  002D74  8187               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  6145  002D76                     u4481:
  6146  002D76  0100               	movlb	0	; () banked
  6147  002D78  5186               	movf	??__tdiv_to_l_& (0+255),w,b
  6148  002D7A  0100               	movlb	0	; () banked
  6149  002D7C  6F8E               	movwf	__tdiv_to_l_@exp1& (0+255),b
  6150  002D7E  0100               	movlb	0	; () banked
  6151  002D80  518E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  6152  002D82  A4D8               	btfss	status,2,c
  6153  002D84  D00A               	goto	l4066
  6154                           
  6155                           ; BSR set to: 0
  6156  002D86  0E00               	movlw	0
  6157  002D88  0100               	movlb	0	; () banked
  6158  002D8A  6F80               	movwf	?__tdiv_to_l_& (0+255),b
  6159  002D8C  0E00               	movlw	0
  6160  002D8E  6F81               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  6161  002D90  0E00               	movlw	0
  6162  002D92  6F82               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  6163  002D94  0E00               	movlw	0
  6164  002D96  6F83               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  6165                           
  6166                           ; BSR set to: 0
  6167  002D98  0012               	return	
  6168  002D9A                     l4066:
  6169                           
  6170                           ; BSR set to: 0
  6171  002D9A  C085  F086         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  6172  002D9E  0100               	movlb	0	; () banked
  6173  002DA0  6B87               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  6174  002DA2  6B88               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  6175  002DA4  0100               	movlb	0	; () banked
  6176  002DA6  3584               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  6177  002DA8  0100               	movlb	0	; () banked
  6178  002DAA  3786               	rlcf	??__tdiv_to_l_& (0+255),f,b
  6179  002DAC  E301               	bnc	u4501
  6180  002DAE  8187               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  6181  002DB0                     u4501:
  6182  002DB0  0100               	movlb	0	; () banked
  6183  002DB2  5186               	movf	??__tdiv_to_l_& (0+255),w,b
  6184  002DB4  0100               	movlb	0	; () banked
  6185  002DB6  6F8D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  6186  002DB8  0100               	movlb	0	; () banked
  6187  002DBA  518D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  6188  002DBC  A4D8               	btfss	status,2,c
  6189  002DBE  D00A               	goto	l4072
  6190                           
  6191                           ; BSR set to: 0
  6192  002DC0  0E00               	movlw	0
  6193  002DC2  0100               	movlb	0	; () banked
  6194  002DC4  6F80               	movwf	?__tdiv_to_l_& (0+255),b
  6195  002DC6  0E00               	movlw	0
  6196  002DC8  6F81               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  6197  002DCA  0E00               	movlw	0
  6198  002DCC  6F82               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  6199  002DCE  0E00               	movlw	0
  6200  002DD0  6F83               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  6201                           
  6202                           ; BSR set to: 0
  6203  002DD2  0012               	return	
  6204  002DD4                     l4072:
  6205                           
  6206                           ; BSR set to: 0
  6207  002DD4  0100               	movlb	0	; () banked
  6208  002DD6  8F81               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
  6209                           
  6210                           ; BSR set to: 0
  6211  002DD8  0EFF               	movlw	255
  6212  002DDA  0100               	movlb	0	; () banked
  6213  002DDC  1780               	andwf	__tdiv_to_l_@f1& (0+255),f,b
  6214  002DDE  0EFF               	movlw	255
  6215  002DE0  0100               	movlb	0	; () banked
  6216  002DE2  1781               	andwf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  6217  002DE4  0E00               	movlw	0
  6218  002DE6  0100               	movlb	0	; () banked
  6219  002DE8  1782               	andwf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  6220  002DEA  0100               	movlb	0	; () banked
  6221  002DEC  8F84               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
  6222                           
  6223                           ; BSR set to: 0
  6224  002DEE  0EFF               	movlw	255
  6225  002DF0  0100               	movlb	0	; () banked
  6226  002DF2  1783               	andwf	__tdiv_to_l_@f2& (0+255),f,b
  6227  002DF4  0EFF               	movlw	255
  6228  002DF6  0100               	movlb	0	; () banked
  6229  002DF8  1784               	andwf	(__tdiv_to_l_@f2+1)& (0+255),f,b
  6230  002DFA  0E00               	movlw	0
  6231  002DFC  0100               	movlb	0	; () banked
  6232  002DFE  1785               	andwf	(__tdiv_to_l_@f2+2)& (0+255),f,b
  6233                           
  6234                           ; BSR set to: 0
  6235  002E00  0E00               	movlw	0
  6236  002E02  0100               	movlb	0	; () banked
  6237  002E04  6F89               	movwf	__tdiv_to_l_@quot& (0+255),b
  6238  002E06  0E00               	movlw	0
  6239  002E08  6F8A               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
  6240  002E0A  0E00               	movlw	0
  6241  002E0C  6F8B               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
  6242  002E0E  0E00               	movlw	0
  6243  002E10  6F8C               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
  6244                           
  6245                           ; BSR set to: 0
  6246  002E12  0E7F               	movlw	127
  6247  002E14  0100               	movlb	0	; () banked
  6248  002E16  5F8E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  6249                           
  6250                           ; BSR set to: 0
  6251  002E18  0100               	movlb	0	; () banked
  6252  002E1A  518D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  6253  002E1C  0F98               	addlw	152
  6254  002E1E  0100               	movlb	0	; () banked
  6255  002E20  5F8E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  6256                           
  6257                           ; BSR set to: 0
  6258  002E22  0E18               	movlw	24
  6259  002E24  0100               	movlb	0	; () banked
  6260  002E26  6F8D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  6261  002E28                     l830:
  6262                           
  6263                           ; BSR set to: 0
  6264  002E28  0100               	movlb	0	; () banked
  6265  002E2A  90D8               	bcf	status,0,c
  6266  002E2C  3789               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  6267  002E2E  378A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  6268  002E30  378B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  6269  002E32  378C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  6270                           
  6271                           ; BSR set to: 0
  6272  002E34  0100               	movlb	0	; () banked
  6273  002E36  5183               	movf	__tdiv_to_l_@f2& (0+255),w,b
  6274  002E38  0100               	movlb	0	; () banked
  6275  002E3A  5D80               	subwf	__tdiv_to_l_@f1& (0+255),w,b
  6276  002E3C  0100               	movlb	0	; () banked
  6277  002E3E  5184               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  6278  002E40  0100               	movlb	0	; () banked
  6279  002E42  5981               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
  6280  002E44  0100               	movlb	0	; () banked
  6281  002E46  5185               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  6282  002E48  0100               	movlb	0	; () banked
  6283  002E4A  5982               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
  6284  002E4C  A0D8               	btfss	status,0,c
  6285  002E4E  D00E               	goto	l831
  6286                           
  6287                           ; BSR set to: 0
  6288  002E50  0100               	movlb	0	; () banked
  6289  002E52  5183               	movf	__tdiv_to_l_@f2& (0+255),w,b
  6290  002E54  0100               	movlb	0	; () banked
  6291  002E56  5F80               	subwf	__tdiv_to_l_@f1& (0+255),f,b
  6292  002E58  0100               	movlb	0	; () banked
  6293  002E5A  5184               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  6294  002E5C  0100               	movlb	0	; () banked
  6295  002E5E  5B81               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
  6296  002E60  0100               	movlb	0	; () banked
  6297  002E62  5185               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  6298  002E64  0100               	movlb	0	; () banked
  6299  002E66  5B82               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
  6300                           
  6301                           ; BSR set to: 0
  6302  002E68  0100               	movlb	0	; () banked
  6303  002E6A  8189               	bsf	__tdiv_to_l_@quot& (0+255),0,b
  6304  002E6C                     l831:
  6305                           
  6306                           ; BSR set to: 0
  6307  002E6C  0100               	movlb	0	; () banked
  6308  002E6E  90D8               	bcf	status,0,c
  6309  002E70  3780               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
  6310  002E72  3781               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  6311  002E74  3782               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  6312                           
  6313                           ; BSR set to: 0
  6314  002E76  0100               	movlb	0	; () banked
  6315  002E78  2F8D               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
  6316  002E7A  D7D6               	goto	l830
  6317                           
  6318                           ; BSR set to: 0
  6319                           
  6320                           ; BSR set to: 0
  6321  002E7C  0100               	movlb	0	; () banked
  6322  002E7E  AF8E               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
  6323  002E80  D01A               	goto	l4106
  6324                           
  6325                           ; BSR set to: 0
  6326  002E82  0100               	movlb	0	; () banked
  6327  002E84  518E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  6328  002E86  0A80               	xorlw	128
  6329  002E88  0F97               	addlw	151
  6330  002E8A  B0D8               	btfsc	status,0,c
  6331  002E8C  D00A               	goto	l4102
  6332                           
  6333                           ; BSR set to: 0
  6334  002E8E  0E00               	movlw	0
  6335  002E90  0100               	movlb	0	; () banked
  6336  002E92  6F80               	movwf	?__tdiv_to_l_& (0+255),b
  6337  002E94  0E00               	movlw	0
  6338  002E96  6F81               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  6339  002E98  0E00               	movlw	0
  6340  002E9A  6F82               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  6341  002E9C  0E00               	movlw	0
  6342  002E9E  6F83               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  6343                           
  6344                           ; BSR set to: 0
  6345  002EA0  0012               	return	
  6346  002EA2                     l4102:
  6347                           
  6348                           ; BSR set to: 0
  6349  002EA2  0100               	movlb	0	; () banked
  6350  002EA4  90D8               	bcf	status,0,c
  6351  002EA6  338C               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  6352  002EA8  338B               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  6353  002EAA  338A               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  6354  002EAC  3389               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
  6355                           
  6356                           ; BSR set to: 0
  6357  002EAE  0100               	movlb	0	; () banked
  6358  002EB0  3F8E               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
  6359  002EB2  D7F7               	goto	l4102
  6360                           
  6361                           ; BSR set to: 0
  6362  002EB4  D01B               	goto	l837
  6363  002EB6                     l4106:
  6364                           
  6365                           ; BSR set to: 0
  6366  002EB6  0E17               	movlw	23
  6367  002EB8  0100               	movlb	0	; () banked
  6368  002EBA  658E               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
  6369  002EBC  D012               	goto	l4114
  6370                           
  6371                           ; BSR set to: 0
  6372  002EBE  0E00               	movlw	0
  6373  002EC0  0100               	movlb	0	; () banked
  6374  002EC2  6F80               	movwf	?__tdiv_to_l_& (0+255),b
  6375  002EC4  0E00               	movlw	0
  6376  002EC6  6F81               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  6377  002EC8  0E00               	movlw	0
  6378  002ECA  6F82               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  6379  002ECC  0E00               	movlw	0
  6380  002ECE  6F83               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  6381                           
  6382                           ; BSR set to: 0
  6383  002ED0  0012               	return	
  6384  002ED2                     l4112:
  6385                           
  6386                           ; BSR set to: 0
  6387  002ED2  0100               	movlb	0	; () banked
  6388  002ED4  90D8               	bcf	status,0,c
  6389  002ED6  3789               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  6390  002ED8  378A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  6391  002EDA  378B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  6392  002EDC  378C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  6393  002EDE  0100               	movlb	0	; () banked
  6394  002EE0  078E               	decf	__tdiv_to_l_@exp1& (0+255),f,b
  6395  002EE2                     l4114:
  6396                           
  6397                           ; BSR set to: 0
  6398  002EE2  0100               	movlb	0	; () banked
  6399  002EE4  518E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  6400  002EE6  0100               	movlb	0	; () banked
  6401  002EE8  A4D8               	btfss	status,2,c
  6402  002EEA  D7F3               	goto	l4112
  6403  002EEC                     l837:
  6404                           
  6405                           ; BSR set to: 0
  6406  002EEC  C089  F080         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  6407  002EF0  C08A  F081         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  6408  002EF4  C08B  F082         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  6409  002EF8  C08C  F083         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  6410                           
  6411                           ; BSR set to: 0
  6412  002EFC  0012               	return		;funcret
  6413  002EFE                     __end_of__tdiv_to_l_:
  6414                           	opt stack 0
  6415                           tblptru	equ	0xFF8
  6416                           tblptrh	equ	0xFF7
  6417                           tblptrl	equ	0xFF6
  6418                           tablat	equ	0xFF5
  6419                           prodh	equ	0xFF4
  6420                           prodl	equ	0xFF3
  6421                           intcon	equ	0xFF2
  6422                           intcon2	equ	0xFF1
  6423                           intcon3	equ	0xFF0
  6424                           postinc0	equ	0xFEE
  6425                           wreg	equ	0xFE8
  6426                           postinc2	equ	0xFDE
  6427                           postdec2	equ	0xFDD
  6428                           fsr2h	equ	0xFDA
  6429                           fsr2l	equ	0xFD9
  6430                           status	equ	0xFD8
  6431                           
  6432 ;; *************** function __div_to_l_ *****************
  6433 ;; Defined at:
  6434 ;;		line 60 in file "/Applications/microchip/xc8/v1.40/sources/common/fldivl.c"
  6435 ;; Parameters:    Size  Location     Type
  6436 ;;  f1              3    0[BANK0 ] unsigned long 
  6437 ;;  f2              3    3[BANK0 ] unsigned long 
  6438 ;; Auto vars:     Size  Location     Type
  6439 ;;  quot            4    6[BANK0 ] unsigned long 
  6440 ;;  exp1            1   11[BANK0 ] unsigned char 
  6441 ;;  cntr            1   10[BANK0 ] unsigned char 
  6442 ;; Return value:  Size  Location     Type
  6443 ;;                  4    0[BANK0 ] unsigned long 
  6444 ;; Registers used:
  6445 ;;		wreg, status,2, status,0
  6446 ;; Tracked objects:
  6447 ;;		On entry : 0/0
  6448 ;;		On exit  : 0/0
  6449 ;;		Unchanged: 0/0
  6450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6451 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6452 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6454 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6455 ;;Total ram usage:       12 bytes
  6456 ;; Hardware stack levels used:    1
  6457 ;; Hardware stack levels required when called:    6
  6458 ;; This function calls:
  6459 ;;		Nothing
  6460 ;; This function is called by:
  6461 ;;		_printf
  6462 ;; This function uses a non-reentrant model
  6463 ;;
  6464                           
  6465                           	psect	text12
  6466  002EFE                     __ptext12:
  6467                           	opt stack 0
  6468  002EFE                     __div_to_l_:
  6469                           	opt stack 22
  6470                           
  6471                           ; BSR set to: 0
  6472                           ;incstack = 0
  6473  002EFE  0100               	movlb	0	; () banked
  6474  002F00  3582               	rlcf	(__div_to_l_@f1+2)& (0+255),w,b
  6475  002F02  3583               	rlcf	(__div_to_l_@f1+3)& (0+255),w,b
  6476  002F04  0100               	movlb	0	; () banked
  6477  002F06  6F8B               	movwf	__div_to_l_@exp1& (0+255),b
  6478  002F08  0100               	movlb	0	; () banked
  6479  002F0A  518B               	movf	__div_to_l_@exp1& (0+255),w,b
  6480  002F0C  A4D8               	btfss	status,2,c
  6481  002F0E  D00A               	goto	l4122
  6482                           
  6483                           ; BSR set to: 0
  6484  002F10  0E00               	movlw	0
  6485  002F12  0100               	movlb	0	; () banked
  6486  002F14  6F80               	movwf	?__div_to_l_& (0+255),b
  6487  002F16  0E00               	movlw	0
  6488  002F18  6F81               	movwf	(?__div_to_l_+1)& (0+255),b
  6489  002F1A  0E00               	movlw	0
  6490  002F1C  6F82               	movwf	(?__div_to_l_+2)& (0+255),b
  6491  002F1E  0E00               	movlw	0
  6492  002F20  6F83               	movwf	(?__div_to_l_+3)& (0+255),b
  6493                           
  6494                           ; BSR set to: 0
  6495  002F22  0012               	return	
  6496  002F24                     l4122:
  6497                           
  6498                           ; BSR set to: 0
  6499  002F24  0100               	movlb	0	; () banked
  6500  002F26  3585               	rlcf	(__div_to_l_@f2+2)& (0+255),w,b
  6501  002F28  3586               	rlcf	(__div_to_l_@f2+3)& (0+255),w,b
  6502  002F2A  0100               	movlb	0	; () banked
  6503  002F2C  6F8A               	movwf	__div_to_l_@cntr& (0+255),b
  6504  002F2E  0100               	movlb	0	; () banked
  6505  002F30  518A               	movf	__div_to_l_@cntr& (0+255),w,b
  6506  002F32  A4D8               	btfss	status,2,c
  6507  002F34  D00A               	goto	l4128
  6508                           
  6509                           ; BSR set to: 0
  6510  002F36  0E00               	movlw	0
  6511  002F38  0100               	movlb	0	; () banked
  6512  002F3A  6F80               	movwf	?__div_to_l_& (0+255),b
  6513  002F3C  0E00               	movlw	0
  6514  002F3E  6F81               	movwf	(?__div_to_l_+1)& (0+255),b
  6515  002F40  0E00               	movlw	0
  6516  002F42  6F82               	movwf	(?__div_to_l_+2)& (0+255),b
  6517  002F44  0E00               	movlw	0
  6518  002F46  6F83               	movwf	(?__div_to_l_+3)& (0+255),b
  6519                           
  6520                           ; BSR set to: 0
  6521  002F48  0012               	return	
  6522  002F4A                     l4128:
  6523                           
  6524                           ; BSR set to: 0
  6525  002F4A  0100               	movlb	0	; () banked
  6526  002F4C  8F82               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
  6527                           
  6528                           ; BSR set to: 0
  6529  002F4E  0EFF               	movlw	255
  6530  002F50  0100               	movlb	0	; () banked
  6531  002F52  1780               	andwf	__div_to_l_@f1& (0+255),f,b
  6532  002F54  0EFF               	movlw	255
  6533  002F56  1781               	andwf	(__div_to_l_@f1+1)& (0+255),f,b
  6534  002F58  0EFF               	movlw	255
  6535  002F5A  1782               	andwf	(__div_to_l_@f1+2)& (0+255),f,b
  6536  002F5C  0E00               	movlw	0
  6537  002F5E  1783               	andwf	(__div_to_l_@f1+3)& (0+255),f,b
  6538                           
  6539                           ; BSR set to: 0
  6540  002F60  0100               	movlb	0	; () banked
  6541  002F62  8F85               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
  6542  002F64  0EFF               	movlw	255
  6543  002F66  0100               	movlb	0	; () banked
  6544  002F68  1783               	andwf	__div_to_l_@f2& (0+255),f,b
  6545  002F6A  0EFF               	movlw	255
  6546  002F6C  1784               	andwf	(__div_to_l_@f2+1)& (0+255),f,b
  6547  002F6E  0EFF               	movlw	255
  6548  002F70  1785               	andwf	(__div_to_l_@f2+2)& (0+255),f,b
  6549  002F72  0E00               	movlw	0
  6550  002F74  1786               	andwf	(__div_to_l_@f2+3)& (0+255),f,b
  6551                           
  6552                           ; BSR set to: 0
  6553  002F76  0E00               	movlw	0
  6554  002F78  0100               	movlb	0	; () banked
  6555  002F7A  6F86               	movwf	__div_to_l_@quot& (0+255),b
  6556  002F7C  0E00               	movlw	0
  6557  002F7E  6F87               	movwf	(__div_to_l_@quot+1)& (0+255),b
  6558  002F80  0E00               	movlw	0
  6559  002F82  6F88               	movwf	(__div_to_l_@quot+2)& (0+255),b
  6560  002F84  0E00               	movlw	0
  6561  002F86  6F89               	movwf	(__div_to_l_@quot+3)& (0+255),b
  6562                           
  6563                           ; BSR set to: 0
  6564  002F88  0E7F               	movlw	127
  6565  002F8A  0100               	movlb	0	; () banked
  6566  002F8C  5F8B               	subwf	__div_to_l_@exp1& (0+255),f,b
  6567                           
  6568                           ; BSR set to: 0
  6569  002F8E  0100               	movlb	0	; () banked
  6570  002F90  518A               	movf	__div_to_l_@cntr& (0+255),w,b
  6571  002F92  0FA0               	addlw	160
  6572  002F94  0100               	movlb	0	; () banked
  6573  002F96  5F8B               	subwf	__div_to_l_@exp1& (0+255),f,b
  6574                           
  6575                           ; BSR set to: 0
  6576  002F98  0E20               	movlw	32
  6577  002F9A  0100               	movlb	0	; () banked
  6578  002F9C  6F8A               	movwf	__div_to_l_@cntr& (0+255),b
  6579  002F9E                     l4142:
  6580                           
  6581                           ; BSR set to: 0
  6582  002F9E  0100               	movlb	0	; () banked
  6583  002FA0  90D8               	bcf	status,0,c
  6584  002FA2  3786               	rlcf	__div_to_l_@quot& (0+255),f,b
  6585  002FA4  3787               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  6586  002FA6  3788               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  6587  002FA8  3789               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  6588                           
  6589                           ; BSR set to: 0
  6590  002FAA  0100               	movlb	0	; () banked
  6591  002FAC  5183               	movf	__div_to_l_@f2& (0+255),w,b
  6592  002FAE  0100               	movlb	0	; () banked
  6593  002FB0  5D80               	subwf	__div_to_l_@f1& (0+255),w,b
  6594  002FB2  0100               	movlb	0	; () banked
  6595  002FB4  5184               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  6596  002FB6  0100               	movlb	0	; () banked
  6597  002FB8  5981               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
  6598  002FBA  0100               	movlb	0	; () banked
  6599  002FBC  5185               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  6600  002FBE  0100               	movlb	0	; () banked
  6601  002FC0  5982               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
  6602  002FC2  0100               	movlb	0	; () banked
  6603  002FC4  5186               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  6604  002FC6  0100               	movlb	0	; () banked
  6605  002FC8  5983               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
  6606  002FCA  A0D8               	btfss	status,0,c
  6607  002FCC  D012               	goto	l4150
  6608                           
  6609                           ; BSR set to: 0
  6610  002FCE  0100               	movlb	0	; () banked
  6611  002FD0  5183               	movf	__div_to_l_@f2& (0+255),w,b
  6612  002FD2  0100               	movlb	0	; () banked
  6613  002FD4  5F80               	subwf	__div_to_l_@f1& (0+255),f,b
  6614  002FD6  0100               	movlb	0	; () banked
  6615  002FD8  5184               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  6616  002FDA  0100               	movlb	0	; () banked
  6617  002FDC  5B81               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
  6618  002FDE  0100               	movlb	0	; () banked
  6619  002FE0  5185               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  6620  002FE2  0100               	movlb	0	; () banked
  6621  002FE4  5B82               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
  6622  002FE6  0100               	movlb	0	; () banked
  6623  002FE8  5186               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  6624  002FEA  0100               	movlb	0	; () banked
  6625  002FEC  5B83               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
  6626                           
  6627                           ; BSR set to: 0
  6628  002FEE  0100               	movlb	0	; () banked
  6629  002FF0  8186               	bsf	__div_to_l_@quot& (0+255),0,b
  6630  002FF2                     l4150:
  6631                           
  6632                           ; BSR set to: 0
  6633  002FF2  0100               	movlb	0	; () banked
  6634  002FF4  90D8               	bcf	status,0,c
  6635  002FF6  3780               	rlcf	__div_to_l_@f1& (0+255),f,b
  6636  002FF8  3781               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
  6637  002FFA  3782               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
  6638  002FFC  3783               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
  6639                           
  6640                           ; BSR set to: 0
  6641  002FFE  0100               	movlb	0	; () banked
  6642  003000  2F8A               	decfsz	__div_to_l_@cntr& (0+255),f,b
  6643  003002  D7CD               	goto	l4142
  6644                           
  6645                           ; BSR set to: 0
  6646                           
  6647                           ; BSR set to: 0
  6648  003004  0100               	movlb	0	; () banked
  6649  003006  AF8B               	btfss	__div_to_l_@exp1& (0+255),7,b
  6650  003008  D01A               	goto	l4166
  6651                           
  6652                           ; BSR set to: 0
  6653  00300A  0100               	movlb	0	; () banked
  6654  00300C  518B               	movf	__div_to_l_@exp1& (0+255),w,b
  6655  00300E  0A80               	xorlw	128
  6656  003010  0F9F               	addlw	159
  6657  003012  B0D8               	btfsc	status,0,c
  6658  003014  D00A               	goto	l4162
  6659                           
  6660                           ; BSR set to: 0
  6661  003016  0E00               	movlw	0
  6662  003018  0100               	movlb	0	; () banked
  6663  00301A  6F80               	movwf	?__div_to_l_& (0+255),b
  6664  00301C  0E00               	movlw	0
  6665  00301E  6F81               	movwf	(?__div_to_l_+1)& (0+255),b
  6666  003020  0E00               	movlw	0
  6667  003022  6F82               	movwf	(?__div_to_l_+2)& (0+255),b
  6668  003024  0E00               	movlw	0
  6669  003026  6F83               	movwf	(?__div_to_l_+3)& (0+255),b
  6670                           
  6671                           ; BSR set to: 0
  6672  003028  0012               	return	
  6673  00302A                     l4162:
  6674                           
  6675                           ; BSR set to: 0
  6676  00302A  0100               	movlb	0	; () banked
  6677  00302C  90D8               	bcf	status,0,c
  6678  00302E  3389               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
  6679  003030  3388               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
  6680  003032  3387               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
  6681  003034  3386               	rrcf	__div_to_l_@quot& (0+255),f,b
  6682                           
  6683                           ; BSR set to: 0
  6684  003036  0100               	movlb	0	; () banked
  6685  003038  3F8B               	incfsz	__div_to_l_@exp1& (0+255),f,b
  6686  00303A  D7F7               	goto	l4162
  6687                           
  6688                           ; BSR set to: 0
  6689  00303C  D01B               	goto	l733
  6690  00303E                     l4166:
  6691                           
  6692                           ; BSR set to: 0
  6693  00303E  0E1F               	movlw	31
  6694  003040  0100               	movlb	0	; () banked
  6695  003042  658B               	cpfsgt	__div_to_l_@exp1& (0+255),b
  6696  003044  D012               	goto	l4174
  6697                           
  6698                           ; BSR set to: 0
  6699  003046  0E00               	movlw	0
  6700  003048  0100               	movlb	0	; () banked
  6701  00304A  6F80               	movwf	?__div_to_l_& (0+255),b
  6702  00304C  0E00               	movlw	0
  6703  00304E  6F81               	movwf	(?__div_to_l_+1)& (0+255),b
  6704  003050  0E00               	movlw	0
  6705  003052  6F82               	movwf	(?__div_to_l_+2)& (0+255),b
  6706  003054  0E00               	movlw	0
  6707  003056  6F83               	movwf	(?__div_to_l_+3)& (0+255),b
  6708                           
  6709                           ; BSR set to: 0
  6710  003058  0012               	return	
  6711  00305A                     l4172:
  6712                           
  6713                           ; BSR set to: 0
  6714  00305A  0100               	movlb	0	; () banked
  6715  00305C  90D8               	bcf	status,0,c
  6716  00305E  3786               	rlcf	__div_to_l_@quot& (0+255),f,b
  6717  003060  3787               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  6718  003062  3788               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  6719  003064  3789               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  6720  003066  0100               	movlb	0	; () banked
  6721  003068  078B               	decf	__div_to_l_@exp1& (0+255),f,b
  6722  00306A                     l4174:
  6723                           
  6724                           ; BSR set to: 0
  6725  00306A  0100               	movlb	0	; () banked
  6726  00306C  518B               	movf	__div_to_l_@exp1& (0+255),w,b
  6727  00306E  0100               	movlb	0	; () banked
  6728  003070  A4D8               	btfss	status,2,c
  6729  003072  D7F3               	goto	l4172
  6730  003074                     l733:
  6731                           
  6732                           ; BSR set to: 0
  6733  003074  C086  F080         	movff	__div_to_l_@quot,?__div_to_l_
  6734  003078  C087  F081         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  6735  00307C  C088  F082         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  6736  003080  C089  F083         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  6737                           
  6738                           ; BSR set to: 0
  6739  003084  0012               	return		;funcret
  6740  003086                     __end_of__div_to_l_:
  6741                           	opt stack 0
  6742                           tblptru	equ	0xFF8
  6743                           tblptrh	equ	0xFF7
  6744                           tblptrl	equ	0xFF6
  6745                           tablat	equ	0xFF5
  6746                           prodh	equ	0xFF4
  6747                           prodl	equ	0xFF3
  6748                           intcon	equ	0xFF2
  6749                           intcon2	equ	0xFF1
  6750                           intcon3	equ	0xFF0
  6751                           postinc0	equ	0xFEE
  6752                           wreg	equ	0xFE8
  6753                           postinc2	equ	0xFDE
  6754                           postdec2	equ	0xFDD
  6755                           fsr2h	equ	0xFDA
  6756                           fsr2l	equ	0xFD9
  6757                           status	equ	0xFD8
  6758                           
  6759 ;; *************** function ___lltoft *****************
  6760 ;; Defined at:
  6761 ;;		line 35 in file "/Applications/microchip/xc8/v1.40/sources/common/lltoft.c"
  6762 ;; Parameters:    Size  Location     Type
  6763 ;;  c               4    8[BANK0 ] unsigned long 
  6764 ;; Auto vars:     Size  Location     Type
  6765 ;;  exp             1   16[BANK0 ] unsigned char 
  6766 ;; Return value:  Size  Location     Type
  6767 ;;                  3    8[BANK0 ] float 
  6768 ;; Registers used:
  6769 ;;		wreg, status,2, status,0, cstack
  6770 ;; Tracked objects:
  6771 ;;		On entry : 0/0
  6772 ;;		On exit  : 0/0
  6773 ;;		Unchanged: 0/0
  6774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6775 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6776 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6777 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6778 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6779 ;;Total ram usage:        9 bytes
  6780 ;; Hardware stack levels used:    1
  6781 ;; Hardware stack levels required when called:    7
  6782 ;; This function calls:
  6783 ;;		___ftpack
  6784 ;; This function is called by:
  6785 ;;		_printf
  6786 ;; This function uses a non-reentrant model
  6787 ;;
  6788                           
  6789                           	psect	text13
  6790  00437A                     __ptext13:
  6791                           	opt stack 0
  6792  00437A                     ___lltoft:
  6793                           	opt stack 21
  6794                           
  6795                           ; BSR set to: 0
  6796                           ;incstack = 0
  6797  00437A  0E8E               	movlw	142
  6798  00437C  0100               	movlb	0	; () banked
  6799  00437E  6F90               	movwf	___lltoft@exp& (0+255),b
  6800  004380  D008               	goto	l4294
  6801  004382                     l4292:
  6802                           
  6803                           ; BSR set to: 0
  6804  004382  0100               	movlb	0	; () banked
  6805  004384  90D8               	bcf	status,0,c
  6806  004386  338B               	rrcf	(___lltoft@c+3)& (0+255),f,b
  6807  004388  338A               	rrcf	(___lltoft@c+2)& (0+255),f,b
  6808  00438A  3389               	rrcf	(___lltoft@c+1)& (0+255),f,b
  6809  00438C  3388               	rrcf	___lltoft@c& (0+255),f,b
  6810  00438E  0100               	movlb	0	; () banked
  6811  004390  2B90               	incf	___lltoft@exp& (0+255),f,b
  6812  004392                     l4294:
  6813                           
  6814                           ; BSR set to: 0
  6815  004392  0E00               	movlw	0
  6816  004394  0100               	movlb	0	; () banked
  6817  004396  1588               	andwf	___lltoft@c& (0+255),w,b
  6818  004398  0100               	movlb	0	; () banked
  6819  00439A  6F8C               	movwf	??___lltoft& (0+255),b
  6820  00439C  0E00               	movlw	0
  6821  00439E  0100               	movlb	0	; () banked
  6822  0043A0  1589               	andwf	(___lltoft@c+1)& (0+255),w,b
  6823  0043A2  0100               	movlb	0	; () banked
  6824  0043A4  6F8D               	movwf	(??___lltoft+1)& (0+255),b
  6825  0043A6  0E00               	movlw	0
  6826  0043A8  0100               	movlb	0	; () banked
  6827  0043AA  158A               	andwf	(___lltoft@c+2)& (0+255),w,b
  6828  0043AC  0100               	movlb	0	; () banked
  6829  0043AE  6F8E               	movwf	(??___lltoft+2)& (0+255),b
  6830  0043B0  0EFF               	movlw	255
  6831  0043B2  0100               	movlb	0	; () banked
  6832  0043B4  158B               	andwf	(___lltoft@c+3)& (0+255),w,b
  6833  0043B6  0100               	movlb	0	; () banked
  6834  0043B8  6F8F               	movwf	(??___lltoft+3)& (0+255),b
  6835  0043BA  0100               	movlb	0	; () banked
  6836  0043BC  518C               	movf	??___lltoft& (0+255),w,b
  6837  0043BE  0100               	movlb	0	; () banked
  6838  0043C0  118D               	iorwf	(??___lltoft+1)& (0+255),w,b
  6839  0043C2  0100               	movlb	0	; () banked
  6840  0043C4  118E               	iorwf	(??___lltoft+2)& (0+255),w,b
  6841  0043C6  0100               	movlb	0	; () banked
  6842  0043C8  118F               	iorwf	(??___lltoft+3)& (0+255),w,b
  6843  0043CA  A4D8               	btfss	status,2,c
  6844  0043CC  D7DA               	goto	l4292
  6845                           
  6846                           ; BSR set to: 0
  6847                           
  6848                           ; BSR set to: 0
  6849  0043CE  C088  F080         	movff	___lltoft@c,___ftpack@arg
  6850  0043D2  C089  F081         	movff	___lltoft@c+1,___ftpack@arg+1
  6851  0043D6  C08A  F082         	movff	___lltoft@c+2,___ftpack@arg+2
  6852  0043DA  C090  F083         	movff	___lltoft@exp,___ftpack@exp
  6853  0043DE  0E00               	movlw	0
  6854  0043E0  0100               	movlb	0	; () banked
  6855  0043E2  6F84               	movwf	___ftpack@sign& (0+255),b
  6856  0043E4  ECFF  F01B         	call	___ftpack	;wreg free
  6857  0043E8  C080  F088         	movff	?___ftpack,?___lltoft
  6858  0043EC  C081  F089         	movff	?___ftpack+1,?___lltoft+1
  6859  0043F0  C082  F08A         	movff	?___ftpack+2,?___lltoft+2
  6860  0043F4  0012               	return	
  6861  0043F6                     __end_of___lltoft:
  6862                           	opt stack 0
  6863                           tblptru	equ	0xFF8
  6864                           tblptrh	equ	0xFF7
  6865                           tblptrl	equ	0xFF6
  6866                           tablat	equ	0xFF5
  6867                           prodh	equ	0xFF4
  6868                           prodl	equ	0xFF3
  6869                           intcon	equ	0xFF2
  6870                           intcon2	equ	0xFF1
  6871                           intcon3	equ	0xFF0
  6872                           postinc0	equ	0xFEE
  6873                           wreg	equ	0xFE8
  6874                           postinc2	equ	0xFDE
  6875                           postdec2	equ	0xFDD
  6876                           fsr2h	equ	0xFDA
  6877                           fsr2l	equ	0xFD9
  6878                           status	equ	0xFD8
  6879                           
  6880 ;; *************** function ___llmod *****************
  6881 ;; Defined at:
  6882 ;;		line 8 in file "/Applications/microchip/xc8/v1.40/sources/common/llmod.c"
  6883 ;; Parameters:    Size  Location     Type
  6884 ;;  dividend        4   13[BANK0 ] unsigned long 
  6885 ;;  divisor         4   17[BANK0 ] unsigned long 
  6886 ;; Auto vars:     Size  Location     Type
  6887 ;;  counter         1   21[BANK0 ] unsigned char 
  6888 ;; Return value:  Size  Location     Type
  6889 ;;                  4   13[BANK0 ] unsigned long 
  6890 ;; Registers used:
  6891 ;;		wreg, status,2, status,0
  6892 ;; Tracked objects:
  6893 ;;		On entry : 0/0
  6894 ;;		On exit  : 0/0
  6895 ;;		Unchanged: 0/0
  6896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6897 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6898 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6900 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6901 ;;Total ram usage:        9 bytes
  6902 ;; Hardware stack levels used:    1
  6903 ;; Hardware stack levels required when called:    6
  6904 ;; This function calls:
  6905 ;;		Nothing
  6906 ;; This function is called by:
  6907 ;;		_printf
  6908 ;; This function uses a non-reentrant model
  6909 ;;
  6910                           
  6911                           	psect	text14
  6912  00414A                     __ptext14:
  6913                           	opt stack 0
  6914  00414A                     ___llmod:
  6915                           	opt stack 22
  6916                           
  6917                           ;incstack = 0
  6918  00414A  0100               	movlb	0	; () banked
  6919  00414C  5191               	movf	___llmod@divisor& (0+255),w,b
  6920  00414E  0100               	movlb	0	; () banked
  6921  004150  1192               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  6922  004152  0100               	movlb	0	; () banked
  6923  004154  1193               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  6924  004156  0100               	movlb	0	; () banked
  6925  004158  1194               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  6926  00415A  B4D8               	btfsc	status,2,c
  6927  00415C  D03A               	goto	l922
  6928                           
  6929                           ; BSR set to: 0
  6930  00415E  0E01               	movlw	1
  6931  004160  0100               	movlb	0	; () banked
  6932  004162  6F95               	movwf	___llmod@counter& (0+255),b
  6933  004164  D008               	goto	l4280
  6934  004166                     l4278:
  6935                           
  6936                           ; BSR set to: 0
  6937  004166  0100               	movlb	0	; () banked
  6938  004168  90D8               	bcf	status,0,c
  6939  00416A  3791               	rlcf	___llmod@divisor& (0+255),f,b
  6940  00416C  3792               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  6941  00416E  3793               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  6942  004170  3794               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  6943  004172  0100               	movlb	0	; () banked
  6944  004174  2B95               	incf	___llmod@counter& (0+255),f,b
  6945  004176                     l4280:
  6946                           
  6947                           ; BSR set to: 0
  6948  004176  0100               	movlb	0	; () banked
  6949  004178  AF94               	btfss	(___llmod@divisor+3)& (0+255),7,b
  6950  00417A  D7F5               	goto	l4278
  6951  00417C                     l4282:
  6952                           
  6953                           ; BSR set to: 0
  6954  00417C  0100               	movlb	0	; () banked
  6955  00417E  5191               	movf	___llmod@divisor& (0+255),w,b
  6956  004180  0100               	movlb	0	; () banked
  6957  004182  5D8D               	subwf	___llmod@dividend& (0+255),w,b
  6958  004184  0100               	movlb	0	; () banked
  6959  004186  5192               	movf	(___llmod@divisor+1)& (0+255),w,b
  6960  004188  0100               	movlb	0	; () banked
  6961  00418A  598E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  6962  00418C  0100               	movlb	0	; () banked
  6963  00418E  5193               	movf	(___llmod@divisor+2)& (0+255),w,b
  6964  004190  0100               	movlb	0	; () banked
  6965  004192  598F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  6966  004194  0100               	movlb	0	; () banked
  6967  004196  5194               	movf	(___llmod@divisor+3)& (0+255),w,b
  6968  004198  0100               	movlb	0	; () banked
  6969  00419A  5990               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  6970  00419C  A0D8               	btfss	status,0,c
  6971  00419E  D010               	goto	l4286
  6972                           
  6973                           ; BSR set to: 0
  6974  0041A0  0100               	movlb	0	; () banked
  6975  0041A2  5191               	movf	___llmod@divisor& (0+255),w,b
  6976  0041A4  0100               	movlb	0	; () banked
  6977  0041A6  5F8D               	subwf	___llmod@dividend& (0+255),f,b
  6978  0041A8  0100               	movlb	0	; () banked
  6979  0041AA  5192               	movf	(___llmod@divisor+1)& (0+255),w,b
  6980  0041AC  0100               	movlb	0	; () banked
  6981  0041AE  5B8E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  6982  0041B0  0100               	movlb	0	; () banked
  6983  0041B2  5193               	movf	(___llmod@divisor+2)& (0+255),w,b
  6984  0041B4  0100               	movlb	0	; () banked
  6985  0041B6  5B8F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  6986  0041B8  0100               	movlb	0	; () banked
  6987  0041BA  5194               	movf	(___llmod@divisor+3)& (0+255),w,b
  6988  0041BC  0100               	movlb	0	; () banked
  6989  0041BE  5B90               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  6990  0041C0                     l4286:
  6991                           
  6992                           ; BSR set to: 0
  6993  0041C0  0100               	movlb	0	; () banked
  6994  0041C2  90D8               	bcf	status,0,c
  6995  0041C4  3394               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  6996  0041C6  3393               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  6997  0041C8  3392               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  6998  0041CA  3391               	rrcf	___llmod@divisor& (0+255),f,b
  6999                           
  7000                           ; BSR set to: 0
  7001  0041CC  0100               	movlb	0	; () banked
  7002  0041CE  2F95               	decfsz	___llmod@counter& (0+255),f,b
  7003  0041D0  D7D5               	goto	l4282
  7004  0041D2                     l922:
  7005                           
  7006                           ; BSR set to: 0
  7007  0041D2  C08D  F08D         	movff	___llmod@dividend,?___llmod
  7008  0041D6  C08E  F08E         	movff	___llmod@dividend+1,?___llmod+1
  7009  0041DA  C08F  F08F         	movff	___llmod@dividend+2,?___llmod+2
  7010  0041DE  C090  F090         	movff	___llmod@dividend+3,?___llmod+3
  7011                           
  7012                           ; BSR set to: 0
  7013  0041E2  0012               	return		;funcret
  7014  0041E4                     __end_of___llmod:
  7015                           	opt stack 0
  7016                           tblptru	equ	0xFF8
  7017                           tblptrh	equ	0xFF7
  7018                           tblptrl	equ	0xFF6
  7019                           tablat	equ	0xFF5
  7020                           prodh	equ	0xFF4
  7021                           prodl	equ	0xFF3
  7022                           intcon	equ	0xFF2
  7023                           intcon2	equ	0xFF1
  7024                           intcon3	equ	0xFF0
  7025                           postinc0	equ	0xFEE
  7026                           wreg	equ	0xFE8
  7027                           postinc2	equ	0xFDE
  7028                           postdec2	equ	0xFDD
  7029                           fsr2h	equ	0xFDA
  7030                           fsr2l	equ	0xFD9
  7031                           status	equ	0xFD8
  7032                           
  7033 ;; *************** function ___fttol *****************
  7034 ;; Defined at:
  7035 ;;		line 44 in file "/Applications/microchip/xc8/v1.40/sources/common/fttol.c"
  7036 ;; Parameters:    Size  Location     Type
  7037 ;;  f1              3   42[BANK0 ] float 
  7038 ;; Auto vars:     Size  Location     Type
  7039 ;;  lval            4   52[BANK0 ] unsigned long 
  7040 ;;  exp1            1   56[BANK0 ] unsigned char 
  7041 ;;  sign1           1   51[BANK0 ] unsigned char 
  7042 ;; Return value:  Size  Location     Type
  7043 ;;                  4   42[BANK0 ] long 
  7044 ;; Registers used:
  7045 ;;		wreg, status,2, status,0
  7046 ;; Tracked objects:
  7047 ;;		On entry : 0/0
  7048 ;;		On exit  : 0/0
  7049 ;;		Unchanged: 0/0
  7050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7051 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7052 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7053 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7054 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7055 ;;Total ram usage:       15 bytes
  7056 ;; Hardware stack levels used:    1
  7057 ;; Hardware stack levels required when called:    6
  7058 ;; This function calls:
  7059 ;;		Nothing
  7060 ;; This function is called by:
  7061 ;;		_printf
  7062 ;; This function uses a non-reentrant model
  7063 ;;
  7064                           
  7065                           	psect	text15
  7066  003330                     __ptext15:
  7067                           	opt stack 0
  7068  003330                     ___fttol:
  7069                           	opt stack 22
  7070                           
  7071                           ; BSR set to: 0
  7072                           ;incstack = 0
  7073  003330  C0AC  F0AE         	movff	___fttol@f1+2,??___fttol
  7074  003334  0100               	movlb	0	; () banked
  7075  003336  6BAF               	clrf	(??___fttol+1)& (0+255),b
  7076  003338  6BB0               	clrf	(??___fttol+2)& (0+255),b
  7077  00333A  0100               	movlb	0	; () banked
  7078  00333C  35AB               	rlcf	(___fttol@f1+1)& (0+255),w,b
  7079  00333E  0100               	movlb	0	; () banked
  7080  003340  37AE               	rlcf	??___fttol& (0+255),f,b
  7081  003342  E301               	bnc	u4691
  7082  003344  81AF               	bsf	(??___fttol+1)& (0+255),0,b
  7083  003346                     u4691:
  7084  003346  0100               	movlb	0	; () banked
  7085  003348  51AE               	movf	??___fttol& (0+255),w,b
  7086  00334A  0100               	movlb	0	; () banked
  7087  00334C  6FB8               	movwf	___fttol@exp1& (0+255),b
  7088  00334E  0100               	movlb	0	; () banked
  7089  003350  51B8               	movf	___fttol@exp1& (0+255),w,b
  7090  003352  A4D8               	btfss	status,2,c
  7091  003354  D00A               	goto	l4212
  7092                           
  7093                           ; BSR set to: 0
  7094  003356  0E00               	movlw	0
  7095  003358  0100               	movlb	0	; () banked
  7096  00335A  6FAA               	movwf	?___fttol& (0+255),b
  7097  00335C  0E00               	movlw	0
  7098  00335E  6FAB               	movwf	(?___fttol+1)& (0+255),b
  7099  003360  0E00               	movlw	0
  7100  003362  6FAC               	movwf	(?___fttol+2)& (0+255),b
  7101  003364  0E00               	movlw	0
  7102  003366  6FAD               	movwf	(?___fttol+3)& (0+255),b
  7103                           
  7104                           ; BSR set to: 0
  7105  003368  0012               	return	
  7106  00336A                     l4212:
  7107                           
  7108                           ; BSR set to: 0
  7109  00336A  0E17               	movlw	23
  7110  00336C  0100               	movlb	0	; () banked
  7111  00336E  6FAE               	movwf	??___fttol& (0+255),b
  7112  003370  C0AA  F0AF         	movff	___fttol@f1,??___fttol+1
  7113  003374  C0AB  F0B0         	movff	___fttol@f1+1,??___fttol+2
  7114  003378  C0AC  F0B1         	movff	___fttol@f1+2,??___fttol+3
  7115  00337C  0100               	movlb	0	; () banked
  7116  00337E  29AE               	incf	??___fttol& (0+255),w,b
  7117  003380  0100               	movlb	0	; () banked
  7118  003382  6FB2               	movwf	(??___fttol+4)& (0+255),b
  7119  003384  D005               	goto	u4710
  7120  003386                     u4715:
  7121  003386  0100               	movlb	0	; () banked
  7122  003388  90D8               	bcf	status,0,c
  7123  00338A  33B1               	rrcf	(??___fttol+3)& (0+255),f,b
  7124  00338C  33B0               	rrcf	(??___fttol+2)& (0+255),f,b
  7125  00338E  33AF               	rrcf	(??___fttol+1)& (0+255),f,b
  7126  003390                     u4710:
  7127  003390  0100               	movlb	0	; () banked
  7128  003392  2FB2               	decfsz	(??___fttol+4)& (0+255),f,b
  7129  003394  D7F8               	goto	u4715
  7130  003396  0100               	movlb	0	; () banked
  7131  003398  51AF               	movf	(??___fttol+1)& (0+255),w,b
  7132  00339A  0100               	movlb	0	; () banked
  7133  00339C  6FB3               	movwf	___fttol@sign1& (0+255),b
  7134                           
  7135                           ; BSR set to: 0
  7136  00339E  0100               	movlb	0	; () banked
  7137  0033A0  8FAB               	bsf	(___fttol@f1+1)& (0+255),7,b
  7138                           
  7139                           ; BSR set to: 0
  7140  0033A2  0EFF               	movlw	255
  7141  0033A4  0100               	movlb	0	; () banked
  7142  0033A6  17AA               	andwf	___fttol@f1& (0+255),f,b
  7143  0033A8  0EFF               	movlw	255
  7144  0033AA  0100               	movlb	0	; () banked
  7145  0033AC  17AB               	andwf	(___fttol@f1+1)& (0+255),f,b
  7146  0033AE  0E00               	movlw	0
  7147  0033B0  0100               	movlb	0	; () banked
  7148  0033B2  17AC               	andwf	(___fttol@f1+2)& (0+255),f,b
  7149                           
  7150                           ; BSR set to: 0
  7151  0033B4  0100               	movlb	0	; () banked
  7152  0033B6  51AA               	movf	___fttol@f1& (0+255),w,b
  7153  0033B8  0100               	movlb	0	; () banked
  7154  0033BA  6FB4               	movwf	___fttol@lval& (0+255),b
  7155  0033BC  0100               	movlb	0	; () banked
  7156  0033BE  51AB               	movf	(___fttol@f1+1)& (0+255),w,b
  7157  0033C0  0100               	movlb	0	; () banked
  7158  0033C2  6FB5               	movwf	(___fttol@lval+1)& (0+255),b
  7159  0033C4  0100               	movlb	0	; () banked
  7160  0033C6  51AC               	movf	(___fttol@f1+2)& (0+255),w,b
  7161  0033C8  0100               	movlb	0	; () banked
  7162  0033CA  6FB6               	movwf	(___fttol@lval+2)& (0+255),b
  7163  0033CC  0100               	movlb	0	; () banked
  7164  0033CE  6BB7               	clrf	(___fttol@lval+3)& (0+255),b
  7165                           
  7166                           ; BSR set to: 0
  7167  0033D0  0E8E               	movlw	142
  7168  0033D2  0100               	movlb	0	; () banked
  7169  0033D4  5FB8               	subwf	___fttol@exp1& (0+255),f,b
  7170                           
  7171                           ; BSR set to: 0
  7172  0033D6  0100               	movlb	0	; () banked
  7173  0033D8  AFB8               	btfss	___fttol@exp1& (0+255),7,b
  7174  0033DA  D01A               	goto	l4234
  7175                           
  7176                           ; BSR set to: 0
  7177  0033DC  0100               	movlb	0	; () banked
  7178  0033DE  51B8               	movf	___fttol@exp1& (0+255),w,b
  7179  0033E0  0A80               	xorlw	128
  7180  0033E2  0F8F               	addlw	143
  7181  0033E4  B0D8               	btfsc	status,0,c
  7182  0033E6  D00A               	goto	l4230
  7183                           
  7184                           ; BSR set to: 0
  7185  0033E8  0E00               	movlw	0
  7186  0033EA  0100               	movlb	0	; () banked
  7187  0033EC  6FAA               	movwf	?___fttol& (0+255),b
  7188  0033EE  0E00               	movlw	0
  7189  0033F0  6FAB               	movwf	(?___fttol+1)& (0+255),b
  7190  0033F2  0E00               	movlw	0
  7191  0033F4  6FAC               	movwf	(?___fttol+2)& (0+255),b
  7192  0033F6  0E00               	movlw	0
  7193  0033F8  6FAD               	movwf	(?___fttol+3)& (0+255),b
  7194                           
  7195                           ; BSR set to: 0
  7196  0033FA  0012               	return	
  7197  0033FC                     l4230:
  7198                           
  7199                           ; BSR set to: 0
  7200  0033FC  0100               	movlb	0	; () banked
  7201  0033FE  90D8               	bcf	status,0,c
  7202  003400  33B7               	rrcf	(___fttol@lval+3)& (0+255),f,b
  7203  003402  33B6               	rrcf	(___fttol@lval+2)& (0+255),f,b
  7204  003404  33B5               	rrcf	(___fttol@lval+1)& (0+255),f,b
  7205  003406  33B4               	rrcf	___fttol@lval& (0+255),f,b
  7206                           
  7207                           ; BSR set to: 0
  7208  003408  0100               	movlb	0	; () banked
  7209  00340A  3FB8               	incfsz	___fttol@exp1& (0+255),f,b
  7210  00340C  D7F7               	goto	l4230
  7211                           
  7212                           ; BSR set to: 0
  7213  00340E  D01B               	goto	l4244
  7214  003410                     l4234:
  7215                           
  7216                           ; BSR set to: 0
  7217  003410  0E17               	movlw	23
  7218  003412  0100               	movlb	0	; () banked
  7219  003414  65B8               	cpfsgt	___fttol@exp1& (0+255),b
  7220  003416  D012               	goto	l4242
  7221                           
  7222                           ; BSR set to: 0
  7223  003418  0E00               	movlw	0
  7224  00341A  0100               	movlb	0	; () banked
  7225  00341C  6FAA               	movwf	?___fttol& (0+255),b
  7226  00341E  0E00               	movlw	0
  7227  003420  6FAB               	movwf	(?___fttol+1)& (0+255),b
  7228  003422  0E00               	movlw	0
  7229  003424  6FAC               	movwf	(?___fttol+2)& (0+255),b
  7230  003426  0E00               	movlw	0
  7231  003428  6FAD               	movwf	(?___fttol+3)& (0+255),b
  7232                           
  7233                           ; BSR set to: 0
  7234  00342A  0012               	return	
  7235  00342C                     l4240:
  7236                           
  7237                           ; BSR set to: 0
  7238  00342C  0100               	movlb	0	; () banked
  7239  00342E  90D8               	bcf	status,0,c
  7240  003430  37B4               	rlcf	___fttol@lval& (0+255),f,b
  7241  003432  37B5               	rlcf	(___fttol@lval+1)& (0+255),f,b
  7242  003434  37B6               	rlcf	(___fttol@lval+2)& (0+255),f,b
  7243  003436  37B7               	rlcf	(___fttol@lval+3)& (0+255),f,b
  7244  003438  0100               	movlb	0	; () banked
  7245  00343A  07B8               	decf	___fttol@exp1& (0+255),f,b
  7246  00343C                     l4242:
  7247                           
  7248                           ; BSR set to: 0
  7249  00343C  0100               	movlb	0	; () banked
  7250  00343E  51B8               	movf	___fttol@exp1& (0+255),w,b
  7251  003440  0100               	movlb	0	; () banked
  7252  003442  A4D8               	btfss	status,2,c
  7253  003444  D7F3               	goto	l4240
  7254  003446                     l4244:
  7255                           
  7256                           ; BSR set to: 0
  7257  003446  0100               	movlb	0	; () banked
  7258  003448  51B3               	movf	___fttol@sign1& (0+255),w,b
  7259  00344A  0100               	movlb	0	; () banked
  7260  00344C  B4D8               	btfsc	status,2,c
  7261  00344E  D009               	goto	l4248
  7262                           
  7263                           ; BSR set to: 0
  7264  003450  0100               	movlb	0	; () banked
  7265  003452  1FB7               	comf	(___fttol@lval+3)& (0+255),f,b
  7266  003454  1FB6               	comf	(___fttol@lval+2)& (0+255),f,b
  7267  003456  1FB5               	comf	(___fttol@lval+1)& (0+255),f,b
  7268  003458  6DB4               	negf	___fttol@lval& (0+255),b
  7269  00345A  0E00               	movlw	0
  7270  00345C  23B5               	addwfc	(___fttol@lval+1)& (0+255),f,b
  7271  00345E  23B6               	addwfc	(___fttol@lval+2)& (0+255),f,b
  7272  003460  23B7               	addwfc	(___fttol@lval+3)& (0+255),f,b
  7273  003462                     l4248:
  7274                           
  7275                           ; BSR set to: 0
  7276  003462  C0B4  F0AA         	movff	___fttol@lval,?___fttol
  7277  003466  C0B5  F0AB         	movff	___fttol@lval+1,?___fttol+1
  7278  00346A  C0B6  F0AC         	movff	___fttol@lval+2,?___fttol+2
  7279  00346E  C0B7  F0AD         	movff	___fttol@lval+3,?___fttol+3
  7280  003472  0012               	return	
  7281  003474                     __end_of___fttol:
  7282                           	opt stack 0
  7283                           tblptru	equ	0xFF8
  7284                           tblptrh	equ	0xFF7
  7285                           tblptrl	equ	0xFF6
  7286                           tablat	equ	0xFF5
  7287                           prodh	equ	0xFF4
  7288                           prodl	equ	0xFF3
  7289                           intcon	equ	0xFF2
  7290                           intcon2	equ	0xFF1
  7291                           intcon3	equ	0xFF0
  7292                           postinc0	equ	0xFEE
  7293                           wreg	equ	0xFE8
  7294                           postinc2	equ	0xFDE
  7295                           postdec2	equ	0xFDD
  7296                           fsr2h	equ	0xFDA
  7297                           fsr2l	equ	0xFD9
  7298                           status	equ	0xFD8
  7299                           
  7300 ;; *************** function ___ftsub *****************
  7301 ;; Defined at:
  7302 ;;		line 20 in file "/Applications/microchip/xc8/v1.40/sources/common/ftsub.c"
  7303 ;; Parameters:    Size  Location     Type
  7304 ;;  f1              3   57[BANK0 ] float 
  7305 ;;  f2              3   60[BANK0 ] float 
  7306 ;; Auto vars:     Size  Location     Type
  7307 ;;		None
  7308 ;; Return value:  Size  Location     Type
  7309 ;;                  3   57[BANK0 ] float 
  7310 ;; Registers used:
  7311 ;;		wreg, status,2, status,0, cstack
  7312 ;; Tracked objects:
  7313 ;;		On entry : 0/0
  7314 ;;		On exit  : 0/0
  7315 ;;		Unchanged: 0/0
  7316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7317 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7320 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7321 ;;Total ram usage:        6 bytes
  7322 ;; Hardware stack levels used:    1
  7323 ;; Hardware stack levels required when called:    8
  7324 ;; This function calls:
  7325 ;;		___ftadd
  7326 ;; This function is called by:
  7327 ;;		_printf
  7328 ;; This function uses a non-reentrant model
  7329 ;;
  7330                           
  7331                           	psect	text16
  7332  0046F2                     __ptext16:
  7333                           	opt stack 0
  7334  0046F2                     ___ftsub:
  7335                           	opt stack 20
  7336                           
  7337                           ; BSR set to: 0
  7338                           ;incstack = 0
  7339  0046F2  0100               	movlb	0	; () banked
  7340  0046F4  51BC               	movf	___ftsub@f2& (0+255),w,b
  7341  0046F6  0100               	movlb	0	; () banked
  7342  0046F8  11BD               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  7343  0046FA  0100               	movlb	0	; () banked
  7344  0046FC  11BE               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  7345  0046FE  B4D8               	btfsc	status,2,c
  7346  004700  D009               	goto	l4180
  7347                           
  7348                           ; BSR set to: 0
  7349  004702  0E00               	movlw	0
  7350  004704  0100               	movlb	0	; () banked
  7351  004706  1BBC               	xorwf	___ftsub@f2& (0+255),f,b
  7352  004708  0E00               	movlw	0
  7353  00470A  0100               	movlb	0	; () banked
  7354  00470C  1BBD               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  7355  00470E  0E80               	movlw	128
  7356  004710  0100               	movlb	0	; () banked
  7357  004712  1BBE               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  7358  004714                     l4180:
  7359                           
  7360                           ; BSR set to: 0
  7361  004714  C0B9  F0AD         	movff	___ftsub@f1,___ftadd@f1
  7362  004718  C0BA  F0AE         	movff	___ftsub@f1+1,___ftadd@f1+1
  7363  00471C  C0BB  F0AF         	movff	___ftsub@f1+2,___ftadd@f1+2
  7364  004720  C0BC  F0B0         	movff	___ftsub@f2,___ftadd@f2
  7365  004724  C0BD  F0B1         	movff	___ftsub@f2+1,___ftadd@f2+1
  7366  004728  C0BE  F0B2         	movff	___ftsub@f2+2,___ftadd@f2+2
  7367  00472C  EC62  F012         	call	___ftadd	;wreg free
  7368  004730  C0AD  F0B9         	movff	?___ftadd,?___ftsub
  7369  004734  C0AE  F0BA         	movff	?___ftadd+1,?___ftsub+1
  7370  004738  C0AF  F0BB         	movff	?___ftadd+2,?___ftsub+2
  7371  00473C  0012               	return	
  7372  00473E                     __end_of___ftsub:
  7373                           	opt stack 0
  7374                           tblptru	equ	0xFF8
  7375                           tblptrh	equ	0xFF7
  7376                           tblptrl	equ	0xFF6
  7377                           tablat	equ	0xFF5
  7378                           prodh	equ	0xFF4
  7379                           prodl	equ	0xFF3
  7380                           intcon	equ	0xFF2
  7381                           intcon2	equ	0xFF1
  7382                           intcon3	equ	0xFF0
  7383                           postinc0	equ	0xFEE
  7384                           wreg	equ	0xFE8
  7385                           postinc2	equ	0xFDE
  7386                           postdec2	equ	0xFDD
  7387                           fsr2h	equ	0xFDA
  7388                           fsr2l	equ	0xFD9
  7389                           status	equ	0xFD8
  7390                           
  7391 ;; *************** function ___ftadd *****************
  7392 ;; Defined at:
  7393 ;;		line 86 in file "/Applications/microchip/xc8/v1.40/sources/common/ftadd.c"
  7394 ;; Parameters:    Size  Location     Type
  7395 ;;  f1              3   45[BANK0 ] float 
  7396 ;;  f2              3   48[BANK0 ] float 
  7397 ;; Auto vars:     Size  Location     Type
  7398 ;;  exp1            1   56[BANK0 ] unsigned char 
  7399 ;;  exp2            1   55[BANK0 ] unsigned char 
  7400 ;;  sign            1   54[BANK0 ] unsigned char 
  7401 ;; Return value:  Size  Location     Type
  7402 ;;                  3   45[BANK0 ] float 
  7403 ;; Registers used:
  7404 ;;		wreg, status,2, status,0, cstack
  7405 ;; Tracked objects:
  7406 ;;		On entry : 0/0
  7407 ;;		On exit  : 0/0
  7408 ;;		Unchanged: 0/0
  7409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7410 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7411 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7412 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7413 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7414 ;;Total ram usage:       12 bytes
  7415 ;; Hardware stack levels used:    1
  7416 ;; Hardware stack levels required when called:    7
  7417 ;; This function calls:
  7418 ;;		___ftpack
  7419 ;; This function is called by:
  7420 ;;		_printf
  7421 ;;		___ftsub
  7422 ;; This function uses a non-reentrant model
  7423 ;;
  7424                           
  7425                           	psect	text17
  7426  0024C4                     __ptext17:
  7427                           	opt stack 0
  7428  0024C4                     ___ftadd:
  7429                           	opt stack 20
  7430                           
  7431                           ;incstack = 0
  7432  0024C4  C0AF  F0B3         	movff	___ftadd@f1+2,??___ftadd
  7433  0024C8  0100               	movlb	0	; () banked
  7434  0024CA  6BB4               	clrf	(??___ftadd+1)& (0+255),b
  7435  0024CC  6BB5               	clrf	(??___ftadd+2)& (0+255),b
  7436  0024CE  0100               	movlb	0	; () banked
  7437  0024D0  35AE               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  7438  0024D2  0100               	movlb	0	; () banked
  7439  0024D4  37B3               	rlcf	??___ftadd& (0+255),f,b
  7440  0024D6  E301               	bnc	u3591
  7441  0024D8  81B4               	bsf	(??___ftadd+1)& (0+255),0,b
  7442  0024DA                     u3591:
  7443  0024DA  0100               	movlb	0	; () banked
  7444  0024DC  51B3               	movf	??___ftadd& (0+255),w,b
  7445  0024DE  0100               	movlb	0	; () banked
  7446  0024E0  6FB8               	movwf	___ftadd@exp1& (0+255),b
  7447  0024E2  C0B2  F0B3         	movff	___ftadd@f2+2,??___ftadd
  7448  0024E6  0100               	movlb	0	; () banked
  7449  0024E8  6BB4               	clrf	(??___ftadd+1)& (0+255),b
  7450  0024EA  6BB5               	clrf	(??___ftadd+2)& (0+255),b
  7451  0024EC  0100               	movlb	0	; () banked
  7452  0024EE  35B1               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  7453  0024F0  0100               	movlb	0	; () banked
  7454  0024F2  37B3               	rlcf	??___ftadd& (0+255),f,b
  7455  0024F4  E301               	bnc	u3601
  7456  0024F6  81B4               	bsf	(??___ftadd+1)& (0+255),0,b
  7457  0024F8                     u3601:
  7458  0024F8  0100               	movlb	0	; () banked
  7459  0024FA  51B3               	movf	??___ftadd& (0+255),w,b
  7460  0024FC  0100               	movlb	0	; () banked
  7461  0024FE  6FB7               	movwf	___ftadd@exp2& (0+255),b
  7462                           
  7463                           ; BSR set to: 0
  7464  002500  0100               	movlb	0	; () banked
  7465  002502  51B8               	movf	___ftadd@exp1& (0+255),w,b
  7466  002504  0100               	movlb	0	; () banked
  7467  002506  B4D8               	btfsc	status,2,c
  7468  002508  D011               	goto	l788
  7469                           
  7470                           ; BSR set to: 0
  7471  00250A  0100               	movlb	0	; () banked
  7472  00250C  51B7               	movf	___ftadd@exp2& (0+255),w,b
  7473  00250E  0100               	movlb	0	; () banked
  7474  002510  5DB8               	subwf	___ftadd@exp1& (0+255),w,b
  7475  002512  B0D8               	btfsc	status,0,c
  7476  002514  D012               	goto	l3568
  7477                           
  7478                           ; BSR set to: 0
  7479  002516  0100               	movlb	0	; () banked
  7480  002518  51B8               	movf	___ftadd@exp1& (0+255),w,b
  7481  00251A  0800               	sublw	0
  7482  00251C  0100               	movlb	0	; () banked
  7483  00251E  25B7               	addwf	___ftadd@exp2& (0+255),w,b
  7484  002520  0100               	movlb	0	; () banked
  7485  002522  6FB3               	movwf	??___ftadd& (0+255),b
  7486  002524  0E18               	movlw	24
  7487  002526  0100               	movlb	0	; () banked
  7488  002528  65B3               	cpfsgt	??___ftadd& (0+255),b
  7489  00252A  D007               	goto	l3568
  7490  00252C                     l788:
  7491                           
  7492                           ; BSR set to: 0
  7493  00252C  C0B0  F0AD         	movff	___ftadd@f2,?___ftadd
  7494  002530  C0B1  F0AE         	movff	___ftadd@f2+1,?___ftadd+1
  7495  002534  C0B2  F0AF         	movff	___ftadd@f2+2,?___ftadd+2
  7496  002538  0012               	return	
  7497  00253A                     l3568:
  7498                           
  7499                           ; BSR set to: 0
  7500  00253A  0100               	movlb	0	; () banked
  7501  00253C  51B7               	movf	___ftadd@exp2& (0+255),w,b
  7502  00253E  0100               	movlb	0	; () banked
  7503  002540  B4D8               	btfsc	status,2,c
  7504  002542  D011               	goto	l792
  7505                           
  7506                           ; BSR set to: 0
  7507  002544  0100               	movlb	0	; () banked
  7508  002546  51B8               	movf	___ftadd@exp1& (0+255),w,b
  7509  002548  0100               	movlb	0	; () banked
  7510  00254A  5DB7               	subwf	___ftadd@exp2& (0+255),w,b
  7511  00254C  B0D8               	btfsc	status,0,c
  7512  00254E  D012               	goto	l3574
  7513                           
  7514                           ; BSR set to: 0
  7515  002550  0100               	movlb	0	; () banked
  7516  002552  51B7               	movf	___ftadd@exp2& (0+255),w,b
  7517  002554  0800               	sublw	0
  7518  002556  0100               	movlb	0	; () banked
  7519  002558  25B8               	addwf	___ftadd@exp1& (0+255),w,b
  7520  00255A  0100               	movlb	0	; () banked
  7521  00255C  6FB3               	movwf	??___ftadd& (0+255),b
  7522  00255E  0E18               	movlw	24
  7523  002560  0100               	movlb	0	; () banked
  7524  002562  65B3               	cpfsgt	??___ftadd& (0+255),b
  7525  002564  D007               	goto	l3574
  7526  002566                     l792:
  7527                           
  7528                           ; BSR set to: 0
  7529  002566  C0AD  F0AD         	movff	___ftadd@f1,?___ftadd
  7530  00256A  C0AE  F0AE         	movff	___ftadd@f1+1,?___ftadd+1
  7531  00256E  C0AF  F0AF         	movff	___ftadd@f1+2,?___ftadd+2
  7532  002572  0012               	return	
  7533  002574                     l3574:
  7534                           
  7535                           ; BSR set to: 0
  7536  002574  0E06               	movlw	6
  7537  002576  0100               	movlb	0	; () banked
  7538  002578  6FB6               	movwf	___ftadd@sign& (0+255),b
  7539                           
  7540                           ; BSR set to: 0
  7541  00257A  0100               	movlb	0	; () banked
  7542  00257C  AFAF               	btfss	(___ftadd@f1+2)& (0+255),7,b
  7543  00257E  D002               	goto	l3580
  7544                           
  7545                           ; BSR set to: 0
  7546  002580  0100               	movlb	0	; () banked
  7547  002582  8FB6               	bsf	___ftadd@sign& (0+255),7,b
  7548  002584                     l3580:
  7549                           
  7550                           ; BSR set to: 0
  7551  002584  0100               	movlb	0	; () banked
  7552  002586  AFB2               	btfss	(___ftadd@f2+2)& (0+255),7,b
  7553  002588  D002               	goto	l794
  7554                           
  7555                           ; BSR set to: 0
  7556  00258A  0100               	movlb	0	; () banked
  7557  00258C  8DB6               	bsf	___ftadd@sign& (0+255),6,b
  7558  00258E                     l794:
  7559                           
  7560                           ; BSR set to: 0
  7561  00258E  0100               	movlb	0	; () banked
  7562  002590  8FAE               	bsf	(___ftadd@f1+1)& (0+255),7,b
  7563                           
  7564                           ; BSR set to: 0
  7565  002592  0EFF               	movlw	255
  7566  002594  0100               	movlb	0	; () banked
  7567  002596  17AD               	andwf	___ftadd@f1& (0+255),f,b
  7568  002598  0EFF               	movlw	255
  7569  00259A  0100               	movlb	0	; () banked
  7570  00259C  17AE               	andwf	(___ftadd@f1+1)& (0+255),f,b
  7571  00259E  0E00               	movlw	0
  7572  0025A0  0100               	movlb	0	; () banked
  7573  0025A2  17AF               	andwf	(___ftadd@f1+2)& (0+255),f,b
  7574  0025A4  0100               	movlb	0	; () banked
  7575  0025A6  8FB1               	bsf	(___ftadd@f2+1)& (0+255),7,b
  7576                           
  7577                           ; BSR set to: 0
  7578  0025A8  0EFF               	movlw	255
  7579  0025AA  0100               	movlb	0	; () banked
  7580  0025AC  17B0               	andwf	___ftadd@f2& (0+255),f,b
  7581  0025AE  0EFF               	movlw	255
  7582  0025B0  0100               	movlb	0	; () banked
  7583  0025B2  17B1               	andwf	(___ftadd@f2+1)& (0+255),f,b
  7584  0025B4  0E00               	movlw	0
  7585  0025B6  0100               	movlb	0	; () banked
  7586  0025B8  17B2               	andwf	(___ftadd@f2+2)& (0+255),f,b
  7587                           
  7588                           ; BSR set to: 0
  7589  0025BA  0100               	movlb	0	; () banked
  7590  0025BC  51B7               	movf	___ftadd@exp2& (0+255),w,b
  7591  0025BE  0100               	movlb	0	; () banked
  7592  0025C0  5DB8               	subwf	___ftadd@exp1& (0+255),w,b
  7593  0025C2  B0D8               	btfsc	status,0,c
  7594  0025C4  D025               	goto	l3600
  7595  0025C6                     l3590:
  7596                           
  7597                           ; BSR set to: 0
  7598  0025C6  0100               	movlb	0	; () banked
  7599  0025C8  90D8               	bcf	status,0,c
  7600  0025CA  37B0               	rlcf	___ftadd@f2& (0+255),f,b
  7601  0025CC  37B1               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  7602  0025CE  37B2               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  7603  0025D0  0100               	movlb	0	; () banked
  7604  0025D2  07B7               	decf	___ftadd@exp2& (0+255),f,b
  7605                           
  7606                           ; BSR set to: 0
  7607  0025D4  0100               	movlb	0	; () banked
  7608  0025D6  51B8               	movf	___ftadd@exp1& (0+255),w,b
  7609  0025D8  0100               	movlb	0	; () banked
  7610  0025DA  19B7               	xorwf	___ftadd@exp2& (0+255),w,b
  7611  0025DC  B4D8               	btfsc	status,2,c
  7612  0025DE  D011               	goto	l3598
  7613                           
  7614                           ; BSR set to: 0
  7615  0025E0  0100               	movlb	0	; () banked
  7616  0025E2  07B6               	decf	___ftadd@sign& (0+255),f,b
  7617  0025E4  C0B6  F0B3         	movff	___ftadd@sign,??___ftadd
  7618  0025E8  0E07               	movlw	7
  7619  0025EA  0100               	movlb	0	; () banked
  7620  0025EC  17B3               	andwf	??___ftadd& (0+255),f,b
  7621  0025EE  B4D8               	btfsc	status,2,c
  7622  0025F0  D008               	goto	l3598
  7623  0025F2  D7E9               	goto	l3590
  7624  0025F4                     l3596:
  7625                           
  7626                           ; BSR set to: 0
  7627  0025F4  0100               	movlb	0	; () banked
  7628  0025F6  90D8               	bcf	status,0,c
  7629  0025F8  33AF               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  7630  0025FA  33AE               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  7631  0025FC  33AD               	rrcf	___ftadd@f1& (0+255),f,b
  7632  0025FE  0100               	movlb	0	; () banked
  7633  002600  2BB8               	incf	___ftadd@exp1& (0+255),f,b
  7634  002602                     l3598:
  7635                           
  7636                           ; BSR set to: 0
  7637  002602  0100               	movlb	0	; () banked
  7638  002604  51B7               	movf	___ftadd@exp2& (0+255),w,b
  7639  002606  0100               	movlb	0	; () banked
  7640  002608  19B8               	xorwf	___ftadd@exp1& (0+255),w,b
  7641  00260A  B4D8               	btfsc	status,2,c
  7642  00260C  D02B               	goto	l803
  7643  00260E  D7F2               	goto	l3596
  7644  002610                     l3600:
  7645                           
  7646                           ; BSR set to: 0
  7647  002610  0100               	movlb	0	; () banked
  7648  002612  51B8               	movf	___ftadd@exp1& (0+255),w,b
  7649  002614  0100               	movlb	0	; () banked
  7650  002616  5DB7               	subwf	___ftadd@exp2& (0+255),w,b
  7651  002618  B0D8               	btfsc	status,0,c
  7652  00261A  D024               	goto	l803
  7653  00261C                     l3602:
  7654                           
  7655                           ; BSR set to: 0
  7656  00261C  0100               	movlb	0	; () banked
  7657  00261E  90D8               	bcf	status,0,c
  7658  002620  37AD               	rlcf	___ftadd@f1& (0+255),f,b
  7659  002622  37AE               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  7660  002624  37AF               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  7661  002626  0100               	movlb	0	; () banked
  7662  002628  07B8               	decf	___ftadd@exp1& (0+255),f,b
  7663                           
  7664                           ; BSR set to: 0
  7665  00262A  0100               	movlb	0	; () banked
  7666  00262C  51B8               	movf	___ftadd@exp1& (0+255),w,b
  7667  00262E  0100               	movlb	0	; () banked
  7668  002630  19B7               	xorwf	___ftadd@exp2& (0+255),w,b
  7669  002632  B4D8               	btfsc	status,2,c
  7670  002634  D011               	goto	l3610
  7671                           
  7672                           ; BSR set to: 0
  7673  002636  0100               	movlb	0	; () banked
  7674  002638  07B6               	decf	___ftadd@sign& (0+255),f,b
  7675  00263A  C0B6  F0B3         	movff	___ftadd@sign,??___ftadd
  7676  00263E  0E07               	movlw	7
  7677  002640  0100               	movlb	0	; () banked
  7678  002642  17B3               	andwf	??___ftadd& (0+255),f,b
  7679  002644  B4D8               	btfsc	status,2,c
  7680  002646  D008               	goto	l3610
  7681  002648  D7E9               	goto	l3602
  7682  00264A                     l3608:
  7683                           
  7684                           ; BSR set to: 0
  7685  00264A  0100               	movlb	0	; () banked
  7686  00264C  90D8               	bcf	status,0,c
  7687  00264E  33B2               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  7688  002650  33B1               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  7689  002652  33B0               	rrcf	___ftadd@f2& (0+255),f,b
  7690  002654  0100               	movlb	0	; () banked
  7691  002656  2BB7               	incf	___ftadd@exp2& (0+255),f,b
  7692  002658                     l3610:
  7693                           
  7694                           ; BSR set to: 0
  7695  002658  0100               	movlb	0	; () banked
  7696  00265A  51B7               	movf	___ftadd@exp2& (0+255),w,b
  7697  00265C  0100               	movlb	0	; () banked
  7698  00265E  19B8               	xorwf	___ftadd@exp1& (0+255),w,b
  7699  002660  A4D8               	btfss	status,2,c
  7700  002662  D7F3               	goto	l3608
  7701  002664                     l803:
  7702                           
  7703                           ; BSR set to: 0
  7704  002664  0100               	movlb	0	; () banked
  7705  002666  AFB6               	btfss	___ftadd@sign& (0+255),7,b
  7706  002668  D012               	goto	l812
  7707                           
  7708                           ; BSR set to: 0
  7709  00266A  0EFF               	movlw	255
  7710  00266C  0100               	movlb	0	; () banked
  7711  00266E  1BAD               	xorwf	___ftadd@f1& (0+255),f,b
  7712  002670  0EFF               	movlw	255
  7713  002672  0100               	movlb	0	; () banked
  7714  002674  1BAE               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  7715  002676  0EFF               	movlw	255
  7716  002678  0100               	movlb	0	; () banked
  7717  00267A  1BAF               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  7718  00267C  0E01               	movlw	1
  7719  00267E  0100               	movlb	0	; () banked
  7720  002680  27AD               	addwf	___ftadd@f1& (0+255),f,b
  7721  002682  0E00               	movlw	0
  7722  002684  0100               	movlb	0	; () banked
  7723  002686  23AE               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  7724  002688  0E00               	movlw	0
  7725  00268A  0100               	movlb	0	; () banked
  7726  00268C  23AF               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  7727  00268E                     l812:
  7728                           
  7729                           ; BSR set to: 0
  7730  00268E  0100               	movlb	0	; () banked
  7731  002690  ADB6               	btfss	___ftadd@sign& (0+255),6,b
  7732  002692  D012               	goto	l3616
  7733                           
  7734                           ; BSR set to: 0
  7735  002694  0EFF               	movlw	255
  7736  002696  0100               	movlb	0	; () banked
  7737  002698  1BB0               	xorwf	___ftadd@f2& (0+255),f,b
  7738  00269A  0EFF               	movlw	255
  7739  00269C  0100               	movlb	0	; () banked
  7740  00269E  1BB1               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  7741  0026A0  0EFF               	movlw	255
  7742  0026A2  0100               	movlb	0	; () banked
  7743  0026A4  1BB2               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  7744  0026A6  0E01               	movlw	1
  7745  0026A8  0100               	movlb	0	; () banked
  7746  0026AA  27B0               	addwf	___ftadd@f2& (0+255),f,b
  7747  0026AC  0E00               	movlw	0
  7748  0026AE  0100               	movlb	0	; () banked
  7749  0026B0  23B1               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  7750  0026B2  0E00               	movlw	0
  7751  0026B4  0100               	movlb	0	; () banked
  7752  0026B6  23B2               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  7753  0026B8                     l3616:
  7754                           
  7755                           ; BSR set to: 0
  7756  0026B8  0E00               	movlw	0
  7757  0026BA  0100               	movlb	0	; () banked
  7758  0026BC  6FB6               	movwf	___ftadd@sign& (0+255),b
  7759                           
  7760                           ; BSR set to: 0
  7761  0026BE  0100               	movlb	0	; () banked
  7762  0026C0  51AD               	movf	___ftadd@f1& (0+255),w,b
  7763  0026C2  0100               	movlb	0	; () banked
  7764  0026C4  27B0               	addwf	___ftadd@f2& (0+255),f,b
  7765  0026C6  0100               	movlb	0	; () banked
  7766  0026C8  51AE               	movf	(___ftadd@f1+1)& (0+255),w,b
  7767  0026CA  0100               	movlb	0	; () banked
  7768  0026CC  23B1               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  7769  0026CE  0100               	movlb	0	; () banked
  7770  0026D0  51AF               	movf	(___ftadd@f1+2)& (0+255),w,b
  7771  0026D2  0100               	movlb	0	; () banked
  7772  0026D4  23B2               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  7773                           
  7774                           ; BSR set to: 0
  7775  0026D6  0100               	movlb	0	; () banked
  7776  0026D8  AFB2               	btfss	(___ftadd@f2+2)& (0+255),7,b
  7777  0026DA  D015               	goto	l3626
  7778                           
  7779                           ; BSR set to: 0
  7780  0026DC  0EFF               	movlw	255
  7781  0026DE  0100               	movlb	0	; () banked
  7782  0026E0  1BB0               	xorwf	___ftadd@f2& (0+255),f,b
  7783  0026E2  0EFF               	movlw	255
  7784  0026E4  0100               	movlb	0	; () banked
  7785  0026E6  1BB1               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  7786  0026E8  0EFF               	movlw	255
  7787  0026EA  0100               	movlb	0	; () banked
  7788  0026EC  1BB2               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  7789  0026EE  0E01               	movlw	1
  7790  0026F0  0100               	movlb	0	; () banked
  7791  0026F2  27B0               	addwf	___ftadd@f2& (0+255),f,b
  7792  0026F4  0E00               	movlw	0
  7793  0026F6  0100               	movlb	0	; () banked
  7794  0026F8  23B1               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  7795  0026FA  0E00               	movlw	0
  7796  0026FC  0100               	movlb	0	; () banked
  7797  0026FE  23B2               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  7798                           
  7799                           ; BSR set to: 0
  7800  002700  0E01               	movlw	1
  7801  002702  0100               	movlb	0	; () banked
  7802  002704  6FB6               	movwf	___ftadd@sign& (0+255),b
  7803  002706                     l3626:
  7804                           
  7805                           ; BSR set to: 0
  7806  002706  C0B0  F080         	movff	___ftadd@f2,___ftpack@arg
  7807  00270A  C0B1  F081         	movff	___ftadd@f2+1,___ftpack@arg+1
  7808  00270E  C0B2  F082         	movff	___ftadd@f2+2,___ftpack@arg+2
  7809  002712  C0B8  F083         	movff	___ftadd@exp1,___ftpack@exp
  7810  002716  C0B6  F084         	movff	___ftadd@sign,___ftpack@sign
  7811  00271A  ECFF  F01B         	call	___ftpack	;wreg free
  7812  00271E  C080  F0AD         	movff	?___ftpack,?___ftadd
  7813  002722  C081  F0AE         	movff	?___ftpack+1,?___ftadd+1
  7814  002726  C082  F0AF         	movff	?___ftpack+2,?___ftadd+2
  7815  00272A  0012               	return	
  7816  00272C                     __end_of___ftadd:
  7817                           	opt stack 0
  7818                           tblptru	equ	0xFF8
  7819                           tblptrh	equ	0xFF7
  7820                           tblptrl	equ	0xFF6
  7821                           tablat	equ	0xFF5
  7822                           prodh	equ	0xFF4
  7823                           prodl	equ	0xFF3
  7824                           intcon	equ	0xFF2
  7825                           intcon2	equ	0xFF1
  7826                           intcon3	equ	0xFF0
  7827                           postinc0	equ	0xFEE
  7828                           wreg	equ	0xFE8
  7829                           postinc2	equ	0xFDE
  7830                           postdec2	equ	0xFDD
  7831                           fsr2h	equ	0xFDA
  7832                           fsr2l	equ	0xFD9
  7833                           status	equ	0xFD8
  7834                           
  7835 ;; *************** function ___ftneg *****************
  7836 ;; Defined at:
  7837 ;;		line 15 in file "/Applications/microchip/xc8/v1.40/sources/common/ftneg.c"
  7838 ;; Parameters:    Size  Location     Type
  7839 ;;  f1              3    0[BANK0 ] float 
  7840 ;; Auto vars:     Size  Location     Type
  7841 ;;		None
  7842 ;; Return value:  Size  Location     Type
  7843 ;;                  3    0[BANK0 ] float 
  7844 ;; Registers used:
  7845 ;;		wreg, status,2, status,0
  7846 ;; Tracked objects:
  7847 ;;		On entry : 0/0
  7848 ;;		On exit  : 0/0
  7849 ;;		Unchanged: 0/0
  7850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7851 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7854 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7855 ;;Total ram usage:        3 bytes
  7856 ;; Hardware stack levels used:    1
  7857 ;; Hardware stack levels required when called:    6
  7858 ;; This function calls:
  7859 ;;		Nothing
  7860 ;; This function is called by:
  7861 ;;		_printf
  7862 ;; This function uses a non-reentrant model
  7863 ;;
  7864                           
  7865                           	psect	text18
  7866  004872                     __ptext18:
  7867                           	opt stack 0
  7868  004872                     ___ftneg:
  7869                           	opt stack 22
  7870                           
  7871                           ;incstack = 0
  7872  004872  0100               	movlb	0	; () banked
  7873  004874  5180               	movf	___ftneg@f1& (0+255),w,b
  7874  004876  0100               	movlb	0	; () banked
  7875  004878  1181               	iorwf	(___ftneg@f1+1)& (0+255),w,b
  7876  00487A  0100               	movlb	0	; () banked
  7877  00487C  1182               	iorwf	(___ftneg@f1+2)& (0+255),w,b
  7878  00487E  B4D8               	btfsc	status,2,c
  7879  004880  D009               	goto	l862
  7880                           
  7881                           ; BSR set to: 0
  7882  004882  0E00               	movlw	0
  7883  004884  0100               	movlb	0	; () banked
  7884  004886  1B80               	xorwf	___ftneg@f1& (0+255),f,b
  7885  004888  0E00               	movlw	0
  7886  00488A  0100               	movlb	0	; () banked
  7887  00488C  1B81               	xorwf	(___ftneg@f1+1)& (0+255),f,b
  7888  00488E  0E80               	movlw	128
  7889  004890  0100               	movlb	0	; () banked
  7890  004892  1B82               	xorwf	(___ftneg@f1+2)& (0+255),f,b
  7891  004894                     l862:
  7892                           
  7893                           ; BSR set to: 0
  7894  004894  C080  F080         	movff	___ftneg@f1,?___ftneg
  7895  004898  C081  F081         	movff	___ftneg@f1+1,?___ftneg+1
  7896  00489C  C082  F082         	movff	___ftneg@f1+2,?___ftneg+2
  7897                           
  7898                           ; BSR set to: 0
  7899  0048A0  0012               	return		;funcret
  7900  0048A2                     __end_of___ftneg:
  7901                           	opt stack 0
  7902                           tblptru	equ	0xFF8
  7903                           tblptrh	equ	0xFF7
  7904                           tblptrl	equ	0xFF6
  7905                           tablat	equ	0xFF5
  7906                           prodh	equ	0xFF4
  7907                           prodl	equ	0xFF3
  7908                           intcon	equ	0xFF2
  7909                           intcon2	equ	0xFF1
  7910                           intcon3	equ	0xFF0
  7911                           postinc0	equ	0xFEE
  7912                           wreg	equ	0xFE8
  7913                           postinc2	equ	0xFDE
  7914                           postdec2	equ	0xFDD
  7915                           fsr2h	equ	0xFDA
  7916                           fsr2l	equ	0xFD9
  7917                           status	equ	0xFD8
  7918                           
  7919 ;; *************** function ___ftge *****************
  7920 ;; Defined at:
  7921 ;;		line 4 in file "/Applications/microchip/xc8/v1.40/sources/common/ftge.c"
  7922 ;; Parameters:    Size  Location     Type
  7923 ;;  ff1             3    0[BANK0 ] float 
  7924 ;;  ff2             3    3[BANK0 ] float 
  7925 ;; Auto vars:     Size  Location     Type
  7926 ;;		None
  7927 ;; Return value:  Size  Location     Type
  7928 ;;		None               void
  7929 ;; Registers used:
  7930 ;;		wreg, status,2, status,0
  7931 ;; Tracked objects:
  7932 ;;		On entry : 0/0
  7933 ;;		On exit  : 0/0
  7934 ;;		Unchanged: 0/0
  7935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7936 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7938 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7939 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7940 ;;Total ram usage:        9 bytes
  7941 ;; Hardware stack levels used:    1
  7942 ;; Hardware stack levels required when called:    6
  7943 ;; This function calls:
  7944 ;;		Nothing
  7945 ;; This function is called by:
  7946 ;;		_printf
  7947 ;; This function uses a non-reentrant model
  7948 ;;
  7949                           
  7950                           	psect	text19
  7951  003AF2                     __ptext19:
  7952                           	opt stack 0
  7953  003AF2                     ___ftge:
  7954                           	opt stack 22
  7955                           
  7956                           ; BSR set to: 0
  7957                           ;incstack = 0
  7958  003AF2  0100               	movlb	0	; () banked
  7959  003AF4  AF82               	btfss	(___ftge@ff1+2)& (0+255),7,b
  7960  003AF6  D01D               	goto	l4188
  7961                           
  7962                           ; BSR set to: 0
  7963  003AF8  C080  F086         	movff	___ftge@ff1,??___ftge
  7964  003AFC  C081  F087         	movff	___ftge@ff1+1,??___ftge+1
  7965  003B00  C082  F088         	movff	___ftge@ff1+2,??___ftge+2
  7966  003B04  0100               	movlb	0	; () banked
  7967  003B06  1F86               	comf	??___ftge& (0+255),f,b
  7968  003B08  1F87               	comf	(??___ftge+1)& (0+255),f,b
  7969  003B0A  1F88               	comf	(??___ftge+2)& (0+255),f,b
  7970  003B0C  2B86               	incf	??___ftge& (0+255),f,b
  7971  003B0E  0E00               	movlw	0
  7972  003B10  2387               	addwfc	(??___ftge+1)& (0+255),f,b
  7973  003B12  2388               	addwfc	(??___ftge+2)& (0+255),f,b
  7974  003B14  0E00               	movlw	0
  7975  003B16  0100               	movlb	0	; () banked
  7976  003B18  2586               	addwf	??___ftge& (0+255),w,b
  7977  003B1A  0100               	movlb	0	; () banked
  7978  003B1C  6F80               	movwf	___ftge@ff1& (0+255),b
  7979  003B1E  0E00               	movlw	0
  7980  003B20  0100               	movlb	0	; () banked
  7981  003B22  2187               	addwfc	(??___ftge+1)& (0+255),w,b
  7982  003B24  0100               	movlb	0	; () banked
  7983  003B26  6F81               	movwf	(___ftge@ff1+1)& (0+255),b
  7984  003B28  0E80               	movlw	128
  7985  003B2A  0100               	movlb	0	; () banked
  7986  003B2C  2188               	addwfc	(??___ftge+2)& (0+255),w,b
  7987  003B2E  0100               	movlb	0	; () banked
  7988  003B30  6F82               	movwf	(___ftge@ff1+2)& (0+255),b
  7989  003B32                     l4188:
  7990                           
  7991                           ; BSR set to: 0
  7992  003B32  0100               	movlb	0	; () banked
  7993  003B34  AF85               	btfss	(___ftge@ff2+2)& (0+255),7,b
  7994  003B36  D01D               	goto	l4192
  7995                           
  7996                           ; BSR set to: 0
  7997  003B38  C083  F086         	movff	___ftge@ff2,??___ftge
  7998  003B3C  C084  F087         	movff	___ftge@ff2+1,??___ftge+1
  7999  003B40  C085  F088         	movff	___ftge@ff2+2,??___ftge+2
  8000  003B44  0100               	movlb	0	; () banked
  8001  003B46  1F86               	comf	??___ftge& (0+255),f,b
  8002  003B48  1F87               	comf	(??___ftge+1)& (0+255),f,b
  8003  003B4A  1F88               	comf	(??___ftge+2)& (0+255),f,b
  8004  003B4C  2B86               	incf	??___ftge& (0+255),f,b
  8005  003B4E  0E00               	movlw	0
  8006  003B50  2387               	addwfc	(??___ftge+1)& (0+255),f,b
  8007  003B52  2388               	addwfc	(??___ftge+2)& (0+255),f,b
  8008  003B54  0E00               	movlw	0
  8009  003B56  0100               	movlb	0	; () banked
  8010  003B58  2586               	addwf	??___ftge& (0+255),w,b
  8011  003B5A  0100               	movlb	0	; () banked
  8012  003B5C  6F83               	movwf	___ftge@ff2& (0+255),b
  8013  003B5E  0E00               	movlw	0
  8014  003B60  0100               	movlb	0	; () banked
  8015  003B62  2187               	addwfc	(??___ftge+1)& (0+255),w,b
  8016  003B64  0100               	movlb	0	; () banked
  8017  003B66  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  8018  003B68  0E80               	movlw	128
  8019  003B6A  0100               	movlb	0	; () banked
  8020  003B6C  2188               	addwfc	(??___ftge+2)& (0+255),w,b
  8021  003B6E  0100               	movlb	0	; () banked
  8022  003B70  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  8023  003B72                     l4192:
  8024                           
  8025                           ; BSR set to: 0
  8026  003B72  0E00               	movlw	0
  8027  003B74  0100               	movlb	0	; () banked
  8028  003B76  1B80               	xorwf	___ftge@ff1& (0+255),f,b
  8029  003B78  0E00               	movlw	0
  8030  003B7A  0100               	movlb	0	; () banked
  8031  003B7C  1B81               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  8032  003B7E  0E80               	movlw	128
  8033  003B80  0100               	movlb	0	; () banked
  8034  003B82  1B82               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  8035                           
  8036                           ; BSR set to: 0
  8037  003B84  0E00               	movlw	0
  8038  003B86  0100               	movlb	0	; () banked
  8039  003B88  1B83               	xorwf	___ftge@ff2& (0+255),f,b
  8040  003B8A  0E00               	movlw	0
  8041  003B8C  0100               	movlb	0	; () banked
  8042  003B8E  1B84               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  8043  003B90  0E80               	movlw	128
  8044  003B92  0100               	movlb	0	; () banked
  8045  003B94  1B85               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  8046  003B96  0100               	movlb	0	; () banked
  8047  003B98  5183               	movf	___ftge@ff2& (0+255),w,b
  8048  003B9A  0100               	movlb	0	; () banked
  8049  003B9C  5D80               	subwf	___ftge@ff1& (0+255),w,b
  8050  003B9E  0100               	movlb	0	; () banked
  8051  003BA0  5184               	movf	(___ftge@ff2+1)& (0+255),w,b
  8052  003BA2  0100               	movlb	0	; () banked
  8053  003BA4  5981               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  8054  003BA6  0100               	movlb	0	; () banked
  8055  003BA8  5185               	movf	(___ftge@ff2+2)& (0+255),w,b
  8056  003BAA  0100               	movlb	0	; () banked
  8057  003BAC  5982               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  8058  003BAE  B0D8               	btfsc	status,0,c
  8059  003BB0  D002               	goto	l4198
  8060                           
  8061                           ; BSR set to: 0
  8062  003BB2  90D8               	bcf	status,0,c
  8063  003BB4  0012               	return	
  8064  003BB6                     l4198:
  8065                           
  8066                           ; BSR set to: 0
  8067  003BB6  80D8               	bsf	status,0,c
  8068                           
  8069                           ; BSR set to: 0
  8070  003BB8  0012               	return	
  8071  003BBA                     __end_of___ftge:
  8072                           	opt stack 0
  8073                           tblptru	equ	0xFF8
  8074                           tblptrh	equ	0xFF7
  8075                           tblptrl	equ	0xFF6
  8076                           tablat	equ	0xFF5
  8077                           prodh	equ	0xFF4
  8078                           prodl	equ	0xFF3
  8079                           intcon	equ	0xFF2
  8080                           intcon2	equ	0xFF1
  8081                           intcon3	equ	0xFF0
  8082                           postinc0	equ	0xFEE
  8083                           wreg	equ	0xFE8
  8084                           postinc2	equ	0xFDE
  8085                           postdec2	equ	0xFDD
  8086                           fsr2h	equ	0xFDA
  8087                           fsr2l	equ	0xFD9
  8088                           status	equ	0xFD8
  8089                           
  8090 ;; *************** function _next_address *****************
  8091 ;; Defined at:
  8092 ;;		line 544 in file "main.c"
  8093 ;; Parameters:    Size  Location     Type
  8094 ;;  address         2    0[BANK0 ] unsigned int 
  8095 ;; Auto vars:     Size  Location     Type
  8096 ;;		None
  8097 ;; Return value:  Size  Location     Type
  8098 ;;                  2    0[BANK0 ] unsigned int 
  8099 ;; Registers used:
  8100 ;;		wreg, status,2, status,0
  8101 ;; Tracked objects:
  8102 ;;		On entry : 0/0
  8103 ;;		On exit  : 0/0
  8104 ;;		Unchanged: 0/0
  8105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8106 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8109 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8110 ;;Total ram usage:        2 bytes
  8111 ;; Hardware stack levels used:    1
  8112 ;; Hardware stack levels required when called:    6
  8113 ;; This function calls:
  8114 ;;		Nothing
  8115 ;; This function is called by:
  8116 ;;		_main
  8117 ;;		_show_log
  8118 ;; This function uses a non-reentrant model
  8119 ;;
  8120                           
  8121                           	psect	text20
  8122  004A10                     __ptext20:
  8123                           	opt stack 0
  8124  004A10                     _next_address:
  8125                           	opt stack 23
  8126                           
  8127                           ;main.c: 545: return address + 8;
  8128                           
  8129                           ; BSR set to: 0
  8130                           ;incstack = 0
  8131  004A10  0E08               	movlw	8
  8132  004A12  0100               	movlb	0	; () banked
  8133  004A14  2580               	addwf	next_address@address& (0+255),w,b
  8134  004A16  0100               	movlb	0	; () banked
  8135  004A18  6F80               	movwf	?_next_address& (0+255),b
  8136  004A1A  0E00               	movlw	0
  8137  004A1C  0100               	movlb	0	; () banked
  8138  004A1E  2181               	addwfc	(next_address@address+1)& (0+255),w,b
  8139  004A20  0100               	movlb	0	; () banked
  8140  004A22  6F81               	movwf	(?_next_address+1)& (0+255),b
  8141  004A24  0012               	return	
  8142  004A26                     __end_of_next_address:
  8143                           	opt stack 0
  8144                           tblptru	equ	0xFF8
  8145                           tblptrh	equ	0xFF7
  8146                           tblptrl	equ	0xFF6
  8147                           tablat	equ	0xFF5
  8148                           prodh	equ	0xFF4
  8149                           prodl	equ	0xFF3
  8150                           intcon	equ	0xFF2
  8151                           intcon2	equ	0xFF1
  8152                           intcon3	equ	0xFF0
  8153                           postinc0	equ	0xFEE
  8154                           wreg	equ	0xFE8
  8155                           postinc2	equ	0xFDE
  8156                           postdec2	equ	0xFDD
  8157                           fsr2h	equ	0xFDA
  8158                           fsr2l	equ	0xFD9
  8159                           status	equ	0xFD8
  8160                           
  8161 ;; *************** function _Eeprom_ReadByte *****************
  8162 ;; Defined at:
  8163 ;;		line 491 in file "main.c"
  8164 ;; Parameters:    Size  Location     Type
  8165 ;;  address         2    0[BANK0 ] unsigned int 
  8166 ;; Auto vars:     Size  Location     Type
  8167 ;;		None
  8168 ;; Return value:  Size  Location     Type
  8169 ;;                  1    wreg      unsigned char 
  8170 ;; Registers used:
  8171 ;;		wreg, status,2
  8172 ;; Tracked objects:
  8173 ;;		On entry : 0/0
  8174 ;;		On exit  : 0/0
  8175 ;;		Unchanged: 0/0
  8176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8177 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8180 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8181 ;;Total ram usage:        2 bytes
  8182 ;; Hardware stack levels used:    1
  8183 ;; Hardware stack levels required when called:    6
  8184 ;; This function calls:
  8185 ;;		Nothing
  8186 ;; This function is called by:
  8187 ;;		_show_log
  8188 ;; This function uses a non-reentrant model
  8189 ;;
  8190                           
  8191                           	psect	text21
  8192  0049F8                     __ptext21:
  8193                           	opt stack 0
  8194  0049F8                     _Eeprom_ReadByte:
  8195                           	opt stack 23
  8196                           
  8197                           ;main.c: 493: EEADRH = (uint8_t)(address >> 8);
  8198                           
  8199                           ; BSR set to: 0
  8200                           ;incstack = 0
  8201  0049F8  0100               	movlb	0	; () banked
  8202  0049FA  5181               	movf	(Eeprom_ReadByte@address+1)& (0+255),w,b
  8203  0049FC  6EAA               	movwf	4010,c	;volatile
  8204                           
  8205                           ; BSR set to: 0
  8206                           ;main.c: 494: EEADR = (uint8_t)address;
  8207  0049FE  C080  FFA9         	movff	Eeprom_ReadByte@address,4009	;volatile
  8208                           
  8209                           ; BSR set to: 0
  8210                           ;main.c: 496: EECON1bits.EEPGD = 0;
  8211  004A02  9EA6               	bcf	4006,7,c	;volatile
  8212                           
  8213                           ; BSR set to: 0
  8214                           ;main.c: 497: EECON1bits.CFGS = 0;
  8215  004A04  9CA6               	bcf	4006,6,c	;volatile
  8216                           
  8217                           ; BSR set to: 0
  8218                           ;main.c: 498: EECON1bits.RD = 1;
  8219  004A06  80A6               	bsf	4006,0,c	;volatile
  8220  004A08                     l289:
  8221  004A08  B0A6               	btfsc	4006,0,c	;volatile
  8222  004A0A  D7FE               	goto	l289
  8223                           
  8224                           ;main.c: 504: return EEDATA;
  8225  004A0C  50A8               	movf	4008,w,c	;volatile
  8226  004A0E  0012               	return	
  8227  004A10                     __end_of_Eeprom_ReadByte:
  8228                           	opt stack 0
  8229                           tblptru	equ	0xFF8
  8230                           tblptrh	equ	0xFF7
  8231                           tblptrl	equ	0xFF6
  8232                           tablat	equ	0xFF5
  8233                           prodh	equ	0xFF4
  8234                           prodl	equ	0xFF3
  8235                           intcon	equ	0xFF2
  8236                           intcon2	equ	0xFF1
  8237                           intcon3	equ	0xFF0
  8238                           postinc0	equ	0xFEE
  8239                           wreg	equ	0xFE8
  8240                           postinc2	equ	0xFDE
  8241                           postdec2	equ	0xFDD
  8242                           fsr2h	equ	0xFDA
  8243                           fsr2l	equ	0xFD9
  8244                           status	equ	0xFD8
  8245                           
  8246 ;; *************** function _set_time *****************
  8247 ;; Defined at:
  8248 ;;		line 321 in file "main.c"
  8249 ;; Parameters:    Size  Location     Type
  8250 ;;		None
  8251 ;; Auto vars:     Size  Location     Type
  8252 ;;  i               1    3[BANK0 ] unsigned char 
  8253 ;; Return value:  Size  Location     Type
  8254 ;;                  1    wreg      void 
  8255 ;; Registers used:
  8256 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8257 ;; Tracked objects:
  8258 ;;		On entry : 0/0
  8259 ;;		On exit  : 0/0
  8260 ;;		Unchanged: 0/0
  8261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8263 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8265 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8266 ;;Total ram usage:        1 bytes
  8267 ;; Hardware stack levels used:    1
  8268 ;; Hardware stack levels required when called:    8
  8269 ;; This function calls:
  8270 ;;		_I2C_Master_Start
  8271 ;;		_I2C_Master_Stop
  8272 ;;		_I2C_Master_Write
  8273 ;; This function is called by:
  8274 ;;		_main
  8275 ;; This function uses a non-reentrant model
  8276 ;;
  8277                           
  8278                           	psect	text22
  8279  004594                     __ptext22:
  8280                           	opt stack 0
  8281  004594                     _set_time:
  8282                           	opt stack 22
  8283                           
  8284                           ;main.c: 322: I2C_Master_Start();
  8285                           
  8286                           ;incstack = 0
  8287  004594  EC42  F025         	call	_I2C_Master_Start	;wreg free
  8288                           
  8289                           ;main.c: 323: I2C_Master_Write(0b11010000);
  8290  004598  0E00               	movlw	0
  8291  00459A  0100               	movlb	0	; () banked
  8292  00459C  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8293  00459E  0ED0               	movlw	208
  8294  0045A0  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8295  0045A2  EC39  F025         	call	_I2C_Master_Write	;wreg free
  8296                           
  8297                           ;main.c: 324: I2C_Master_Write(0x00);
  8298  0045A6  0E00               	movlw	0
  8299  0045A8  0100               	movlb	0	; () banked
  8300  0045AA  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8301  0045AC  0E00               	movlw	0
  8302  0045AE  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8303  0045B0  EC39  F025         	call	_I2C_Master_Write	;wreg free
  8304                           
  8305                           ;main.c: 325: for(char i=0; i<7; i++){
  8306  0045B4  0E00               	movlw	0
  8307  0045B6  0100               	movlb	0	; () banked
  8308  0045B8  6F83               	movwf	set_time@i& (0+255),b
  8309  0045BA                     l5270:
  8310                           
  8311                           ; BSR set to: 0
  8312  0045BA  0E06               	movlw	6
  8313  0045BC  0100               	movlb	0	; () banked
  8314  0045BE  6583               	cpfsgt	set_time@i& (0+255),b
  8315  0045C0  D001               	goto	l5274
  8316  0045C2  D013               	goto	l5280
  8317  0045C4                     l5274:
  8318                           
  8319                           ; BSR set to: 0
  8320                           ;main.c: 326: I2C_Master_Write(happynewyear[i]);
  8321  0045C4  0100               	movlb	0	; () banked
  8322  0045C6  5183               	movf	set_time@i& (0+255),w,b
  8323  0045C8  0D01               	mullw	1
  8324  0045CA  0E34               	movlw	low _happynewyear
  8325  0045CC  24F3               	addwf	prodl,w,c
  8326  0045CE  6EF6               	movwf	tblptrl,c
  8327  0045D0  0EFF               	movlw	high _happynewyear
  8328  0045D2  20F4               	addwfc	prodh,w,c
  8329  0045D4  6EF7               	movwf	tblptrh,c
  8330  0045D6                     	if	0	;There are less than 3 active tblptr bytes
  8331  0045D6                     	endif
  8332  0045D6  0008               	tblrd		*
  8333  0045D8  50F5               	movf	tablat,w,c
  8334  0045DA  0100               	movlb	0	; () banked
  8335  0045DC  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8336  0045DE  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  8337  0045E0  EC39  F025         	call	_I2C_Master_Write	;wreg free
  8338  0045E4  0100               	movlb	0	; () banked
  8339  0045E6  2B83               	incf	set_time@i& (0+255),f,b
  8340  0045E8  D7E8               	goto	l5270
  8341  0045EA                     l5280:
  8342                           
  8343                           ; BSR set to: 0
  8344                           ;main.c: 327: }
  8345                           ;main.c: 328: I2C_Master_Stop();
  8346  0045EA  EC3E  F025         	call	_I2C_Master_Stop	;wreg free
  8347  0045EE  0012               	return		;funcret
  8348  0045F0                     __end_of_set_time:
  8349                           	opt stack 0
  8350                           tblptru	equ	0xFF8
  8351                           tblptrh	equ	0xFF7
  8352                           tblptrl	equ	0xFF6
  8353                           tablat	equ	0xFF5
  8354                           prodh	equ	0xFF4
  8355                           prodl	equ	0xFF3
  8356                           intcon	equ	0xFF2
  8357                           intcon2	equ	0xFF1
  8358                           intcon3	equ	0xFF0
  8359                           postinc0	equ	0xFEE
  8360                           wreg	equ	0xFE8
  8361                           postinc2	equ	0xFDE
  8362                           postdec2	equ	0xFDD
  8363                           fsr2h	equ	0xFDA
  8364                           fsr2l	equ	0xFD9
  8365                           status	equ	0xFD8
  8366                           
  8367 ;; *************** function _readADC *****************
  8368 ;; Defined at:
  8369 ;;		line 454 in file "main.c"
  8370 ;; Parameters:    Size  Location     Type
  8371 ;;  channel         1    wreg     unsigned char 
  8372 ;; Auto vars:     Size  Location     Type
  8373 ;;  channel         1    1[BANK0 ] unsigned char 
  8374 ;; Return value:  Size  Location     Type
  8375 ;;                  1    wreg      void 
  8376 ;; Registers used:
  8377 ;;		wreg, status,2, status,0, cstack
  8378 ;; Tracked objects:
  8379 ;;		On entry : 0/0
  8380 ;;		On exit  : 0/0
  8381 ;;		Unchanged: 0/0
  8382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8384 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8385 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8386 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8387 ;;Total ram usage:        2 bytes
  8388 ;; Hardware stack levels used:    1
  8389 ;; Hardware stack levels required when called:    6
  8390 ;; This function calls:
  8391 ;;		Nothing
  8392 ;; This function is called by:
  8393 ;;		_main
  8394 ;; This function uses a non-reentrant model
  8395 ;;
  8396                           
  8397                           	psect	text23
  8398  0048D0                     __ptext23:
  8399                           	opt stack 0
  8400  0048D0                     _readADC:
  8401                           	opt stack 24
  8402                           
  8403                           ;incstack = 0
  8404                           ;readADC@channel stored from wreg
  8405  0048D0  0100               	movlb	0	; () banked
  8406  0048D2  6F81               	movwf	readADC@channel& (0+255),b
  8407                           
  8408                           ;main.c: 456: ADCON0 = ((channel <<2));
  8409  0048D4  0100               	movlb	0	; () banked
  8410  0048D6  4581               	rlncf	readADC@channel& (0+255),w,b
  8411  0048D8  46E8               	rlncf	wreg,f,c
  8412  0048DA  0BFC               	andlw	252
  8413  0048DC  6EC2               	movwf	4034,c	;volatile
  8414                           
  8415                           ; BSR set to: 0
  8416                           ;main.c: 457: ADON = 1;
  8417  0048DE  80C2               	bsf	4034,0,c	;volatile
  8418                           
  8419                           ; BSR set to: 0
  8420                           ;main.c: 458: ADCON0bits.GO = 1;
  8421  0048E0  82C2               	bsf	4034,1,c	;volatile
  8422                           
  8423                           ;main.c: 459: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(8000000/4000.0))
      +                          );}
  8424  0048E2  D009               	goto	l5298
  8425  0048E4                     l5296:
  8426  0048E4  0E0D               	movlw	13
  8427  0048E6  0100               	movlb	0	; () banked
  8428  0048E8  6F80               	movwf	??_readADC& (0+255),b
  8429  0048EA  0EFB               	movlw	251
  8430  0048EC                     u6847:
  8431  0048EC  2EE8               	decfsz	wreg,f,c
  8432  0048EE  D7FE               	bra	u6847
  8433  0048F0  2F80               	decfsz	??_readADC& (0+255),f,b
  8434  0048F2  D7FC               	bra	u6847
  8435  0048F4  D000               	nop2	
  8436  0048F6                     l5298:
  8437  0048F6  A2C2               	btfss	4034,1,c	;volatile
  8438  0048F8  0012               	return	
  8439  0048FA  D7F4               	goto	l5296
  8440  0048FC                     __end_of_readADC:
  8441                           	opt stack 0
  8442                           tblptru	equ	0xFF8
  8443                           tblptrh	equ	0xFF7
  8444                           tblptrl	equ	0xFF6
  8445                           tablat	equ	0xFF5
  8446                           prodh	equ	0xFF4
  8447                           prodl	equ	0xFF3
  8448                           intcon	equ	0xFF2
  8449                           intcon2	equ	0xFF1
  8450                           intcon3	equ	0xFF0
  8451                           postinc0	equ	0xFEE
  8452                           wreg	equ	0xFE8
  8453                           postinc2	equ	0xFDE
  8454                           postdec2	equ	0xFDD
  8455                           fsr2h	equ	0xFDA
  8456                           fsr2l	equ	0xFD9
  8457                           status	equ	0xFD8
  8458                           
  8459 ;; *************** function _move_stepper *****************
  8460 ;; Defined at:
  8461 ;;		line 577 in file "main.c"
  8462 ;; Parameters:    Size  Location     Type
  8463 ;;  loop_duratio    2    0[BANK0 ] unsigned int 
  8464 ;;  duty            2    2[BANK0 ] unsigned int 
  8465 ;; Auto vars:     Size  Location     Type
  8466 ;;  i               2    5[BANK0 ] unsigned int 
  8467 ;; Return value:  Size  Location     Type
  8468 ;;                  1    wreg      void 
  8469 ;; Registers used:
  8470 ;;		wreg, status,2, status,0
  8471 ;; Tracked objects:
  8472 ;;		On entry : 0/0
  8473 ;;		On exit  : 0/0
  8474 ;;		Unchanged: 0/0
  8475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8476 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8477 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8478 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8479 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8480 ;;Total ram usage:        7 bytes
  8481 ;; Hardware stack levels used:    1
  8482 ;; Hardware stack levels required when called:    6
  8483 ;; This function calls:
  8484 ;;		Nothing
  8485 ;; This function is called by:
  8486 ;;		_main
  8487 ;; This function uses a non-reentrant model
  8488 ;;
  8489                           
  8490                           	psect	text24
  8491  0046A2                     __ptext24:
  8492                           	opt stack 0
  8493  0046A2                     _move_stepper:
  8494                           	opt stack 24
  8495                           
  8496                           ;main.c: 578: for(unsigned int i = 0; i < loop_duration; i++) {
  8497                           
  8498                           ;incstack = 0
  8499  0046A2  0E00               	movlw	0
  8500  0046A4  0100               	movlb	0	; () banked
  8501  0046A6  6F86               	movwf	(move_stepper@i+1)& (0+255),b
  8502  0046A8  0E00               	movlw	0
  8503  0046AA  6F85               	movwf	move_stepper@i& (0+255),b
  8504  0046AC  D017               	goto	l307
  8505  0046AE                     l308:
  8506                           
  8507                           ; BSR set to: 0
  8508                           ;main.c: 579: LATCbits.LATC0 = 1;
  8509  0046AE  808B               	bsf	3979,0,c	;volatile
  8510                           
  8511                           ;main.c: 580: LATCbits.LATC1 = 1;
  8512  0046B0  828B               	bsf	3979,1,c	;volatile
  8513                           
  8514                           ; BSR set to: 0
  8515                           ;main.c: 581: _delay((unsigned long)((500)*(8000000/4000000.0)));
  8516  0046B2  0EC8               	movlw	200
  8517  0046B4                     u6857:
  8518  0046B4  D000               	nop2	
  8519  0046B6  2EE8               	decfsz	wreg,f,c
  8520  0046B8  D7FD               	bra	u6857
  8521                           
  8522                           ;main.c: 582: LATCbits.LATC0 = 0;
  8523  0046BA  908B               	bcf	3979,0,c	;volatile
  8524                           
  8525                           ;main.c: 583: _delay((unsigned long)((500)*(8000000/4000000.0)));
  8526  0046BC  0EC8               	movlw	200
  8527  0046BE                     u6867:
  8528  0046BE  D000               	nop2	
  8529  0046C0  2EE8               	decfsz	wreg,f,c
  8530  0046C2  D7FD               	bra	u6867
  8531                           
  8532                           ;main.c: 584: _delay((unsigned long)((10)*(8000000/4000.0)));
  8533  0046C4  0E1A               	movlw	26
  8534  0046C6  0100               	movlb	0	; () banked
  8535  0046C8  6F84               	movwf	??_move_stepper& (0+255),b
  8536  0046CA  0EF8               	movlw	248
  8537  0046CC                     u6877:
  8538  0046CC  2EE8               	decfsz	wreg,f,c
  8539  0046CE  D7FE               	bra	u6877
  8540  0046D0  2F84               	decfsz	??_move_stepper& (0+255),f,b
  8541  0046D2  D7FC               	bra	u6877
  8542  0046D4  F000               	nop	
  8543  0046D6  0100               	movlb	0	; () banked
  8544  0046D8  4B85               	infsnz	move_stepper@i& (0+255),f,b
  8545  0046DA  2B86               	incf	(move_stepper@i+1)& (0+255),f,b
  8546  0046DC                     l307:
  8547                           
  8548                           ; BSR set to: 0
  8549  0046DC  0100               	movlb	0	; () banked
  8550  0046DE  5180               	movf	move_stepper@loop_duration& (0+255),w,b
  8551  0046E0  0100               	movlb	0	; () banked
  8552  0046E2  5D85               	subwf	move_stepper@i& (0+255),w,b
  8553  0046E4  0100               	movlb	0	; () banked
  8554  0046E6  5181               	movf	(move_stepper@loop_duration+1)& (0+255),w,b
  8555  0046E8  0100               	movlb	0	; () banked
  8556  0046EA  5986               	subwfb	(move_stepper@i+1)& (0+255),w,b
  8557  0046EC  B0D8               	btfsc	status,0,c
  8558  0046EE  0012               	return	
  8559  0046F0  D7DE               	goto	l308
  8560  0046F2                     __end_of_move_stepper:
  8561                           	opt stack 0
  8562                           tblptru	equ	0xFF8
  8563                           tblptrh	equ	0xFF7
  8564                           tblptrl	equ	0xFF6
  8565                           tablat	equ	0xFF5
  8566                           prodh	equ	0xFF4
  8567                           prodl	equ	0xFF3
  8568                           intcon	equ	0xFF2
  8569                           intcon2	equ	0xFF1
  8570                           intcon3	equ	0xFF0
  8571                           postinc0	equ	0xFEE
  8572                           wreg	equ	0xFE8
  8573                           postinc2	equ	0xFDE
  8574                           postdec2	equ	0xFDD
  8575                           fsr2h	equ	0xFDA
  8576                           fsr2l	equ	0xFD9
  8577                           status	equ	0xFD8
  8578                           
  8579 ;; *************** function _initLCD *****************
  8580 ;; Defined at:
  8581 ;;		line 14 in file "lcd.c"
  8582 ;; Parameters:    Size  Location     Type
  8583 ;;		None
  8584 ;; Auto vars:     Size  Location     Type
  8585 ;;		None
  8586 ;; Return value:  Size  Location     Type
  8587 ;;                  1    wreg      void 
  8588 ;; Registers used:
  8589 ;;		wreg, status,2, status,0, cstack
  8590 ;; Tracked objects:
  8591 ;;		On entry : 0/0
  8592 ;;		On exit  : 0/0
  8593 ;;		Unchanged: 0/0
  8594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8597 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8598 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8599 ;;Total ram usage:        1 bytes
  8600 ;; Hardware stack levels used:    1
  8601 ;; Hardware stack levels required when called:    8
  8602 ;; This function calls:
  8603 ;;		_lcdInst
  8604 ;; This function is called by:
  8605 ;;		_main
  8606 ;; This function uses a non-reentrant model
  8607 ;;
  8608                           
  8609                           	psect	text25
  8610  00473E                     __ptext25:
  8611                           	opt stack 0
  8612  00473E                     _initLCD:
  8613                           	opt stack 22
  8614                           
  8615                           ;lcd.c: 15: _delay((unsigned long)((15)*(8000000/4000.0)));
  8616                           
  8617                           ; BSR set to: 0
  8618                           ;incstack = 0
  8619  00473E  0E27               	movlw	39
  8620  004740  0100               	movlb	0	; () banked
  8621  004742  6F83               	movwf	??_initLCD& (0+255),b
  8622  004744  0EF5               	movlw	245
  8623  004746                     u6887:
  8624  004746  2EE8               	decfsz	wreg,f,c
  8625  004748  D7FE               	bra	u6887
  8626  00474A  2F83               	decfsz	??_initLCD& (0+255),f,b
  8627  00474C  D7FC               	bra	u6887
  8628                           
  8629                           ;lcd.c: 16: lcdInst(0b00110011);
  8630  00474E  0E33               	movlw	51
  8631  004750  EC25  F025         	call	_lcdInst
  8632                           
  8633                           ;lcd.c: 17: lcdInst(0b00110010);
  8634  004754  0E32               	movlw	50
  8635  004756  EC25  F025         	call	_lcdInst
  8636                           
  8637                           ;lcd.c: 18: lcdInst(0b00101000);
  8638  00475A  0E28               	movlw	40
  8639  00475C  EC25  F025         	call	_lcdInst
  8640                           
  8641                           ;lcd.c: 19: lcdInst(0b00001111);
  8642  004760  0E0F               	movlw	15
  8643  004762  EC25  F025         	call	_lcdInst
  8644                           
  8645                           ;lcd.c: 20: lcdInst(0b00000110);
  8646  004766  0E06               	movlw	6
  8647  004768  EC25  F025         	call	_lcdInst
  8648                           
  8649                           ;lcd.c: 21: lcdInst(0b00000001);
  8650  00476C  0E01               	movlw	1
  8651  00476E  EC25  F025         	call	_lcdInst
  8652                           
  8653                           ;lcd.c: 22: _delay((unsigned long)((15)*(8000000/4000.0)));
  8654  004772  0E27               	movlw	39
  8655  004774  0100               	movlb	0	; () banked
  8656  004776  6F83               	movwf	??_initLCD& (0+255),b
  8657  004778  0EF5               	movlw	245
  8658  00477A                     u6897:
  8659  00477A  2EE8               	decfsz	wreg,f,c
  8660  00477C  D7FE               	bra	u6897
  8661  00477E  2F83               	decfsz	??_initLCD& (0+255),f,b
  8662  004780  D7FC               	bra	u6897
  8663  004782  0012               	return		;funcret
  8664  004784                     __end_of_initLCD:
  8665                           	opt stack 0
  8666                           tblptru	equ	0xFF8
  8667                           tblptrh	equ	0xFF7
  8668                           tblptrl	equ	0xFF6
  8669                           tablat	equ	0xFF5
  8670                           prodh	equ	0xFF4
  8671                           prodl	equ	0xFF3
  8672                           intcon	equ	0xFF2
  8673                           intcon2	equ	0xFF1
  8674                           intcon3	equ	0xFF0
  8675                           postinc0	equ	0xFEE
  8676                           wreg	equ	0xFE8
  8677                           postinc2	equ	0xFDE
  8678                           postdec2	equ	0xFDD
  8679                           fsr2h	equ	0xFDA
  8680                           fsr2l	equ	0xFD9
  8681                           status	equ	0xFD8
  8682                           
  8683 ;; *************** function _current_time *****************
  8684 ;; Defined at:
  8685 ;;		line 409 in file "main.c"
  8686 ;; Parameters:    Size  Location     Type
  8687 ;;  time            2    3[BANK0 ] PTR unsigned char 
  8688 ;;		 -> main@time(7), 
  8689 ;; Auto vars:     Size  Location     Type
  8690 ;;  i               1    7[BANK0 ] unsigned char 
  8691 ;; Return value:  Size  Location     Type
  8692 ;;                  1    wreg      void 
  8693 ;; Registers used:
  8694 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8695 ;; Tracked objects:
  8696 ;;		On entry : 0/0
  8697 ;;		On exit  : 0/0
  8698 ;;		Unchanged: 0/0
  8699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8700 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8701 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8702 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8703 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8704 ;;Total ram usage:        5 bytes
  8705 ;; Hardware stack levels used:    1
  8706 ;; Hardware stack levels required when called:    8
  8707 ;; This function calls:
  8708 ;;		_I2C_Master_Read
  8709 ;;		_I2C_Master_Start
  8710 ;;		_I2C_Master_Stop
  8711 ;;		_I2C_Master_Write
  8712 ;;		_lcdInst
  8713 ;; This function is called by:
  8714 ;;		_main
  8715 ;; This function uses a non-reentrant model
  8716 ;;
  8717                           
  8718                           	psect	text26
  8719  003BBA                     __ptext26:
  8720                           	opt stack 0
  8721  003BBA                     _current_time:
  8722                           	opt stack 22
  8723                           
  8724                           ;main.c: 411: I2C_Master_Start();
  8725                           
  8726                           ;incstack = 0
  8727  003BBA  EC42  F025         	call	_I2C_Master_Start	;wreg free
  8728                           
  8729                           ;main.c: 412: I2C_Master_Write(0b11010000);
  8730  003BBE  0E00               	movlw	0
  8731  003BC0  0100               	movlb	0	; () banked
  8732  003BC2  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8733  003BC4  0ED0               	movlw	208
  8734  003BC6  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8735  003BC8  EC39  F025         	call	_I2C_Master_Write	;wreg free
  8736                           
  8737                           ;main.c: 413: I2C_Master_Write(0x00);
  8738  003BCC  0E00               	movlw	0
  8739  003BCE  0100               	movlb	0	; () banked
  8740  003BD0  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8741  003BD2  0E00               	movlw	0
  8742  003BD4  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8743  003BD6  EC39  F025         	call	_I2C_Master_Write	;wreg free
  8744                           
  8745                           ;main.c: 414: I2C_Master_Stop();
  8746  003BDA  EC3E  F025         	call	_I2C_Master_Stop	;wreg free
  8747                           
  8748                           ;main.c: 417: I2C_Master_Start();
  8749  003BDE  EC42  F025         	call	_I2C_Master_Start	;wreg free
  8750                           
  8751                           ;main.c: 418: I2C_Master_Write(0b11010001);
  8752  003BE2  0E00               	movlw	0
  8753  003BE4  0100               	movlb	0	; () banked
  8754  003BE6  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8755  003BE8  0ED1               	movlw	209
  8756  003BEA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8757  003BEC  EC39  F025         	call	_I2C_Master_Write	;wreg free
  8758                           
  8759                           ;main.c: 419: for(unsigned char i=0;i<0x06;i++){
  8760  003BF0  0E00               	movlw	0
  8761  003BF2  0100               	movlb	0	; () banked
  8762  003BF4  6F87               	movwf	current_time@i& (0+255),b
  8763  003BF6                     l5304:
  8764                           
  8765                           ; BSR set to: 0
  8766  003BF6  0E05               	movlw	5
  8767  003BF8  0100               	movlb	0	; () banked
  8768  003BFA  6587               	cpfsgt	current_time@i& (0+255),b
  8769  003BFC  D001               	goto	l5308
  8770  003BFE  D012               	goto	l5314
  8771  003C00                     l5308:
  8772                           
  8773                           ; BSR set to: 0
  8774                           ;main.c: 420: time[i] = I2C_Master_Read(1);
  8775  003C00  0100               	movlb	0	; () banked
  8776  003C02  5187               	movf	current_time@i& (0+255),w,b
  8777  003C04  0D01               	mullw	1
  8778  003C06  50F3               	movf	prodl,w,c
  8779  003C08  0100               	movlb	0	; () banked
  8780  003C0A  2583               	addwf	current_time@time& (0+255),w,b
  8781  003C0C  6ED9               	movwf	fsr2l,c
  8782  003C0E  50F4               	movf	prodh,w,c
  8783  003C10  0100               	movlb	0	; () banked
  8784  003C12  2184               	addwfc	(current_time@time+1)& (0+255),w,b
  8785  003C14  6EDA               	movwf	fsr2h,c
  8786  003C16  0E01               	movlw	1
  8787  003C18  EC51  F024         	call	_I2C_Master_Read
  8788  003C1C  6EDF               	movwf	indf2,c
  8789  003C1E  0100               	movlb	0	; () banked
  8790  003C20  2B87               	incf	current_time@i& (0+255),f,b
  8791  003C22  D7E9               	goto	l5304
  8792  003C24                     l5314:
  8793                           
  8794                           ; BSR set to: 0
  8795                           ;main.c: 421: }
  8796                           ;main.c: 422: time[6] = I2C_Master_Read(0);
  8797  003C24  0100               	movlb	0	; () banked
  8798  003C26  EE20 F006          	lfsr	2,6
  8799  003C2A  5183               	movf	current_time@time& (0+255),w,b
  8800  003C2C  26D9               	addwf	fsr2l,f,c
  8801  003C2E  5184               	movf	(current_time@time+1)& (0+255),w,b
  8802  003C30  22DA               	addwfc	fsr2h,f,c
  8803  003C32  0E00               	movlw	0
  8804  003C34  EC51  F024         	call	_I2C_Master_Read
  8805  003C38  6EDF               	movwf	indf2,c
  8806                           
  8807                           ;main.c: 423: I2C_Master_Stop();
  8808  003C3A  EC3E  F025         	call	_I2C_Master_Stop	;wreg free
  8809                           
  8810                           ;main.c: 424: { lcdInst(0b00000001); _delay((unsigned long)((15)*(8000000/4000.0))); };
  8811  003C3E  0E01               	movlw	1
  8812  003C40  EC25  F025         	call	_lcdInst
  8813  003C44  0E27               	movlw	39
  8814  003C46  0100               	movlb	0	; () banked
  8815  003C48  6F85               	movwf	??_current_time& (0+255),b
  8816  003C4A  0EF5               	movlw	245
  8817  003C4C                     u6907:
  8818  003C4C  2EE8               	decfsz	wreg,f,c
  8819  003C4E  D7FE               	bra	u6907
  8820  003C50  2F85               	decfsz	??_current_time& (0+255),f,b
  8821  003C52  D7FC               	bra	u6907
  8822                           
  8823                           ;main.c: 425: lcdInst(0b10000000);;
  8824  003C54  0E80               	movlw	128
  8825  003C56  EC25  F025         	call	_lcdInst
  8826                           
  8827                           ;main.c: 427: lcdInst(0b11000000);;
  8828  003C5A  0EC0               	movlw	192
  8829  003C5C  EC25  F025         	call	_lcdInst
  8830                           
  8831                           ;main.c: 430: _delay((unsigned long)((300)*(8000000/4000.0)));
  8832  003C60  0E04               	movlw	4
  8833  003C62  0100               	movlb	0	; () banked
  8834  003C64  6F86               	movwf	(??_current_time+1)& (0+255),b
  8835  003C66  0E0C               	movlw	12
  8836  003C68  0100               	movlb	0	; () banked
  8837  003C6A  6F85               	movwf	??_current_time& (0+255),b
  8838  003C6C  0E33               	movlw	51
  8839  003C6E                     u6917:
  8840  003C6E  2EE8               	decfsz	wreg,f,c
  8841  003C70  D7FE               	bra	u6917
  8842  003C72  2F85               	decfsz	??_current_time& (0+255),f,b
  8843  003C74  D7FC               	bra	u6917
  8844  003C76  2F86               	decfsz	(??_current_time+1)& (0+255),f,b
  8845  003C78  D7FA               	bra	u6917
  8846  003C7A  D000               	nop2	
  8847  003C7C  0012               	return		;funcret
  8848  003C7E                     __end_of_current_time:
  8849                           	opt stack 0
  8850                           tblptru	equ	0xFF8
  8851                           tblptrh	equ	0xFF7
  8852                           tblptrl	equ	0xFF6
  8853                           tablat	equ	0xFF5
  8854                           prodh	equ	0xFF4
  8855                           prodl	equ	0xFF3
  8856                           intcon	equ	0xFF2
  8857                           intcon2	equ	0xFF1
  8858                           intcon3	equ	0xFF0
  8859                           postinc0	equ	0xFEE
  8860                           wreg	equ	0xFE8
  8861                           indf2	equ	0xFDF
  8862                           postinc2	equ	0xFDE
  8863                           postdec2	equ	0xFDD
  8864                           fsr2h	equ	0xFDA
  8865                           fsr2l	equ	0xFD9
  8866                           status	equ	0xFD8
  8867                           
  8868 ;; *************** function _lcdInst *****************
  8869 ;; Defined at:
  8870 ;;		line 25 in file "lcd.c"
  8871 ;; Parameters:    Size  Location     Type
  8872 ;;  data            1    wreg     unsigned char 
  8873 ;; Auto vars:     Size  Location     Type
  8874 ;;  data            1    2[BANK0 ] unsigned char 
  8875 ;; Return value:  Size  Location     Type
  8876 ;;                  1    wreg      void 
  8877 ;; Registers used:
  8878 ;;		wreg, status,2, status,0, cstack
  8879 ;; Tracked objects:
  8880 ;;		On entry : 0/0
  8881 ;;		On exit  : 0/0
  8882 ;;		Unchanged: 0/0
  8883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8885 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8887 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8888 ;;Total ram usage:        1 bytes
  8889 ;; Hardware stack levels used:    1
  8890 ;; Hardware stack levels required when called:    7
  8891 ;; This function calls:
  8892 ;;		_lcdNibble
  8893 ;; This function is called by:
  8894 ;;		_main
  8895 ;;		_current_time
  8896 ;;		_show_log
  8897 ;;		_initLCD
  8898 ;; This function uses a non-reentrant model
  8899 ;;
  8900                           
  8901                           	psect	text27
  8902  004A4A                     __ptext27:
  8903                           	opt stack 0
  8904  004A4A                     _lcdInst:
  8905                           	opt stack 22
  8906                           
  8907                           ;incstack = 0
  8908                           ;lcdInst@data stored from wreg
  8909  004A4A  0100               	movlb	0	; () banked
  8910  004A4C  6F82               	movwf	lcdInst@data& (0+255),b
  8911                           
  8912                           ;lcd.c: 26: LATDbits.LATD2 = 0;
  8913  004A4E  948C               	bcf	3980,2,c	;volatile
  8914                           
  8915                           ;lcd.c: 27: lcdNibble(data);
  8916  004A50  0100               	movlb	0	; () banked
  8917  004A52  5182               	movf	lcdInst@data& (0+255),w,b
  8918  004A54  EC33  F022         	call	_lcdNibble
  8919  004A58  0012               	return		;funcret
  8920  004A5A                     __end_of_lcdInst:
  8921                           	opt stack 0
  8922                           tblptru	equ	0xFF8
  8923                           tblptrh	equ	0xFF7
  8924                           tblptrl	equ	0xFF6
  8925                           tablat	equ	0xFF5
  8926                           prodh	equ	0xFF4
  8927                           prodl	equ	0xFF3
  8928                           intcon	equ	0xFF2
  8929                           intcon2	equ	0xFF1
  8930                           intcon3	equ	0xFF0
  8931                           postinc0	equ	0xFEE
  8932                           wreg	equ	0xFE8
  8933                           indf2	equ	0xFDF
  8934                           postinc2	equ	0xFDE
  8935                           postdec2	equ	0xFDD
  8936                           fsr2h	equ	0xFDA
  8937                           fsr2l	equ	0xFD9
  8938                           status	equ	0xFD8
  8939                           
  8940 ;; *************** function _lcdNibble *****************
  8941 ;; Defined at:
  8942 ;;		line 35 in file "lcd.c"
  8943 ;; Parameters:    Size  Location     Type
  8944 ;;  data            1    wreg     unsigned char 
  8945 ;; Auto vars:     Size  Location     Type
  8946 ;;  data            1    1[BANK0 ] unsigned char 
  8947 ;;  temp            1    0[BANK0 ] unsigned char 
  8948 ;; Return value:  Size  Location     Type
  8949 ;;                  1    wreg      void 
  8950 ;; Registers used:
  8951 ;;		wreg, status,2, status,0
  8952 ;; Tracked objects:
  8953 ;;		On entry : 0/0
  8954 ;;		On exit  : 0/0
  8955 ;;		Unchanged: 0/0
  8956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8958 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8960 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8961 ;;Total ram usage:        2 bytes
  8962 ;; Hardware stack levels used:    1
  8963 ;; Hardware stack levels required when called:    6
  8964 ;; This function calls:
  8965 ;;		Nothing
  8966 ;; This function is called by:
  8967 ;;		_lcdInst
  8968 ;;		_putch
  8969 ;; This function uses a non-reentrant model
  8970 ;;
  8971                           
  8972                           	psect	text28
  8973  004466                     __ptext28:
  8974                           	opt stack 0
  8975  004466                     _lcdNibble:
  8976                           	opt stack 21
  8977                           
  8978                           ;incstack = 0
  8979                           ;lcdNibble@data stored from wreg
  8980  004466  0100               	movlb	0	; () banked
  8981  004468  6F81               	movwf	lcdNibble@data& (0+255),b
  8982                           
  8983                           ;lcd.c: 37: char temp = data & 0xF0;
  8984  00446A  0100               	movlb	0	; () banked
  8985  00446C  5181               	movf	lcdNibble@data& (0+255),w,b
  8986  00446E  0BF0               	andlw	240
  8987  004470  0100               	movlb	0	; () banked
  8988  004472  6F80               	movwf	lcdNibble@temp& (0+255),b
  8989                           
  8990                           ;lcd.c: 38: LATD = LATD & 0x0F;
  8991  004474  508C               	movf	3980,w,c	;volatile
  8992  004476  0B0F               	andlw	15
  8993  004478  6E8C               	movwf	3980,c	;volatile
  8994                           
  8995                           ;lcd.c: 39: LATD = temp | LATD;
  8996  00447A  0100               	movlb	0	; () banked
  8997  00447C  5180               	movf	lcdNibble@temp& (0+255),w,b
  8998  00447E  108C               	iorwf	3980,w,c	;volatile
  8999  004480  6E8C               	movwf	3980,c	;volatile
  9000                           
  9001                           ; BSR set to: 0
  9002                           ;lcd.c: 41: LATDbits.LATD3 = 0;
  9003  004482  968C               	bcf	3980,3,c	;volatile
  9004                           
  9005                           ; BSR set to: 0
  9006                           ;lcd.c: 42: _delay((unsigned long)((25)*(8000000/4000000.0)));
  9007  004484  0E10               	movlw	16
  9008  004486                     u6927:
  9009  004486  2EE8               	decfsz	wreg,f,c
  9010  004488  D7FE               	bra	u6927
  9011  00448A  D000               	nop2	
  9012                           
  9013                           ;lcd.c: 43: LATDbits.LATD3 = 1;
  9014  00448C  868C               	bsf	3980,3,c	;volatile
  9015                           
  9016                           ;lcd.c: 44: _delay((unsigned long)((25)*(8000000/4000000.0)));
  9017  00448E  0E10               	movlw	16
  9018  004490                     u6937:
  9019  004490  2EE8               	decfsz	wreg,f,c
  9020  004492  D7FE               	bra	u6937
  9021  004494  D000               	nop2	
  9022                           
  9023                           ;lcd.c: 46: data = data << 4;
  9024  004496  0100               	movlb	0	; () banked
  9025  004498  3981               	swapf	lcdNibble@data& (0+255),w,b
  9026  00449A  0BF0               	andlw	240
  9027  00449C  0100               	movlb	0	; () banked
  9028  00449E  6F81               	movwf	lcdNibble@data& (0+255),b
  9029                           
  9030                           ;lcd.c: 48: temp = data & 0xF0;
  9031  0044A0  0100               	movlb	0	; () banked
  9032  0044A2  5181               	movf	lcdNibble@data& (0+255),w,b
  9033  0044A4  0BF0               	andlw	240
  9034  0044A6  0100               	movlb	0	; () banked
  9035  0044A8  6F80               	movwf	lcdNibble@temp& (0+255),b
  9036                           
  9037                           ;lcd.c: 49: LATD = LATD & 0x0F;
  9038  0044AA  508C               	movf	3980,w,c	;volatile
  9039  0044AC  0B0F               	andlw	15
  9040  0044AE  6E8C               	movwf	3980,c	;volatile
  9041                           
  9042                           ;lcd.c: 50: LATD = temp | LATD;
  9043  0044B0  0100               	movlb	0	; () banked
  9044  0044B2  5180               	movf	lcdNibble@temp& (0+255),w,b
  9045  0044B4  108C               	iorwf	3980,w,c	;volatile
  9046  0044B6  6E8C               	movwf	3980,c	;volatile
  9047                           
  9048                           ; BSR set to: 0
  9049                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  9050  0044B8  968C               	bcf	3980,3,c	;volatile
  9051                           
  9052                           ; BSR set to: 0
  9053                           ;lcd.c: 53: _delay((unsigned long)((25)*(8000000/4000000.0)));
  9054  0044BA  0E10               	movlw	16
  9055  0044BC                     u6947:
  9056  0044BC  2EE8               	decfsz	wreg,f,c
  9057  0044BE  D7FE               	bra	u6947
  9058  0044C0  D000               	nop2	
  9059                           
  9060                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  9061  0044C2  868C               	bsf	3980,3,c	;volatile
  9062                           
  9063                           ;lcd.c: 55: _delay((unsigned long)((25)*(8000000/4000000.0)));
  9064  0044C4  0E10               	movlw	16
  9065  0044C6                     u6957:
  9066  0044C6  2EE8               	decfsz	wreg,f,c
  9067  0044C8  D7FE               	bra	u6957
  9068  0044CA  D000               	nop2	
  9069  0044CC  0012               	return		;funcret
  9070  0044CE                     __end_of_lcdNibble:
  9071                           	opt stack 0
  9072                           tblptru	equ	0xFF8
  9073                           tblptrh	equ	0xFF7
  9074                           tblptrl	equ	0xFF6
  9075                           tablat	equ	0xFF5
  9076                           prodh	equ	0xFF4
  9077                           prodl	equ	0xFF3
  9078                           intcon	equ	0xFF2
  9079                           intcon2	equ	0xFF1
  9080                           intcon3	equ	0xFF0
  9081                           postinc0	equ	0xFEE
  9082                           wreg	equ	0xFE8
  9083                           indf2	equ	0xFDF
  9084                           postinc2	equ	0xFDE
  9085                           postdec2	equ	0xFDD
  9086                           fsr2h	equ	0xFDA
  9087                           fsr2l	equ	0xFD9
  9088                           status	equ	0xFD8
  9089                           
  9090 ;; *************** function _I2C_Master_Write *****************
  9091 ;; Defined at:
  9092 ;;		line 47 in file "I2C.c"
  9093 ;; Parameters:    Size  Location     Type
  9094 ;;  d               2    1[BANK0 ] unsigned int 
  9095 ;; Auto vars:     Size  Location     Type
  9096 ;;		None
  9097 ;; Return value:  Size  Location     Type
  9098 ;;                  1    wreg      void 
  9099 ;; Registers used:
  9100 ;;		wreg, status,2, status,0, cstack
  9101 ;; Tracked objects:
  9102 ;;		On entry : 0/0
  9103 ;;		On exit  : 0/0
  9104 ;;		Unchanged: 0/0
  9105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9106 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9109 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9110 ;;Total ram usage:        2 bytes
  9111 ;; Hardware stack levels used:    1
  9112 ;; Hardware stack levels required when called:    7
  9113 ;; This function calls:
  9114 ;;		_I2C_Master_Wait
  9115 ;; This function is called by:
  9116 ;;		_set_time
  9117 ;;		_current_time
  9118 ;; This function uses a non-reentrant model
  9119 ;;
  9120                           
  9121                           	psect	text29
  9122  004A72                     __ptext29:
  9123                           	opt stack 0
  9124  004A72                     _I2C_Master_Write:
  9125                           	opt stack 22
  9126                           
  9127                           ;I2C.c: 49: I2C_Master_Wait();
  9128                           
  9129                           ;incstack = 0
  9130  004A72  EC13  F025         	call	_I2C_Master_Wait	;wreg free
  9131                           
  9132                           ;I2C.c: 50: SSPBUF = d;
  9133  004A76  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  9134  004A7A  0012               	return		;funcret
  9135  004A7C                     __end_of_I2C_Master_Write:
  9136                           	opt stack 0
  9137                           tblptru	equ	0xFF8
  9138                           tblptrh	equ	0xFF7
  9139                           tblptrl	equ	0xFF6
  9140                           tablat	equ	0xFF5
  9141                           prodh	equ	0xFF4
  9142                           prodl	equ	0xFF3
  9143                           intcon	equ	0xFF2
  9144                           intcon2	equ	0xFF1
  9145                           intcon3	equ	0xFF0
  9146                           postinc0	equ	0xFEE
  9147                           wreg	equ	0xFE8
  9148                           indf2	equ	0xFDF
  9149                           postinc2	equ	0xFDE
  9150                           postdec2	equ	0xFDD
  9151                           fsr2h	equ	0xFDA
  9152                           fsr2l	equ	0xFD9
  9153                           status	equ	0xFD8
  9154                           
  9155 ;; *************** function _I2C_Master_Stop *****************
  9156 ;; Defined at:
  9157 ;;		line 41 in file "I2C.c"
  9158 ;; Parameters:    Size  Location     Type
  9159 ;;		None
  9160 ;; Auto vars:     Size  Location     Type
  9161 ;;		None
  9162 ;; Return value:  Size  Location     Type
  9163 ;;                  2   80[None  ] int 
  9164 ;; Registers used:
  9165 ;;		wreg, status,2, status,0, cstack
  9166 ;; Tracked objects:
  9167 ;;		On entry : 0/0
  9168 ;;		On exit  : 0/0
  9169 ;;		Unchanged: 0/0
  9170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9174 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9175 ;;Total ram usage:        0 bytes
  9176 ;; Hardware stack levels used:    1
  9177 ;; Hardware stack levels required when called:    7
  9178 ;; This function calls:
  9179 ;;		_I2C_Master_Wait
  9180 ;; This function is called by:
  9181 ;;		_set_time
  9182 ;;		_current_time
  9183 ;; This function uses a non-reentrant model
  9184 ;;
  9185                           
  9186                           	psect	text30
  9187  004A7C                     __ptext30:
  9188                           	opt stack 0
  9189  004A7C                     _I2C_Master_Stop:
  9190                           	opt stack 22
  9191                           
  9192                           ;I2C.c: 43: I2C_Master_Wait();
  9193                           
  9194                           ;incstack = 0
  9195  004A7C  EC13  F025         	call	_I2C_Master_Wait	;wreg free
  9196                           
  9197                           ;I2C.c: 44: PEN = 1;
  9198  004A80  84C5               	bsf	4037,2,c	;volatile
  9199  004A82  0012               	return		;funcret
  9200  004A84                     __end_of_I2C_Master_Stop:
  9201                           	opt stack 0
  9202                           tblptru	equ	0xFF8
  9203                           tblptrh	equ	0xFF7
  9204                           tblptrl	equ	0xFF6
  9205                           tablat	equ	0xFF5
  9206                           prodh	equ	0xFF4
  9207                           prodl	equ	0xFF3
  9208                           intcon	equ	0xFF2
  9209                           intcon2	equ	0xFF1
  9210                           intcon3	equ	0xFF0
  9211                           postinc0	equ	0xFEE
  9212                           wreg	equ	0xFE8
  9213                           indf2	equ	0xFDF
  9214                           postinc2	equ	0xFDE
  9215                           postdec2	equ	0xFDD
  9216                           fsr2h	equ	0xFDA
  9217                           fsr2l	equ	0xFD9
  9218                           status	equ	0xFD8
  9219                           
  9220 ;; *************** function _I2C_Master_Start *****************
  9221 ;; Defined at:
  9222 ;;		line 29 in file "I2C.c"
  9223 ;; Parameters:    Size  Location     Type
  9224 ;;		None
  9225 ;; Auto vars:     Size  Location     Type
  9226 ;;		None
  9227 ;; Return value:  Size  Location     Type
  9228 ;;                  2   76[None  ] int 
  9229 ;; Registers used:
  9230 ;;		wreg, status,2, status,0, cstack
  9231 ;; Tracked objects:
  9232 ;;		On entry : 0/0
  9233 ;;		On exit  : 0/0
  9234 ;;		Unchanged: 0/0
  9235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9239 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9240 ;;Total ram usage:        0 bytes
  9241 ;; Hardware stack levels used:    1
  9242 ;; Hardware stack levels required when called:    7
  9243 ;; This function calls:
  9244 ;;		_I2C_Master_Wait
  9245 ;; This function is called by:
  9246 ;;		_set_time
  9247 ;;		_current_time
  9248 ;; This function uses a non-reentrant model
  9249 ;;
  9250                           
  9251                           	psect	text31
  9252  004A84                     __ptext31:
  9253                           	opt stack 0
  9254  004A84                     _I2C_Master_Start:
  9255                           	opt stack 22
  9256                           
  9257                           ;I2C.c: 31: I2C_Master_Wait();
  9258                           
  9259                           ;incstack = 0
  9260  004A84  EC13  F025         	call	_I2C_Master_Wait	;wreg free
  9261                           
  9262                           ;I2C.c: 32: SEN = 1;
  9263  004A88  80C5               	bsf	4037,0,c	;volatile
  9264  004A8A  0012               	return		;funcret
  9265  004A8C                     __end_of_I2C_Master_Start:
  9266                           	opt stack 0
  9267                           tblptru	equ	0xFF8
  9268                           tblptrh	equ	0xFF7
  9269                           tblptrl	equ	0xFF6
  9270                           tablat	equ	0xFF5
  9271                           prodh	equ	0xFF4
  9272                           prodl	equ	0xFF3
  9273                           intcon	equ	0xFF2
  9274                           intcon2	equ	0xFF1
  9275                           intcon3	equ	0xFF0
  9276                           postinc0	equ	0xFEE
  9277                           wreg	equ	0xFE8
  9278                           indf2	equ	0xFDF
  9279                           postinc2	equ	0xFDE
  9280                           postdec2	equ	0xFDD
  9281                           fsr2h	equ	0xFDA
  9282                           fsr2l	equ	0xFD9
  9283                           status	equ	0xFD8
  9284                           
  9285 ;; *************** function _I2C_Master_Read *****************
  9286 ;; Defined at:
  9287 ;;		line 53 in file "I2C.c"
  9288 ;; Parameters:    Size  Location     Type
  9289 ;;  a               1    wreg     unsigned char 
  9290 ;; Auto vars:     Size  Location     Type
  9291 ;;  a               1    1[BANK0 ] unsigned char 
  9292 ;;  temp            1    2[BANK0 ] unsigned char 
  9293 ;; Return value:  Size  Location     Type
  9294 ;;                  1    wreg      unsigned char 
  9295 ;; Registers used:
  9296 ;;		wreg, status,2, status,0, cstack
  9297 ;; Tracked objects:
  9298 ;;		On entry : 0/0
  9299 ;;		On exit  : 0/0
  9300 ;;		Unchanged: 0/0
  9301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9303 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9305 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9306 ;;Total ram usage:        2 bytes
  9307 ;; Hardware stack levels used:    1
  9308 ;; Hardware stack levels required when called:    7
  9309 ;; This function calls:
  9310 ;;		_I2C_Master_Wait
  9311 ;; This function is called by:
  9312 ;;		_current_time
  9313 ;; This function uses a non-reentrant model
  9314 ;;
  9315                           
  9316                           	psect	text32
  9317  0048A2                     __ptext32:
  9318                           	opt stack 0
  9319  0048A2                     _I2C_Master_Read:
  9320                           	opt stack 22
  9321                           
  9322                           ;incstack = 0
  9323                           ;I2C_Master_Read@a stored from wreg
  9324  0048A2  0100               	movlb	0	; () banked
  9325  0048A4  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  9326                           
  9327                           ;I2C.c: 55: unsigned char temp;
  9328                           ;I2C.c: 56: I2C_Master_Wait();
  9329  0048A6  EC13  F025         	call	_I2C_Master_Wait	;wreg free
  9330                           
  9331                           ;I2C.c: 57: RCEN = 1;
  9332  0048AA  86C5               	bsf	4037,3,c	;volatile
  9333                           
  9334                           ;I2C.c: 58: I2C_Master_Wait();
  9335  0048AC  EC13  F025         	call	_I2C_Master_Wait	;wreg free
  9336                           
  9337                           ;I2C.c: 59: temp = SSPBUF;
  9338  0048B0  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  9339                           
  9340                           ;I2C.c: 60: I2C_Master_Wait();
  9341  0048B4  EC13  F025         	call	_I2C_Master_Wait	;wreg free
  9342                           
  9343                           ;I2C.c: 61: ACKDT = (a)?0:1;
  9344  0048B8  0100               	movlb	0	; () banked
  9345  0048BA  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  9346  0048BC  0100               	movlb	0	; () banked
  9347  0048BE  A4D8               	btfss	status,2,c
  9348  0048C0  D002               	goto	u5740
  9349  0048C2  8AC5               	bsf	4037,5,c	;volatile
  9350  0048C4  D001               	goto	l4904
  9351  0048C6                     u5740:
  9352  0048C6  9AC5               	bcf	4037,5,c	;volatile
  9353  0048C8                     l4904:
  9354                           
  9355                           ;I2C.c: 62: ACKEN = 1;
  9356  0048C8  88C5               	bsf	4037,4,c	;volatile
  9357                           
  9358                           ;I2C.c: 63: return temp;
  9359  0048CA  0100               	movlb	0	; () banked
  9360  0048CC  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  9361  0048CE  0012               	return	
  9362  0048D0                     __end_of_I2C_Master_Read:
  9363                           	opt stack 0
  9364                           tblptru	equ	0xFF8
  9365                           tblptrh	equ	0xFF7
  9366                           tblptrl	equ	0xFF6
  9367                           tablat	equ	0xFF5
  9368                           prodh	equ	0xFF4
  9369                           prodl	equ	0xFF3
  9370                           intcon	equ	0xFF2
  9371                           intcon2	equ	0xFF1
  9372                           intcon3	equ	0xFF0
  9373                           postinc0	equ	0xFEE
  9374                           wreg	equ	0xFE8
  9375                           indf2	equ	0xFDF
  9376                           postinc2	equ	0xFDE
  9377                           postdec2	equ	0xFDD
  9378                           fsr2h	equ	0xFDA
  9379                           fsr2l	equ	0xFD9
  9380                           status	equ	0xFD8
  9381                           
  9382 ;; *************** function _I2C_Master_Wait *****************
  9383 ;; Defined at:
  9384 ;;		line 24 in file "I2C.c"
  9385 ;; Parameters:    Size  Location     Type
  9386 ;;		None
  9387 ;; Auto vars:     Size  Location     Type
  9388 ;;		None
  9389 ;; Return value:  Size  Location     Type
  9390 ;;                  1    wreg      void 
  9391 ;; Registers used:
  9392 ;;		wreg, status,2, status,0
  9393 ;; Tracked objects:
  9394 ;;		On entry : 0/0
  9395 ;;		On exit  : 0/0
  9396 ;;		Unchanged: 0/0
  9397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9400 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9401 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9402 ;;Total ram usage:        1 bytes
  9403 ;; Hardware stack levels used:    1
  9404 ;; Hardware stack levels required when called:    6
  9405 ;; This function calls:
  9406 ;;		Nothing
  9407 ;; This function is called by:
  9408 ;;		_I2C_Master_Start
  9409 ;;		_I2C_Master_Stop
  9410 ;;		_I2C_Master_Write
  9411 ;;		_I2C_Master_Read
  9412 ;;		_I2C_Master_RepeatedStart
  9413 ;; This function uses a non-reentrant model
  9414 ;;
  9415                           
  9416                           	psect	text33
  9417  004A26                     __ptext33:
  9418                           	opt stack 0
  9419  004A26                     _I2C_Master_Wait:
  9420                           	opt stack 22
  9421  004A26                     l375:
  9422  004A26  B4C7               	btfsc	4039,2,c	;volatile
  9423  004A28  D7FE               	goto	l375
  9424  004A2A  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  9425  004A2E  0E1F               	movlw	31
  9426  004A30  0100               	movlb	0	; () banked
  9427  004A32  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  9428  004A34  B4D8               	btfsc	status,2,c
  9429  004A36  0012               	return	
  9430  004A38  D7F6               	goto	l375
  9431  004A3A                     __end_of_I2C_Master_Wait:
  9432                           	opt stack 0
  9433                           tblptru	equ	0xFF8
  9434                           tblptrh	equ	0xFF7
  9435                           tblptrl	equ	0xFF6
  9436                           tablat	equ	0xFF5
  9437                           prodh	equ	0xFF4
  9438                           prodl	equ	0xFF3
  9439                           intcon	equ	0xFF2
  9440                           intcon2	equ	0xFF1
  9441                           intcon3	equ	0xFF0
  9442                           postinc0	equ	0xFEE
  9443                           wreg	equ	0xFE8
  9444                           indf2	equ	0xFDF
  9445                           postinc2	equ	0xFDE
  9446                           postdec2	equ	0xFDD
  9447                           fsr2h	equ	0xFDA
  9448                           fsr2l	equ	0xFD9
  9449                           status	equ	0xFD8
  9450                           
  9451 ;; *************** function _convert_voltage *****************
  9452 ;; Defined at:
  9453 ;;		line 468 in file "main.c"
  9454 ;; Parameters:    Size  Location     Type
  9455 ;;  high            2   50[BANK0 ] unsigned int 
  9456 ;;  low             2   52[BANK0 ] unsigned int 
  9457 ;; Auto vars:     Size  Location     Type
  9458 ;;  reading         2   56[BANK0 ] int 
  9459 ;; Return value:  Size  Location     Type
  9460 ;;                  3   50[BANK0 ] float 
  9461 ;; Registers used:
  9462 ;;		wreg, status,2, status,0, cstack
  9463 ;; Tracked objects:
  9464 ;;		On entry : 0/0
  9465 ;;		On exit  : 0/0
  9466 ;;		Unchanged: 0/0
  9467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9468 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9469 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9470 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9471 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9472 ;;Total ram usage:        8 bytes
  9473 ;; Hardware stack levels used:    1
  9474 ;; Hardware stack levels required when called:    8
  9475 ;; This function calls:
  9476 ;;		___awtoft
  9477 ;;		___ftdiv
  9478 ;;		___ftmul
  9479 ;; This function is called by:
  9480 ;;		_main
  9481 ;; This function uses a non-reentrant model
  9482 ;;
  9483                           
  9484                           	psect	text34
  9485  004002                     __ptext34:
  9486                           	opt stack 0
  9487  004002                     _convert_voltage:
  9488                           	opt stack 22
  9489                           
  9490                           ;main.c: 470: int reading = high*16*16 + low;
  9491                           
  9492                           ; BSR set to: 0
  9493                           ;incstack = 0
  9494  004002  C0B2  F0B6         	movff	convert_voltage@high,??_convert_voltage
  9495  004006  C0B3  F0B7         	movff	convert_voltage@high+1,??_convert_voltage+1
  9496  00400A  0100               	movlb	0	; () banked
  9497  00400C  3BB6               	swapf	??_convert_voltage& (0+255),f,b
  9498  00400E  3BB7               	swapf	(??_convert_voltage+1)& (0+255),f,b
  9499  004010  0EF0               	movlw	240
  9500  004012  17B7               	andwf	(??_convert_voltage+1)& (0+255),f,b
  9501  004014  51B6               	movf	??_convert_voltage& (0+255),w,b
  9502  004016  0B0F               	andlw	15
  9503  004018  13B7               	iorwf	(??_convert_voltage+1)& (0+255),f,b
  9504  00401A  0EF0               	movlw	240
  9505  00401C  17B6               	andwf	??_convert_voltage& (0+255),f,b
  9506  00401E  0100               	movlb	0	; () banked
  9507  004020  3BB6               	swapf	??_convert_voltage& (0+255),f,b
  9508  004022  3BB7               	swapf	(??_convert_voltage+1)& (0+255),f,b
  9509  004024  0EF0               	movlw	240
  9510  004026  17B7               	andwf	(??_convert_voltage+1)& (0+255),f,b
  9511  004028  51B6               	movf	??_convert_voltage& (0+255),w,b
  9512  00402A  0B0F               	andlw	15
  9513  00402C  13B7               	iorwf	(??_convert_voltage+1)& (0+255),f,b
  9514  00402E  0EF0               	movlw	240
  9515  004030  17B6               	andwf	??_convert_voltage& (0+255),f,b
  9516  004032  0100               	movlb	0	; () banked
  9517  004034  51B4               	movf	convert_voltage@low& (0+255),w,b
  9518  004036  0100               	movlb	0	; () banked
  9519  004038  25B6               	addwf	??_convert_voltage& (0+255),w,b
  9520  00403A  0100               	movlb	0	; () banked
  9521  00403C  6FB8               	movwf	convert_voltage@reading& (0+255),b
  9522  00403E  0100               	movlb	0	; () banked
  9523  004040  51B5               	movf	(convert_voltage@low+1)& (0+255),w,b
  9524  004042  0100               	movlb	0	; () banked
  9525  004044  21B7               	addwfc	(??_convert_voltage+1)& (0+255),w,b
  9526  004046  0100               	movlb	0	; () banked
  9527  004048  6FB9               	movwf	(convert_voltage@reading+1)& (0+255),b
  9528                           
  9529                           ; BSR set to: 0
  9530                           ;main.c: 471: return reading * 5.0 / 1023;
  9531  00404A  0E00               	movlw	0
  9532  00404C  0100               	movlb	0	; () banked
  9533  00404E  6F97               	movwf	___ftmul@f2& (0+255),b
  9534  004050  0EA0               	movlw	160
  9535  004052  0100               	movlb	0	; () banked
  9536  004054  6F98               	movwf	(___ftmul@f2+1)& (0+255),b
  9537  004056  0E40               	movlw	64
  9538  004058  0100               	movlb	0	; () banked
  9539  00405A  6F99               	movwf	(___ftmul@f2+2)& (0+255),b
  9540  00405C  C0B8  F088         	movff	convert_voltage@reading,___awtoft@c
  9541  004060  C0B9  F089         	movff	convert_voltage@reading+1,___awtoft@c+1
  9542  004064  ECC2  F023         	call	___awtoft	;wreg free
  9543  004068  C088  F094         	movff	?___awtoft,___ftmul@f1
  9544  00406C  C089  F095         	movff	?___awtoft+1,___ftmul@f1+1
  9545  004070  C08A  F096         	movff	?___awtoft+2,___ftmul@f1+2
  9546  004074  EC43  F018         	call	___ftmul	;wreg free
  9547  004078  C094  F0A3         	movff	?___ftmul,___ftdiv@f1
  9548  00407C  C095  F0A4         	movff	?___ftmul+1,___ftdiv@f1+1
  9549  004080  C096  F0A5         	movff	?___ftmul+2,___ftdiv@f1+2
  9550  004084  0EC0               	movlw	192
  9551  004086  0100               	movlb	0	; () banked
  9552  004088  6FA6               	movwf	___ftdiv@f2& (0+255),b
  9553  00408A  0E7F               	movlw	127
  9554  00408C  0100               	movlb	0	; () banked
  9555  00408E  6FA7               	movwf	(___ftdiv@f2+1)& (0+255),b
  9556  004090  0E44               	movlw	68
  9557  004092  0100               	movlb	0	; () banked
  9558  004094  6FA8               	movwf	(___ftdiv@f2+2)& (0+255),b
  9559  004096  ECF2  F018         	call	___ftdiv	;wreg free
  9560  00409A  C0A3  F0B2         	movff	?___ftdiv,?_convert_voltage
  9561  00409E  C0A4  F0B3         	movff	?___ftdiv+1,?_convert_voltage+1
  9562  0040A2  C0A5  F0B4         	movff	?___ftdiv+2,?_convert_voltage+2
  9563  0040A6  0012               	return	
  9564  0040A8                     __end_of_convert_voltage:
  9565                           	opt stack 0
  9566                           tblptru	equ	0xFF8
  9567                           tblptrh	equ	0xFF7
  9568                           tblptrl	equ	0xFF6
  9569                           tablat	equ	0xFF5
  9570                           prodh	equ	0xFF4
  9571                           prodl	equ	0xFF3
  9572                           intcon	equ	0xFF2
  9573                           intcon2	equ	0xFF1
  9574                           intcon3	equ	0xFF0
  9575                           postinc0	equ	0xFEE
  9576                           wreg	equ	0xFE8
  9577                           indf2	equ	0xFDF
  9578                           postinc2	equ	0xFDE
  9579                           postdec2	equ	0xFDD
  9580                           fsr2h	equ	0xFDA
  9581                           fsr2l	equ	0xFD9
  9582                           status	equ	0xFD8
  9583                           
  9584 ;; *************** function ___ftmul *****************
  9585 ;; Defined at:
  9586 ;;		line 62 in file "/Applications/microchip/xc8/v1.40/sources/common/ftmul.c"
  9587 ;; Parameters:    Size  Location     Type
  9588 ;;  f1              3   20[BANK0 ] float 
  9589 ;;  f2              3   23[BANK0 ] float 
  9590 ;; Auto vars:     Size  Location     Type
  9591 ;;  f3_as_produc    3   30[BANK0 ] unsigned um
  9592 ;;  sign            1   34[BANK0 ] unsigned char 
  9593 ;;  cntr            1   33[BANK0 ] unsigned char 
  9594 ;;  exp             1   29[BANK0 ] unsigned char 
  9595 ;; Return value:  Size  Location     Type
  9596 ;;                  3   20[BANK0 ] float 
  9597 ;; Registers used:
  9598 ;;		wreg, status,2, status,0, cstack
  9599 ;; Tracked objects:
  9600 ;;		On entry : 0/0
  9601 ;;		On exit  : 0/0
  9602 ;;		Unchanged: 0/0
  9603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9604 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9605 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9606 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9607 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9608 ;;Total ram usage:       15 bytes
  9609 ;; Hardware stack levels used:    1
  9610 ;; Hardware stack levels required when called:    7
  9611 ;; This function calls:
  9612 ;;		___ftpack
  9613 ;; This function is called by:
  9614 ;;		_convert_voltage
  9615 ;;		_fround
  9616 ;;		_scale
  9617 ;;		_printf
  9618 ;; This function uses a non-reentrant model
  9619 ;;
  9620                           
  9621                           	psect	text35
  9622  003086                     __ptext35:
  9623                           	opt stack 0
  9624  003086                     ___ftmul:
  9625                           	opt stack 20
  9626                           
  9627                           ;incstack = 0
  9628  003086  C096  F09A         	movff	___ftmul@f1+2,??___ftmul
  9629  00308A  0100               	movlb	0	; () banked
  9630  00308C  6B9B               	clrf	(??___ftmul+1)& (0+255),b
  9631  00308E  6B9C               	clrf	(??___ftmul+2)& (0+255),b
  9632  003090  0100               	movlb	0	; () banked
  9633  003092  3595               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  9634  003094  0100               	movlb	0	; () banked
  9635  003096  379A               	rlcf	??___ftmul& (0+255),f,b
  9636  003098  E301               	bnc	u3801
  9637  00309A  819B               	bsf	(??___ftmul+1)& (0+255),0,b
  9638  00309C                     u3801:
  9639  00309C  0100               	movlb	0	; () banked
  9640  00309E  519A               	movf	??___ftmul& (0+255),w,b
  9641  0030A0  0100               	movlb	0	; () banked
  9642  0030A2  6F9D               	movwf	___ftmul@exp& (0+255),b
  9643  0030A4  0100               	movlb	0	; () banked
  9644  0030A6  519D               	movf	___ftmul@exp& (0+255),w,b
  9645  0030A8  A4D8               	btfss	status,2,c
  9646  0030AA  D00A               	goto	l3636
  9647                           
  9648                           ; BSR set to: 0
  9649  0030AC  0E00               	movlw	0
  9650  0030AE  0100               	movlb	0	; () banked
  9651  0030B0  6F94               	movwf	?___ftmul& (0+255),b
  9652  0030B2  0E00               	movlw	0
  9653  0030B4  0100               	movlb	0	; () banked
  9654  0030B6  6F95               	movwf	(?___ftmul+1)& (0+255),b
  9655  0030B8  0E00               	movlw	0
  9656  0030BA  0100               	movlb	0	; () banked
  9657  0030BC  6F96               	movwf	(?___ftmul+2)& (0+255),b
  9658                           
  9659                           ; BSR set to: 0
  9660  0030BE  0012               	return	
  9661  0030C0                     l3636:
  9662                           
  9663                           ; BSR set to: 0
  9664  0030C0  C099  F09A         	movff	___ftmul@f2+2,??___ftmul
  9665  0030C4  0100               	movlb	0	; () banked
  9666  0030C6  6B9B               	clrf	(??___ftmul+1)& (0+255),b
  9667  0030C8  6B9C               	clrf	(??___ftmul+2)& (0+255),b
  9668  0030CA  0100               	movlb	0	; () banked
  9669  0030CC  3598               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  9670  0030CE  0100               	movlb	0	; () banked
  9671  0030D0  379A               	rlcf	??___ftmul& (0+255),f,b
  9672  0030D2  E301               	bnc	u3821
  9673  0030D4  819B               	bsf	(??___ftmul+1)& (0+255),0,b
  9674  0030D6                     u3821:
  9675  0030D6  0100               	movlb	0	; () banked
  9676  0030D8  519A               	movf	??___ftmul& (0+255),w,b
  9677  0030DA  0100               	movlb	0	; () banked
  9678  0030DC  6FA2               	movwf	___ftmul@sign& (0+255),b
  9679  0030DE  0100               	movlb	0	; () banked
  9680  0030E0  51A2               	movf	___ftmul@sign& (0+255),w,b
  9681  0030E2  A4D8               	btfss	status,2,c
  9682  0030E4  D00A               	goto	l3642
  9683                           
  9684                           ; BSR set to: 0
  9685  0030E6  0E00               	movlw	0
  9686  0030E8  0100               	movlb	0	; () banked
  9687  0030EA  6F94               	movwf	?___ftmul& (0+255),b
  9688  0030EC  0E00               	movlw	0
  9689  0030EE  0100               	movlb	0	; () banked
  9690  0030F0  6F95               	movwf	(?___ftmul+1)& (0+255),b
  9691  0030F2  0E00               	movlw	0
  9692  0030F4  0100               	movlb	0	; () banked
  9693  0030F6  6F96               	movwf	(?___ftmul+2)& (0+255),b
  9694                           
  9695                           ; BSR set to: 0
  9696  0030F8  0012               	return	
  9697  0030FA                     l3642:
  9698                           
  9699                           ; BSR set to: 0
  9700  0030FA  0100               	movlb	0	; () banked
  9701  0030FC  51A2               	movf	___ftmul@sign& (0+255),w,b
  9702  0030FE  0F7B               	addlw	123
  9703  003100  0100               	movlb	0	; () banked
  9704  003102  279D               	addwf	___ftmul@exp& (0+255),f,b
  9705                           
  9706                           ; BSR set to: 0
  9707  003104  C096  F0A2         	movff	___ftmul@f1+2,___ftmul@sign
  9708  003108  0100               	movlb	0	; () banked
  9709  00310A  5199               	movf	(___ftmul@f2+2)& (0+255),w,b
  9710  00310C  0100               	movlb	0	; () banked
  9711  00310E  1BA2               	xorwf	___ftmul@sign& (0+255),f,b
  9712  003110  0E80               	movlw	128
  9713  003112  0100               	movlb	0	; () banked
  9714  003114  17A2               	andwf	___ftmul@sign& (0+255),f,b
  9715                           
  9716                           ; BSR set to: 0
  9717  003116  0100               	movlb	0	; () banked
  9718  003118  8F95               	bsf	(___ftmul@f1+1)& (0+255),7,b
  9719                           
  9720                           ; BSR set to: 0
  9721  00311A  0100               	movlb	0	; () banked
  9722  00311C  8F98               	bsf	(___ftmul@f2+1)& (0+255),7,b
  9723                           
  9724                           ; BSR set to: 0
  9725  00311E  0EFF               	movlw	255
  9726  003120  0100               	movlb	0	; () banked
  9727  003122  1797               	andwf	___ftmul@f2& (0+255),f,b
  9728  003124  0EFF               	movlw	255
  9729  003126  0100               	movlb	0	; () banked
  9730  003128  1798               	andwf	(___ftmul@f2+1)& (0+255),f,b
  9731  00312A  0E00               	movlw	0
  9732  00312C  0100               	movlb	0	; () banked
  9733  00312E  1799               	andwf	(___ftmul@f2+2)& (0+255),f,b
  9734                           
  9735                           ; BSR set to: 0
  9736  003130  0E00               	movlw	0
  9737  003132  0100               	movlb	0	; () banked
  9738  003134  6F9E               	movwf	___ftmul@f3_as_product& (0+255),b
  9739  003136  0E00               	movlw	0
  9740  003138  0100               	movlb	0	; () banked
  9741  00313A  6F9F               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  9742  00313C  0E00               	movlw	0
  9743  00313E  0100               	movlb	0	; () banked
  9744  003140  6FA0               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  9745                           
  9746                           ; BSR set to: 0
  9747  003142  0E07               	movlw	7
  9748  003144  0100               	movlb	0	; () banked
  9749  003146  6FA1               	movwf	___ftmul@cntr& (0+255),b
  9750  003148                     l3656:
  9751                           
  9752                           ; BSR set to: 0
  9753  003148  0100               	movlb	0	; () banked
  9754  00314A  A194               	btfss	___ftmul@f1& (0+255),0,b
  9755  00314C  D00C               	goto	l3660
  9756                           
  9757                           ; BSR set to: 0
  9758  00314E  0100               	movlb	0	; () banked
  9759  003150  5197               	movf	___ftmul@f2& (0+255),w,b
  9760  003152  0100               	movlb	0	; () banked
  9761  003154  279E               	addwf	___ftmul@f3_as_product& (0+255),f,b
  9762  003156  0100               	movlb	0	; () banked
  9763  003158  5198               	movf	(___ftmul@f2+1)& (0+255),w,b
  9764  00315A  0100               	movlb	0	; () banked
  9765  00315C  239F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  9766  00315E  0100               	movlb	0	; () banked
  9767  003160  5199               	movf	(___ftmul@f2+2)& (0+255),w,b
  9768  003162  0100               	movlb	0	; () banked
  9769  003164  23A0               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  9770  003166                     l3660:
  9771                           
  9772                           ; BSR set to: 0
  9773  003166  0100               	movlb	0	; () banked
  9774  003168  90D8               	bcf	status,0,c
  9775  00316A  3396               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  9776  00316C  3395               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  9777  00316E  3394               	rrcf	___ftmul@f1& (0+255),f,b
  9778  003170  0100               	movlb	0	; () banked
  9779  003172  90D8               	bcf	status,0,c
  9780  003174  3797               	rlcf	___ftmul@f2& (0+255),f,b
  9781  003176  3798               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  9782  003178  3799               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  9783                           
  9784                           ; BSR set to: 0
  9785  00317A  0100               	movlb	0	; () banked
  9786  00317C  2FA1               	decfsz	___ftmul@cntr& (0+255),f,b
  9787  00317E  D7E4               	goto	l3656
  9788                           
  9789                           ; BSR set to: 0
  9790                           
  9791                           ; BSR set to: 0
  9792  003180  0E09               	movlw	9
  9793  003182  0100               	movlb	0	; () banked
  9794  003184  6FA1               	movwf	___ftmul@cntr& (0+255),b
  9795  003186                     l3666:
  9796                           
  9797                           ; BSR set to: 0
  9798  003186  0100               	movlb	0	; () banked
  9799  003188  A194               	btfss	___ftmul@f1& (0+255),0,b
  9800  00318A  D00C               	goto	l3670
  9801                           
  9802                           ; BSR set to: 0
  9803  00318C  0100               	movlb	0	; () banked
  9804  00318E  5197               	movf	___ftmul@f2& (0+255),w,b
  9805  003190  0100               	movlb	0	; () banked
  9806  003192  279E               	addwf	___ftmul@f3_as_product& (0+255),f,b
  9807  003194  0100               	movlb	0	; () banked
  9808  003196  5198               	movf	(___ftmul@f2+1)& (0+255),w,b
  9809  003198  0100               	movlb	0	; () banked
  9810  00319A  239F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  9811  00319C  0100               	movlb	0	; () banked
  9812  00319E  5199               	movf	(___ftmul@f2+2)& (0+255),w,b
  9813  0031A0  0100               	movlb	0	; () banked
  9814  0031A2  23A0               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  9815  0031A4                     l3670:
  9816                           
  9817                           ; BSR set to: 0
  9818  0031A4  0100               	movlb	0	; () banked
  9819  0031A6  90D8               	bcf	status,0,c
  9820  0031A8  3396               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  9821  0031AA  3395               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  9822  0031AC  3394               	rrcf	___ftmul@f1& (0+255),f,b
  9823  0031AE  0100               	movlb	0	; () banked
  9824  0031B0  90D8               	bcf	status,0,c
  9825  0031B2  33A0               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  9826  0031B4  339F               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  9827  0031B6  339E               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  9828                           
  9829                           ; BSR set to: 0
  9830  0031B8  0100               	movlb	0	; () banked
  9831  0031BA  2FA1               	decfsz	___ftmul@cntr& (0+255),f,b
  9832  0031BC  D7E4               	goto	l3666
  9833                           
  9834                           ; BSR set to: 0
  9835                           
  9836                           ; BSR set to: 0
  9837  0031BE  C09E  F080         	movff	___ftmul@f3_as_product,___ftpack@arg
  9838  0031C2  C09F  F081         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  9839  0031C6  C0A0  F082         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  9840  0031CA  C09D  F083         	movff	___ftmul@exp,___ftpack@exp
  9841  0031CE  C0A2  F084         	movff	___ftmul@sign,___ftpack@sign
  9842  0031D2  ECFF  F01B         	call	___ftpack	;wreg free
  9843  0031D6  C080  F094         	movff	?___ftpack,?___ftmul
  9844  0031DA  C081  F095         	movff	?___ftpack+1,?___ftmul+1
  9845  0031DE  C082  F096         	movff	?___ftpack+2,?___ftmul+2
  9846  0031E2  0012               	return	
  9847  0031E4                     __end_of___ftmul:
  9848                           	opt stack 0
  9849                           tblptru	equ	0xFF8
  9850                           tblptrh	equ	0xFF7
  9851                           tblptrl	equ	0xFF6
  9852                           tablat	equ	0xFF5
  9853                           prodh	equ	0xFF4
  9854                           prodl	equ	0xFF3
  9855                           intcon	equ	0xFF2
  9856                           intcon2	equ	0xFF1
  9857                           intcon3	equ	0xFF0
  9858                           postinc0	equ	0xFEE
  9859                           wreg	equ	0xFE8
  9860                           indf2	equ	0xFDF
  9861                           postinc2	equ	0xFDE
  9862                           postdec2	equ	0xFDD
  9863                           fsr2h	equ	0xFDA
  9864                           fsr2l	equ	0xFD9
  9865                           status	equ	0xFD8
  9866                           
  9867 ;; *************** function ___ftdiv *****************
  9868 ;; Defined at:
  9869 ;;		line 54 in file "/Applications/microchip/xc8/v1.40/sources/common/ftdiv.c"
  9870 ;; Parameters:    Size  Location     Type
  9871 ;;  f1              3   35[BANK0 ] float 
  9872 ;;  f2              3   38[BANK0 ] float 
  9873 ;; Auto vars:     Size  Location     Type
  9874 ;;  f3              3   45[BANK0 ] float 
  9875 ;;  sign            1   49[BANK0 ] unsigned char 
  9876 ;;  exp             1   48[BANK0 ] unsigned char 
  9877 ;;  cntr            1   44[BANK0 ] unsigned char 
  9878 ;; Return value:  Size  Location     Type
  9879 ;;                  3   35[BANK0 ] float 
  9880 ;; Registers used:
  9881 ;;		wreg, status,2, status,0, cstack
  9882 ;; Tracked objects:
  9883 ;;		On entry : 0/0
  9884 ;;		On exit  : 0/0
  9885 ;;		Unchanged: 0/0
  9886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9887 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9888 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9889 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9890 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9891 ;;Total ram usage:       15 bytes
  9892 ;; Hardware stack levels used:    1
  9893 ;; Hardware stack levels required when called:    7
  9894 ;; This function calls:
  9895 ;;		___ftpack
  9896 ;; This function is called by:
  9897 ;;		_convert_voltage
  9898 ;; This function uses a non-reentrant model
  9899 ;;
  9900                           
  9901                           	psect	text36
  9902  0031E4                     __ptext36:
  9903                           	opt stack 0
  9904  0031E4                     ___ftdiv:
  9905                           	opt stack 22
  9906                           
  9907                           ;incstack = 0
  9908  0031E4  C0A5  F0A9         	movff	___ftdiv@f1+2,??___ftdiv
  9909  0031E8  0100               	movlb	0	; () banked
  9910  0031EA  6BAA               	clrf	(??___ftdiv+1)& (0+255),b
  9911  0031EC  6BAB               	clrf	(??___ftdiv+2)& (0+255),b
  9912  0031EE  0100               	movlb	0	; () banked
  9913  0031F0  35A4               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  9914  0031F2  0100               	movlb	0	; () banked
  9915  0031F4  37A9               	rlcf	??___ftdiv& (0+255),f,b
  9916  0031F6  E301               	bnc	u5771
  9917  0031F8  81AA               	bsf	(??___ftdiv+1)& (0+255),0,b
  9918  0031FA                     u5771:
  9919  0031FA  0100               	movlb	0	; () banked
  9920  0031FC  51A9               	movf	??___ftdiv& (0+255),w,b
  9921  0031FE  0100               	movlb	0	; () banked
  9922  003200  6FB0               	movwf	___ftdiv@exp& (0+255),b
  9923  003202  0100               	movlb	0	; () banked
  9924  003204  51B0               	movf	___ftdiv@exp& (0+255),w,b
  9925  003206  A4D8               	btfss	status,2,c
  9926  003208  D00A               	goto	l4930
  9927                           
  9928                           ; BSR set to: 0
  9929  00320A  0E00               	movlw	0
  9930  00320C  0100               	movlb	0	; () banked
  9931  00320E  6FA3               	movwf	?___ftdiv& (0+255),b
  9932  003210  0E00               	movlw	0
  9933  003212  0100               	movlb	0	; () banked
  9934  003214  6FA4               	movwf	(?___ftdiv+1)& (0+255),b
  9935  003216  0E00               	movlw	0
  9936  003218  0100               	movlb	0	; () banked
  9937  00321A  6FA5               	movwf	(?___ftdiv+2)& (0+255),b
  9938                           
  9939                           ; BSR set to: 0
  9940  00321C  0012               	return	
  9941  00321E                     l4930:
  9942                           
  9943                           ; BSR set to: 0
  9944  00321E  C0A8  F0A9         	movff	___ftdiv@f2+2,??___ftdiv
  9945  003222  0100               	movlb	0	; () banked
  9946  003224  6BAA               	clrf	(??___ftdiv+1)& (0+255),b
  9947  003226  6BAB               	clrf	(??___ftdiv+2)& (0+255),b
  9948  003228  0100               	movlb	0	; () banked
  9949  00322A  35A7               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  9950  00322C  0100               	movlb	0	; () banked
  9951  00322E  37A9               	rlcf	??___ftdiv& (0+255),f,b
  9952  003230  E301               	bnc	u5791
  9953  003232  81AA               	bsf	(??___ftdiv+1)& (0+255),0,b
  9954  003234                     u5791:
  9955  003234  0100               	movlb	0	; () banked
  9956  003236  51A9               	movf	??___ftdiv& (0+255),w,b
  9957  003238  0100               	movlb	0	; () banked
  9958  00323A  6FB1               	movwf	___ftdiv@sign& (0+255),b
  9959  00323C  0100               	movlb	0	; () banked
  9960  00323E  51B1               	movf	___ftdiv@sign& (0+255),w,b
  9961  003240  A4D8               	btfss	status,2,c
  9962  003242  D00A               	goto	l4936
  9963                           
  9964                           ; BSR set to: 0
  9965  003244  0E00               	movlw	0
  9966  003246  0100               	movlb	0	; () banked
  9967  003248  6FA3               	movwf	?___ftdiv& (0+255),b
  9968  00324A  0E00               	movlw	0
  9969  00324C  0100               	movlb	0	; () banked
  9970  00324E  6FA4               	movwf	(?___ftdiv+1)& (0+255),b
  9971  003250  0E00               	movlw	0
  9972  003252  0100               	movlb	0	; () banked
  9973  003254  6FA5               	movwf	(?___ftdiv+2)& (0+255),b
  9974                           
  9975                           ; BSR set to: 0
  9976  003256  0012               	return	
  9977  003258                     l4936:
  9978                           
  9979                           ; BSR set to: 0
  9980  003258  0E00               	movlw	0
  9981  00325A  0100               	movlb	0	; () banked
  9982  00325C  6FAD               	movwf	___ftdiv@f3& (0+255),b
  9983  00325E  0E00               	movlw	0
  9984  003260  0100               	movlb	0	; () banked
  9985  003262  6FAE               	movwf	(___ftdiv@f3+1)& (0+255),b
  9986  003264  0E00               	movlw	0
  9987  003266  0100               	movlb	0	; () banked
  9988  003268  6FAF               	movwf	(___ftdiv@f3+2)& (0+255),b
  9989                           
  9990                           ; BSR set to: 0
  9991  00326A  0100               	movlb	0	; () banked
  9992  00326C  51B1               	movf	___ftdiv@sign& (0+255),w,b
  9993  00326E  0F89               	addlw	137
  9994  003270  0100               	movlb	0	; () banked
  9995  003272  5FB0               	subwf	___ftdiv@exp& (0+255),f,b
  9996                           
  9997                           ; BSR set to: 0
  9998  003274  C0A5  F0B1         	movff	___ftdiv@f1+2,___ftdiv@sign
  9999                           
 10000                           ; BSR set to: 0
 10001  003278  0100               	movlb	0	; () banked
 10002  00327A  51A8               	movf	(___ftdiv@f2+2)& (0+255),w,b
 10003  00327C  0100               	movlb	0	; () banked
 10004  00327E  1BB1               	xorwf	___ftdiv@sign& (0+255),f,b
 10005                           
 10006                           ; BSR set to: 0
 10007  003280  0E80               	movlw	128
 10008  003282  0100               	movlb	0	; () banked
 10009  003284  17B1               	andwf	___ftdiv@sign& (0+255),f,b
 10010                           
 10011                           ; BSR set to: 0
 10012  003286  0100               	movlb	0	; () banked
 10013  003288  8FA4               	bsf	(___ftdiv@f1+1)& (0+255),7,b
 10014                           
 10015                           ; BSR set to: 0
 10016  00328A  0EFF               	movlw	255
 10017  00328C  0100               	movlb	0	; () banked
 10018  00328E  17A3               	andwf	___ftdiv@f1& (0+255),f,b
 10019  003290  0EFF               	movlw	255
 10020  003292  0100               	movlb	0	; () banked
 10021  003294  17A4               	andwf	(___ftdiv@f1+1)& (0+255),f,b
 10022  003296  0E00               	movlw	0
 10023  003298  0100               	movlb	0	; () banked
 10024  00329A  17A5               	andwf	(___ftdiv@f1+2)& (0+255),f,b
 10025                           
 10026                           ; BSR set to: 0
 10027  00329C  0100               	movlb	0	; () banked
 10028  00329E  8FA7               	bsf	(___ftdiv@f2+1)& (0+255),7,b
 10029                           
 10030                           ; BSR set to: 0
 10031  0032A0  0EFF               	movlw	255
 10032  0032A2  0100               	movlb	0	; () banked
 10033  0032A4  17A6               	andwf	___ftdiv@f2& (0+255),f,b
 10034  0032A6  0EFF               	movlw	255
 10035  0032A8  0100               	movlb	0	; () banked
 10036  0032AA  17A7               	andwf	(___ftdiv@f2+1)& (0+255),f,b
 10037  0032AC  0E00               	movlw	0
 10038  0032AE  0100               	movlb	0	; () banked
 10039  0032B0  17A8               	andwf	(___ftdiv@f2+2)& (0+255),f,b
 10040                           
 10041                           ; BSR set to: 0
 10042  0032B2  0E18               	movlw	24
 10043  0032B4  0100               	movlb	0	; () banked
 10044  0032B6  6FAC               	movwf	___ftdiv@cntr& (0+255),b
 10045  0032B8                     l4956:
 10046                           
 10047                           ; BSR set to: 0
 10048  0032B8  0100               	movlb	0	; () banked
 10049  0032BA  90D8               	bcf	status,0,c
 10050  0032BC  37AD               	rlcf	___ftdiv@f3& (0+255),f,b
 10051  0032BE  37AE               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 10052  0032C0  37AF               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 10053                           
 10054                           ; BSR set to: 0
 10055  0032C2  0100               	movlb	0	; () banked
 10056  0032C4  51A6               	movf	___ftdiv@f2& (0+255),w,b
 10057  0032C6  0100               	movlb	0	; () banked
 10058  0032C8  5DA3               	subwf	___ftdiv@f1& (0+255),w,b
 10059  0032CA  0100               	movlb	0	; () banked
 10060  0032CC  51A7               	movf	(___ftdiv@f2+1)& (0+255),w,b
 10061  0032CE  0100               	movlb	0	; () banked
 10062  0032D0  59A4               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
 10063  0032D2  0100               	movlb	0	; () banked
 10064  0032D4  51A8               	movf	(___ftdiv@f2+2)& (0+255),w,b
 10065  0032D6  0100               	movlb	0	; () banked
 10066  0032D8  59A5               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
 10067  0032DA  A0D8               	btfss	status,0,c
 10068  0032DC  D00E               	goto	l823
 10069                           
 10070                           ; BSR set to: 0
 10071  0032DE  0100               	movlb	0	; () banked
 10072  0032E0  51A6               	movf	___ftdiv@f2& (0+255),w,b
 10073  0032E2  0100               	movlb	0	; () banked
 10074  0032E4  5FA3               	subwf	___ftdiv@f1& (0+255),f,b
 10075  0032E6  0100               	movlb	0	; () banked
 10076  0032E8  51A7               	movf	(___ftdiv@f2+1)& (0+255),w,b
 10077  0032EA  0100               	movlb	0	; () banked
 10078  0032EC  5BA4               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
 10079  0032EE  0100               	movlb	0	; () banked
 10080  0032F0  51A8               	movf	(___ftdiv@f2+2)& (0+255),w,b
 10081  0032F2  0100               	movlb	0	; () banked
 10082  0032F4  5BA5               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
 10083                           
 10084                           ; BSR set to: 0
 10085  0032F6  0100               	movlb	0	; () banked
 10086  0032F8  81AD               	bsf	___ftdiv@f3& (0+255),0,b
 10087  0032FA                     l823:
 10088                           
 10089                           ; BSR set to: 0
 10090  0032FA  0100               	movlb	0	; () banked
 10091  0032FC  90D8               	bcf	status,0,c
 10092  0032FE  37A3               	rlcf	___ftdiv@f1& (0+255),f,b
 10093  003300  37A4               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
 10094  003302  37A5               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
 10095                           
 10096                           ; BSR set to: 0
 10097  003304  0100               	movlb	0	; () banked
 10098  003306  2FAC               	decfsz	___ftdiv@cntr& (0+255),f,b
 10099  003308  D7D7               	goto	l4956
 10100                           
 10101                           ; BSR set to: 0
 10102                           
 10103                           ; BSR set to: 0
 10104  00330A  C0AD  F080         	movff	___ftdiv@f3,___ftpack@arg
 10105  00330E  C0AE  F081         	movff	___ftdiv@f3+1,___ftpack@arg+1
 10106  003312  C0AF  F082         	movff	___ftdiv@f3+2,___ftpack@arg+2
 10107  003316  C0B0  F083         	movff	___ftdiv@exp,___ftpack@exp
 10108  00331A  C0B1  F084         	movff	___ftdiv@sign,___ftpack@sign
 10109  00331E  ECFF  F01B         	call	___ftpack	;wreg free
 10110  003322  C080  F0A3         	movff	?___ftpack,?___ftdiv
 10111  003326  C081  F0A4         	movff	?___ftpack+1,?___ftdiv+1
 10112  00332A  C082  F0A5         	movff	?___ftpack+2,?___ftdiv+2
 10113  00332E  0012               	return	
 10114  003330                     __end_of___ftdiv:
 10115                           	opt stack 0
 10116                           tblptru	equ	0xFF8
 10117                           tblptrh	equ	0xFF7
 10118                           tblptrl	equ	0xFF6
 10119                           tablat	equ	0xFF5
 10120                           prodh	equ	0xFF4
 10121                           prodl	equ	0xFF3
 10122                           intcon	equ	0xFF2
 10123                           intcon2	equ	0xFF1
 10124                           intcon3	equ	0xFF0
 10125                           postinc0	equ	0xFEE
 10126                           wreg	equ	0xFE8
 10127                           indf2	equ	0xFDF
 10128                           postinc2	equ	0xFDE
 10129                           postdec2	equ	0xFDD
 10130                           fsr2h	equ	0xFDA
 10131                           fsr2l	equ	0xFD9
 10132                           status	equ	0xFD8
 10133                           
 10134 ;; *************** function ___awtoft *****************
 10135 ;; Defined at:
 10136 ;;		line 32 in file "/Applications/microchip/xc8/v1.40/sources/common/awtoft.c"
 10137 ;; Parameters:    Size  Location     Type
 10138 ;;  c               2    8[BANK0 ] int 
 10139 ;; Auto vars:     Size  Location     Type
 10140 ;;  sign            1   11[BANK0 ] unsigned char 
 10141 ;; Return value:  Size  Location     Type
 10142 ;;                  3    8[BANK0 ] float 
 10143 ;; Registers used:
 10144 ;;		wreg, status,2, status,0, cstack
 10145 ;; Tracked objects:
 10146 ;;		On entry : 0/0
 10147 ;;		On exit  : 0/0
 10148 ;;		Unchanged: 0/0
 10149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10150 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10151 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10153 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10154 ;;Total ram usage:        4 bytes
 10155 ;; Hardware stack levels used:    1
 10156 ;; Hardware stack levels required when called:    7
 10157 ;; This function calls:
 10158 ;;		___ftpack
 10159 ;; This function is called by:
 10160 ;;		_convert_voltage
 10161 ;; This function uses a non-reentrant model
 10162 ;;
 10163                           
 10164                           	psect	text37
 10165  004784                     __ptext37:
 10166                           	opt stack 0
 10167  004784                     ___awtoft:
 10168                           	opt stack 22
 10169                           
 10170                           ;incstack = 0
 10171  004784  0E00               	movlw	0
 10172  004786  0100               	movlb	0	; () banked
 10173  004788  6F8B               	movwf	___awtoft@sign& (0+255),b
 10174                           
 10175                           ; BSR set to: 0
 10176  00478A  0100               	movlb	0	; () banked
 10177  00478C  AF89               	btfss	(___awtoft@c+1)& (0+255),7,b
 10178  00478E  D008               	goto	l4978
 10179                           
 10180                           ; BSR set to: 0
 10181  004790  0100               	movlb	0	; () banked
 10182  004792  6D88               	negf	___awtoft@c& (0+255),b
 10183  004794  1F89               	comf	(___awtoft@c+1)& (0+255),f,b
 10184  004796  B0D8               	btfsc	status,0,c
 10185  004798  2B89               	incf	(___awtoft@c+1)& (0+255),f,b
 10186                           
 10187                           ; BSR set to: 0
 10188  00479A  0E01               	movlw	1
 10189  00479C  0100               	movlb	0	; () banked
 10190  00479E  6F8B               	movwf	___awtoft@sign& (0+255),b
 10191  0047A0                     l4978:
 10192                           
 10193                           ; BSR set to: 0
 10194  0047A0  C088  F080         	movff	___awtoft@c,___ftpack@arg
 10195  0047A4  C089  F081         	movff	___awtoft@c+1,___ftpack@arg+1
 10196  0047A8  0100               	movlb	0	; () banked
 10197  0047AA  6B82               	clrf	(___ftpack@arg+2)& (0+255),b
 10198  0047AC  0E8E               	movlw	142
 10199  0047AE  0100               	movlb	0	; () banked
 10200  0047B0  6F83               	movwf	___ftpack@exp& (0+255),b
 10201  0047B2  C08B  F084         	movff	___awtoft@sign,___ftpack@sign
 10202  0047B6  ECFF  F01B         	call	___ftpack	;wreg free
 10203  0047BA  C080  F088         	movff	?___ftpack,?___awtoft
 10204  0047BE  C081  F089         	movff	?___ftpack+1,?___awtoft+1
 10205  0047C2  C082  F08A         	movff	?___ftpack+2,?___awtoft+2
 10206  0047C6  0012               	return	
 10207  0047C8                     __end_of___awtoft:
 10208                           	opt stack 0
 10209                           tblptru	equ	0xFF8
 10210                           tblptrh	equ	0xFF7
 10211                           tblptrl	equ	0xFF6
 10212                           tablat	equ	0xFF5
 10213                           prodh	equ	0xFF4
 10214                           prodl	equ	0xFF3
 10215                           intcon	equ	0xFF2
 10216                           intcon2	equ	0xFF1
 10217                           intcon3	equ	0xFF0
 10218                           postinc0	equ	0xFEE
 10219                           wreg	equ	0xFE8
 10220                           indf2	equ	0xFDF
 10221                           postinc2	equ	0xFDE
 10222                           postdec2	equ	0xFDD
 10223                           fsr2h	equ	0xFDA
 10224                           fsr2l	equ	0xFD9
 10225                           status	equ	0xFD8
 10226                           
 10227 ;; *************** function ___ftpack *****************
 10228 ;; Defined at:
 10229 ;;		line 62 in file "/Applications/microchip/xc8/v1.40/sources/common/float.c"
 10230 ;; Parameters:    Size  Location     Type
 10231 ;;  arg             3    0[BANK0 ] unsigned um
 10232 ;;  exp             1    3[BANK0 ] unsigned char 
 10233 ;;  sign            1    4[BANK0 ] unsigned char 
 10234 ;; Auto vars:     Size  Location     Type
 10235 ;;		None
 10236 ;; Return value:  Size  Location     Type
 10237 ;;                  3    0[BANK0 ] float 
 10238 ;; Registers used:
 10239 ;;		wreg, status,2, status,0
 10240 ;; Tracked objects:
 10241 ;;		On entry : 0/0
 10242 ;;		On exit  : 0/0
 10243 ;;		Unchanged: 0/0
 10244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10245 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10247 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10248 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10249 ;;Total ram usage:        8 bytes
 10250 ;; Hardware stack levels used:    1
 10251 ;; Hardware stack levels required when called:    6
 10252 ;; This function calls:
 10253 ;;		Nothing
 10254 ;; This function is called by:
 10255 ;;		___awtoft
 10256 ;;		___ftadd
 10257 ;;		___ftdiv
 10258 ;;		___ftmul
 10259 ;;		___lltoft
 10260 ;; This function uses a non-reentrant model
 10261 ;;
 10262                           
 10263                           	psect	text38
 10264  0037FE                     __ptext38:
 10265                           	opt stack 0
 10266  0037FE                     ___ftpack:
 10267                           	opt stack 20
 10268                           
 10269                           ;incstack = 0
 10270  0037FE  0100               	movlb	0	; () banked
 10271  003800  5183               	movf	___ftpack@exp& (0+255),w,b
 10272  003802  0100               	movlb	0	; () banked
 10273  003804  B4D8               	btfsc	status,2,c
 10274  003806  D008               	goto	l3468
 10275                           
 10276                           ; BSR set to: 0
 10277  003808  0100               	movlb	0	; () banked
 10278  00380A  5180               	movf	___ftpack@arg& (0+255),w,b
 10279  00380C  0100               	movlb	0	; () banked
 10280  00380E  1181               	iorwf	(___ftpack@arg+1)& (0+255),w,b
 10281  003810  0100               	movlb	0	; () banked
 10282  003812  1182               	iorwf	(___ftpack@arg+2)& (0+255),w,b
 10283  003814  A4D8               	btfss	status,2,c
 10284  003816  D011               	goto	l3474
 10285  003818                     l3468:
 10286                           
 10287                           ; BSR set to: 0
 10288  003818  0E00               	movlw	0
 10289  00381A  0100               	movlb	0	; () banked
 10290  00381C  6F80               	movwf	?___ftpack& (0+255),b
 10291  00381E  0E00               	movlw	0
 10292  003820  0100               	movlb	0	; () banked
 10293  003822  6F81               	movwf	(?___ftpack+1)& (0+255),b
 10294  003824  0E00               	movlw	0
 10295  003826  0100               	movlb	0	; () banked
 10296  003828  6F82               	movwf	(?___ftpack+2)& (0+255),b
 10297                           
 10298                           ; BSR set to: 0
 10299  00382A  0012               	return	
 10300  00382C                     l3472:
 10301                           
 10302                           ; BSR set to: 0
 10303  00382C  0100               	movlb	0	; () banked
 10304  00382E  2B83               	incf	___ftpack@exp& (0+255),f,b
 10305  003830  0100               	movlb	0	; () banked
 10306  003832  90D8               	bcf	status,0,c
 10307  003834  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 10308  003836  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 10309  003838  3380               	rrcf	___ftpack@arg& (0+255),f,b
 10310  00383A                     l3474:
 10311                           
 10312                           ; BSR set to: 0
 10313  00383A  0E00               	movlw	0
 10314  00383C  0100               	movlb	0	; () banked
 10315  00383E  1580               	andwf	___ftpack@arg& (0+255),w,b
 10316  003840  0100               	movlb	0	; () banked
 10317  003842  6F85               	movwf	??___ftpack& (0+255),b
 10318  003844  0E00               	movlw	0
 10319  003846  0100               	movlb	0	; () banked
 10320  003848  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
 10321  00384A  0100               	movlb	0	; () banked
 10322  00384C  6F86               	movwf	(??___ftpack+1)& (0+255),b
 10323  00384E  0EFE               	movlw	254
 10324  003850  0100               	movlb	0	; () banked
 10325  003852  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
 10326  003854  0100               	movlb	0	; () banked
 10327  003856  6F87               	movwf	(??___ftpack+2)& (0+255),b
 10328  003858  0100               	movlb	0	; () banked
 10329  00385A  5185               	movf	??___ftpack& (0+255),w,b
 10330  00385C  0100               	movlb	0	; () banked
 10331  00385E  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
 10332  003860  0100               	movlb	0	; () banked
 10333  003862  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
 10334  003864  B4D8               	btfsc	status,2,c
 10335  003866  D011               	goto	l3480
 10336  003868  D7E1               	goto	l3472
 10337  00386A                     l3476:
 10338                           
 10339                           ; BSR set to: 0
 10340  00386A  0100               	movlb	0	; () banked
 10341  00386C  2B83               	incf	___ftpack@exp& (0+255),f,b
 10342                           
 10343                           ; BSR set to: 0
 10344  00386E  0E01               	movlw	1
 10345  003870  0100               	movlb	0	; () banked
 10346  003872  2780               	addwf	___ftpack@arg& (0+255),f,b
 10347  003874  0E00               	movlw	0
 10348  003876  0100               	movlb	0	; () banked
 10349  003878  2381               	addwfc	(___ftpack@arg+1)& (0+255),f,b
 10350  00387A  0E00               	movlw	0
 10351  00387C  0100               	movlb	0	; () banked
 10352  00387E  2382               	addwfc	(___ftpack@arg+2)& (0+255),f,b
 10353  003880  0100               	movlb	0	; () banked
 10354  003882  90D8               	bcf	status,0,c
 10355  003884  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 10356  003886  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 10357  003888  3380               	rrcf	___ftpack@arg& (0+255),f,b
 10358  00388A                     l3480:
 10359                           
 10360                           ; BSR set to: 0
 10361  00388A  0E00               	movlw	0
 10362  00388C  0100               	movlb	0	; () banked
 10363  00388E  1580               	andwf	___ftpack@arg& (0+255),w,b
 10364  003890  0100               	movlb	0	; () banked
 10365  003892  6F85               	movwf	??___ftpack& (0+255),b
 10366  003894  0E00               	movlw	0
 10367  003896  0100               	movlb	0	; () banked
 10368  003898  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
 10369  00389A  0100               	movlb	0	; () banked
 10370  00389C  6F86               	movwf	(??___ftpack+1)& (0+255),b
 10371  00389E  0EFF               	movlw	255
 10372  0038A0  0100               	movlb	0	; () banked
 10373  0038A2  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
 10374  0038A4  0100               	movlb	0	; () banked
 10375  0038A6  6F87               	movwf	(??___ftpack+2)& (0+255),b
 10376  0038A8  0100               	movlb	0	; () banked
 10377  0038AA  5185               	movf	??___ftpack& (0+255),w,b
 10378  0038AC  0100               	movlb	0	; () banked
 10379  0038AE  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
 10380  0038B0  0100               	movlb	0	; () banked
 10381  0038B2  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
 10382  0038B4  B4D8               	btfsc	status,2,c
 10383  0038B6  D008               	goto	l3484
 10384  0038B8  D7D8               	goto	l3476
 10385  0038BA                     l3482:
 10386                           
 10387                           ; BSR set to: 0
 10388  0038BA  0100               	movlb	0	; () banked
 10389  0038BC  0783               	decf	___ftpack@exp& (0+255),f,b
 10390  0038BE  0100               	movlb	0	; () banked
 10391  0038C0  90D8               	bcf	status,0,c
 10392  0038C2  3780               	rlcf	___ftpack@arg& (0+255),f,b
 10393  0038C4  3781               	rlcf	(___ftpack@arg+1)& (0+255),f,b
 10394  0038C6  3782               	rlcf	(___ftpack@arg+2)& (0+255),f,b
 10395  0038C8                     l3484:
 10396                           
 10397                           ; BSR set to: 0
 10398  0038C8  0100               	movlb	0	; () banked
 10399  0038CA  BF81               	btfsc	(___ftpack@arg+1)& (0+255),7,b
 10400  0038CC  D004               	goto	l765
 10401                           
 10402                           ; BSR set to: 0
 10403  0038CE  0E02               	movlw	2
 10404  0038D0  0100               	movlb	0	; () banked
 10405  0038D2  6183               	cpfslt	___ftpack@exp& (0+255),b
 10406  0038D4  D7F2               	goto	l3482
 10407  0038D6                     l765:
 10408                           
 10409                           ; BSR set to: 0
 10410  0038D6  0100               	movlb	0	; () banked
 10411  0038D8  B183               	btfsc	___ftpack@exp& (0+255),0,b
 10412  0038DA  D002               	goto	l3490
 10413                           
 10414                           ; BSR set to: 0
 10415  0038DC  0100               	movlb	0	; () banked
 10416  0038DE  9F81               	bcf	(___ftpack@arg+1)& (0+255),7,b
 10417  0038E0                     l3490:
 10418                           
 10419                           ; BSR set to: 0
 10420  0038E0  0100               	movlb	0	; () banked
 10421  0038E2  90D8               	bcf	status,0,c
 10422  0038E4  3383               	rrcf	___ftpack@exp& (0+255),f,b
 10423  0038E6  0100               	movlb	0	; () banked
 10424  0038E8  5183               	movf	___ftpack@exp& (0+255),w,b
 10425  0038EA  0100               	movlb	0	; () banked
 10426  0038EC  1382               	iorwf	(___ftpack@arg+2)& (0+255),f,b
 10427                           
 10428                           ; BSR set to: 0
 10429  0038EE  0100               	movlb	0	; () banked
 10430  0038F0  5184               	movf	___ftpack@sign& (0+255),w,b
 10431  0038F2  0100               	movlb	0	; () banked
 10432  0038F4  B4D8               	btfsc	status,2,c
 10433  0038F6  D002               	goto	l3496
 10434                           
 10435                           ; BSR set to: 0
 10436  0038F8  0100               	movlb	0	; () banked
 10437  0038FA  8F82               	bsf	(___ftpack@arg+2)& (0+255),7,b
 10438  0038FC                     l3496:
 10439                           
 10440                           ; BSR set to: 0
 10441  0038FC  C080  F080         	movff	___ftpack@arg,?___ftpack
 10442  003900  C081  F081         	movff	___ftpack@arg+1,?___ftpack+1
 10443  003904  C082  F082         	movff	___ftpack@arg+2,?___ftpack+2
 10444  003908  0012               	return	
 10445  00390A                     __end_of___ftpack:
 10446                           	opt stack 0
 10447                           tblptru	equ	0xFF8
 10448                           tblptrh	equ	0xFF7
 10449                           tblptrl	equ	0xFF6
 10450                           tablat	equ	0xFF5
 10451                           prodh	equ	0xFF4
 10452                           prodl	equ	0xFF3
 10453                           intcon	equ	0xFF2
 10454                           intcon2	equ	0xFF1
 10455                           intcon3	equ	0xFF0
 10456                           postinc0	equ	0xFEE
 10457                           wreg	equ	0xFE8
 10458                           indf2	equ	0xFDF
 10459                           postinc2	equ	0xFDE
 10460                           postdec2	equ	0xFDD
 10461                           fsr2h	equ	0xFDA
 10462                           fsr2l	equ	0xFD9
 10463                           status	equ	0xFD8
 10464                           
 10465 ;; *************** function _clean_count *****************
 10466 ;; Defined at:
 10467 ;;		line 477 in file "main.c"
 10468 ;; Parameters:    Size  Location     Type
 10469 ;;		None
 10470 ;; Auto vars:     Size  Location     Type
 10471 ;;		None
 10472 ;; Return value:  Size  Location     Type
 10473 ;;                  1    wreg      void 
 10474 ;; Registers used:
 10475 ;;		wreg, status,2
 10476 ;; Tracked objects:
 10477 ;;		On entry : 0/0
 10478 ;;		On exit  : 0/0
 10479 ;;		Unchanged: 0/0
 10480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10485 ;;Total ram usage:        0 bytes
 10486 ;; Hardware stack levels used:    1
 10487 ;; Hardware stack levels required when called:    6
 10488 ;; This function calls:
 10489 ;;		Nothing
 10490 ;; This function is called by:
 10491 ;;		_main
 10492 ;; This function uses a non-reentrant model
 10493 ;;
 10494                           
 10495                           	psect	text39
 10496  00483E                     __ptext39:
 10497                           	opt stack 0
 10498  00483E                     _clean_count:
 10499                           	opt stack 24
 10500                           
 10501                           ;main.c: 478: extern unsigned int AA_num, C_num, Nine_num, Drain_num, elapsed_time;
 10502                           ;main.c: 479: AA_num = 0;
 10503                           
 10504                           ; BSR set to: 0
 10505                           ;incstack = 0
 10506  00483E  0E00               	movlw	0
 10507  004840  0101               	movlb	1	; () banked
 10508  004842  6F01               	movwf	(_AA_num+1)& (0+255),b
 10509  004844  0E00               	movlw	0
 10510  004846  6F00               	movwf	_AA_num& (0+255),b
 10511                           
 10512                           ;main.c: 480: C_num = 0;
 10513  004848  0E00               	movlw	0
 10514  00484A  0101               	movlb	1	; () banked
 10515  00484C  6F03               	movwf	(_C_num+1)& (0+255),b
 10516  00484E  0E00               	movlw	0
 10517  004850  6F02               	movwf	_C_num& (0+255),b
 10518                           
 10519                           ;main.c: 481: Nine_num = 0;
 10520  004852  0E00               	movlw	0
 10521  004854  0101               	movlb	1	; () banked
 10522  004856  6F07               	movwf	(_Nine_num+1)& (0+255),b
 10523  004858  0E00               	movlw	0
 10524  00485A  6F06               	movwf	_Nine_num& (0+255),b
 10525                           
 10526                           ;main.c: 482: Drain_num = 0;
 10527  00485C  0E00               	movlw	0
 10528  00485E  0101               	movlb	1	; () banked
 10529  004860  6F05               	movwf	(_Drain_num+1)& (0+255),b
 10530  004862  0E00               	movlw	0
 10531  004864  6F04               	movwf	_Drain_num& (0+255),b
 10532                           
 10533                           ;main.c: 483: elapsed_time = 0;
 10534  004866  0E00               	movlw	0
 10535  004868  0101               	movlb	1	; () banked
 10536  00486A  6F09               	movwf	(_elapsed_time+1)& (0+255),b
 10537  00486C  0E00               	movlw	0
 10538  00486E  6F08               	movwf	_elapsed_time& (0+255),b
 10539                           
 10540                           ; BSR set to: 1
 10541  004870  0012               	return		;funcret
 10542  004872                     __end_of_clean_count:
 10543                           	opt stack 0
 10544                           tblptru	equ	0xFF8
 10545                           tblptrh	equ	0xFF7
 10546                           tblptrl	equ	0xFF6
 10547                           tablat	equ	0xFF5
 10548                           prodh	equ	0xFF4
 10549                           prodl	equ	0xFF3
 10550                           intcon	equ	0xFF2
 10551                           intcon2	equ	0xFF1
 10552                           intcon3	equ	0xFF0
 10553                           postinc0	equ	0xFEE
 10554                           wreg	equ	0xFE8
 10555                           indf2	equ	0xFDF
 10556                           postinc2	equ	0xFDE
 10557                           postdec2	equ	0xFDD
 10558                           fsr2h	equ	0xFDA
 10559                           fsr2l	equ	0xFD9
 10560                           status	equ	0xFD8
 10561                           
 10562 ;; *************** function _calculate_elapsed_time *****************
 10563 ;; Defined at:
 10564 ;;		line 438 in file "main.c"
 10565 ;; Parameters:    Size  Location     Type
 10566 ;;  time            2    0[BANK0 ] PTR unsigned char 
 10567 ;;		 -> main@time(7), 
 10568 ;; Auto vars:     Size  Location     Type
 10569 ;;		None
 10570 ;; Return value:  Size  Location     Type
 10571 ;;                  2    0[BANK0 ] int 
 10572 ;; Registers used:
 10573 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10574 ;; Tracked objects:
 10575 ;;		On entry : 0/0
 10576 ;;		On exit  : 0/0
 10577 ;;		Unchanged: 0/0
 10578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10579 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10581 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10582 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10583 ;;Total ram usage:        7 bytes
 10584 ;; Hardware stack levels used:    1
 10585 ;; Hardware stack levels required when called:    6
 10586 ;; This function calls:
 10587 ;;		Nothing
 10588 ;; This function is called by:
 10589 ;;		_main
 10590 ;; This function uses a non-reentrant model
 10591 ;;
 10592                           
 10593                           	psect	text40
 10594  003F58                     __ptext40:
 10595                           	opt stack 0
 10596  003F58                     _calculate_elapsed_time:
 10597                           	opt stack 24
 10598                           
 10599                           ;main.c: 439: return ((time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10 + 60*(time[1] & 0x0F) 
      +                          + ((time[1] & 0xF0)>>4)*10);
 10600                           
 10601                           ; BSR set to: 1
 10602                           ;incstack = 0
 10603  003F58  C080  FFD9         	movff	calculate_elapsed_time@time,fsr2l
 10604  003F5C  C081  FFDA         	movff	calculate_elapsed_time@time+1,fsr2h
 10605  003F60  50DF               	movf	indf2,w,c
 10606  003F62  0100               	movlb	0	; () banked
 10607  003F64  6F82               	movwf	??_calculate_elapsed_time& (0+255),b
 10608  003F66  0100               	movlb	0	; () banked
 10609  003F68  3B82               	swapf	??_calculate_elapsed_time& (0+255),f,b
 10610  003F6A  0E0F               	movlw	15
 10611  003F6C  1782               	andwf	??_calculate_elapsed_time& (0+255),f,b
 10612  003F6E  0E0F               	movlw	15
 10613  003F70  0100               	movlb	0	; () banked
 10614  003F72  1782               	andwf	??_calculate_elapsed_time& (0+255),f,b
 10615  003F74  0100               	movlb	0	; () banked
 10616  003F76  5182               	movf	??_calculate_elapsed_time& (0+255),w,b
 10617  003F78  0D0A               	mullw	10
 10618  003F7A  C080  FFD9         	movff	calculate_elapsed_time@time,fsr2l
 10619  003F7E  C081  FFDA         	movff	calculate_elapsed_time@time+1,fsr2h
 10620  003F82  50DF               	movf	indf2,w,c
 10621  003F84  0B0F               	andlw	15
 10622  003F86  0100               	movlb	0	; () banked
 10623  003F88  6F83               	movwf	(??_calculate_elapsed_time+1)& (0+255),b
 10624  003F8A  6B84               	clrf	(??_calculate_elapsed_time+2)& (0+255),b
 10625  003F8C  50F3               	movf	prodl,w,c
 10626  003F8E  0100               	movlb	0	; () banked
 10627  003F90  2783               	addwf	(??_calculate_elapsed_time+1)& (0+255),f,b
 10628  003F92  50F4               	movf	prodh,w,c
 10629  003F94  0100               	movlb	0	; () banked
 10630  003F96  2384               	addwfc	(??_calculate_elapsed_time+2)& (0+255),f,b
 10631  003F98  0100               	movlb	0	; () banked
 10632  003F9A  EE20 F001          	lfsr	2,1
 10633  003F9E  5180               	movf	calculate_elapsed_time@time& (0+255),w,b
 10634  003FA0  26D9               	addwf	fsr2l,f,c
 10635  003FA2  5181               	movf	(calculate_elapsed_time@time+1)& (0+255),w,b
 10636  003FA4  22DA               	addwfc	fsr2h,f,c
 10637  003FA6  50DF               	movf	indf2,w,c
 10638  003FA8  0100               	movlb	0	; () banked
 10639  003FAA  6F85               	movwf	(??_calculate_elapsed_time+3)& (0+255),b
 10640  003FAC  0E0F               	movlw	15
 10641  003FAE  0100               	movlb	0	; () banked
 10642  003FB0  1785               	andwf	(??_calculate_elapsed_time+3)& (0+255),f,b
 10643  003FB2  0100               	movlb	0	; () banked
 10644  003FB4  5185               	movf	(??_calculate_elapsed_time+3)& (0+255),w,b
 10645  003FB6  0D3C               	mullw	60
 10646  003FB8  50F3               	movf	prodl,w,c
 10647  003FBA  0100               	movlb	0	; () banked
 10648  003FBC  2783               	addwf	(??_calculate_elapsed_time+1)& (0+255),f,b
 10649  003FBE  50F4               	movf	prodh,w,c
 10650  003FC0  0100               	movlb	0	; () banked
 10651  003FC2  2384               	addwfc	(??_calculate_elapsed_time+2)& (0+255),f,b
 10652  003FC4  0100               	movlb	0	; () banked
 10653  003FC6  EE20 F001          	lfsr	2,1
 10654  003FCA  5180               	movf	calculate_elapsed_time@time& (0+255),w,b
 10655  003FCC  26D9               	addwf	fsr2l,f,c
 10656  003FCE  5181               	movf	(calculate_elapsed_time@time+1)& (0+255),w,b
 10657  003FD0  22DA               	addwfc	fsr2h,f,c
 10658  003FD2  50DF               	movf	indf2,w,c
 10659  003FD4  0100               	movlb	0	; () banked
 10660  003FD6  6F86               	movwf	(??_calculate_elapsed_time+4)& (0+255),b
 10661  003FD8  0100               	movlb	0	; () banked
 10662  003FDA  3B86               	swapf	(??_calculate_elapsed_time+4)& (0+255),f,b
 10663  003FDC  0E0F               	movlw	15
 10664  003FDE  1786               	andwf	(??_calculate_elapsed_time+4)& (0+255),f,b
 10665  003FE0  0E0F               	movlw	15
 10666  003FE2  0100               	movlb	0	; () banked
 10667  003FE4  1786               	andwf	(??_calculate_elapsed_time+4)& (0+255),f,b
 10668  003FE6  0100               	movlb	0	; () banked
 10669  003FE8  5186               	movf	(??_calculate_elapsed_time+4)& (0+255),w,b
 10670  003FEA  0D0A               	mullw	10
 10671  003FEC  50F3               	movf	prodl,w,c
 10672  003FEE  0100               	movlb	0	; () banked
 10673  003FF0  2583               	addwf	(??_calculate_elapsed_time+1)& (0+255),w,b
 10674  003FF2  0100               	movlb	0	; () banked
 10675  003FF4  6F80               	movwf	?_calculate_elapsed_time& (0+255),b
 10676  003FF6  50F4               	movf	prodh,w,c
 10677  003FF8  0100               	movlb	0	; () banked
 10678  003FFA  2184               	addwfc	(??_calculate_elapsed_time+2)& (0+255),w,b
 10679  003FFC  0100               	movlb	0	; () banked
 10680  003FFE  6F81               	movwf	(?_calculate_elapsed_time+1)& (0+255),b
 10681  004000  0012               	return	
 10682  004002                     __end_of_calculate_elapsed_time:
 10683                           	opt stack 0
 10684                           tblptru	equ	0xFF8
 10685                           tblptrh	equ	0xFF7
 10686                           tblptrl	equ	0xFF6
 10687                           tablat	equ	0xFF5
 10688                           prodh	equ	0xFF4
 10689                           prodl	equ	0xFF3
 10690                           intcon	equ	0xFF2
 10691                           intcon2	equ	0xFF1
 10692                           intcon3	equ	0xFF0
 10693                           postinc0	equ	0xFEE
 10694                           wreg	equ	0xFE8
 10695                           indf2	equ	0xFDF
 10696                           postinc2	equ	0xFDE
 10697                           postdec2	equ	0xFDD
 10698                           fsr2h	equ	0xFDA
 10699                           fsr2l	equ	0xFD9
 10700                           status	equ	0xFD8
 10701                           
 10702 ;; *************** function _I2C_Master_Init *****************
 10703 ;; Defined at:
 10704 ;;		line 13 in file "I2C.c"
 10705 ;; Parameters:    Size  Location     Type
 10706 ;;  c               4   13[BANK0 ] const unsigned long 
 10707 ;; Auto vars:     Size  Location     Type
 10708 ;;		None
 10709 ;; Return value:  Size  Location     Type
 10710 ;;                  1    wreg      void 
 10711 ;; Registers used:
 10712 ;;		wreg, status,2, status,0, cstack
 10713 ;; Tracked objects:
 10714 ;;		On entry : 0/0
 10715 ;;		On exit  : 0/0
 10716 ;;		Unchanged: 0/0
 10717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10718 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10720 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10721 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10722 ;;Total ram usage:        8 bytes
 10723 ;; Hardware stack levels used:    1
 10724 ;; Hardware stack levels required when called:    7
 10725 ;; This function calls:
 10726 ;;		___lldiv
 10727 ;; This function is called by:
 10728 ;;		_main
 10729 ;; This function uses a non-reentrant model
 10730 ;;
 10731                           
 10732                           	psect	text41
 10733  004534                     __ptext41:
 10734                           	opt stack 0
 10735  004534                     _I2C_Master_Init:
 10736                           	opt stack 23
 10737                           
 10738                           ;I2C.c: 16: SSPSTAT = 0b00000000;
 10739                           
 10740                           ; BSR set to: 0
 10741                           ;incstack = 0
 10742  004534  0E00               	movlw	0
 10743  004536  6EC7               	movwf	4039,c	;volatile
 10744                           
 10745                           ;I2C.c: 17: SSPCON1 = 0b00101000;
 10746  004538  0E28               	movlw	40
 10747  00453A  6EC6               	movwf	4038,c	;volatile
 10748                           
 10749                           ;I2C.c: 18: SSPCON2 = 0b00000000;
 10750  00453C  0E00               	movlw	0
 10751  00453E  6EC5               	movwf	4037,c	;volatile
 10752                           
 10753                           ;I2C.c: 19: SSPADD = (8000000/(4*c))-1;
 10754  004540  0E00               	movlw	0
 10755  004542  0100               	movlb	0	; () banked
 10756  004544  6F80               	movwf	___lldiv@dividend& (0+255),b
 10757  004546  0E12               	movlw	18
 10758  004548  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
 10759  00454A  0E7A               	movlw	122
 10760  00454C  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
 10761  00454E  0E00               	movlw	0
 10762  004550  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
 10763  004552  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
 10764  004556  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
 10765  00455A  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
 10766  00455E  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
 10767  004562  0E02               	movlw	2
 10768  004564                     u6285:
 10769  004564  90D8               	bcf	status,0,c
 10770  004566  0100               	movlb	0	; () banked
 10771  004568  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
 10772  00456A  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
 10773  00456C  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
 10774  00456E  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
 10775  004570  2EE8               	decfsz	wreg,f,c
 10776  004572  D7F8               	goto	u6285
 10777  004574  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
 10778  004578  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 10779  00457C  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 10780  004580  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 10781  004584  EC9E  F01E         	call	___lldiv	;wreg free
 10782  004588  0100               	movlb	0	; () banked
 10783  00458A  0580               	decf	?___lldiv& (0+255),w,b
 10784  00458C  6EC8               	movwf	4040,c	;volatile
 10785                           
 10786                           ; BSR set to: 0
 10787                           ;I2C.c: 20: TRISC3 = 1;
 10788  00458E  8694               	bsf	3988,3,c	;volatile
 10789                           
 10790                           ; BSR set to: 0
 10791                           ;I2C.c: 21: TRISC4 = 1;
 10792  004590  8894               	bsf	3988,4,c	;volatile
 10793                           
 10794                           ; BSR set to: 0
 10795  004592  0012               	return		;funcret
 10796  004594                     __end_of_I2C_Master_Init:
 10797                           	opt stack 0
 10798                           tblptru	equ	0xFF8
 10799                           tblptrh	equ	0xFF7
 10800                           tblptrl	equ	0xFF6
 10801                           tablat	equ	0xFF5
 10802                           prodh	equ	0xFF4
 10803                           prodl	equ	0xFF3
 10804                           intcon	equ	0xFF2
 10805                           intcon2	equ	0xFF1
 10806                           intcon3	equ	0xFF0
 10807                           postinc0	equ	0xFEE
 10808                           wreg	equ	0xFE8
 10809                           indf2	equ	0xFDF
 10810                           postinc2	equ	0xFDE
 10811                           postdec2	equ	0xFDD
 10812                           fsr2h	equ	0xFDA
 10813                           fsr2l	equ	0xFD9
 10814                           status	equ	0xFD8
 10815                           
 10816 ;; *************** function ___lldiv *****************
 10817 ;; Defined at:
 10818 ;;		line 8 in file "/Applications/microchip/xc8/v1.40/sources/common/lldiv.c"
 10819 ;; Parameters:    Size  Location     Type
 10820 ;;  dividend        4    0[BANK0 ] unsigned long 
 10821 ;;  divisor         4    4[BANK0 ] unsigned long 
 10822 ;; Auto vars:     Size  Location     Type
 10823 ;;  quotient        4    8[BANK0 ] unsigned long 
 10824 ;;  counter         1   12[BANK0 ] unsigned char 
 10825 ;; Return value:  Size  Location     Type
 10826 ;;                  4    0[BANK0 ] unsigned long 
 10827 ;; Registers used:
 10828 ;;		wreg, status,2, status,0
 10829 ;; Tracked objects:
 10830 ;;		On entry : 0/0
 10831 ;;		On exit  : 0/0
 10832 ;;		Unchanged: 0/0
 10833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10834 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10835 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10837 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10838 ;;Total ram usage:       13 bytes
 10839 ;; Hardware stack levels used:    1
 10840 ;; Hardware stack levels required when called:    6
 10841 ;; This function calls:
 10842 ;;		Nothing
 10843 ;; This function is called by:
 10844 ;;		_I2C_Master_Init
 10845 ;;		_printf
 10846 ;; This function uses a non-reentrant model
 10847 ;;
 10848                           
 10849                           	psect	text42
 10850  003D3C                     __ptext42:
 10851                           	opt stack 0
 10852  003D3C                     ___lldiv:
 10853                           	opt stack 22
 10854                           
 10855                           ; BSR set to: 0
 10856                           ;incstack = 0
 10857  003D3C  0E00               	movlw	0
 10858  003D3E  0100               	movlb	0	; () banked
 10859  003D40  6F88               	movwf	___lldiv@quotient& (0+255),b
 10860  003D42  0E00               	movlw	0
 10861  003D44  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
 10862  003D46  0E00               	movlw	0
 10863  003D48  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
 10864  003D4A  0E00               	movlw	0
 10865  003D4C  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
 10866                           
 10867                           ; BSR set to: 0
 10868  003D4E  0100               	movlb	0	; () banked
 10869  003D50  5184               	movf	___lldiv@divisor& (0+255),w,b
 10870  003D52  0100               	movlb	0	; () banked
 10871  003D54  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 10872  003D56  0100               	movlb	0	; () banked
 10873  003D58  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 10874  003D5A  0100               	movlb	0	; () banked
 10875  003D5C  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 10876  003D5E  B4D8               	btfsc	status,2,c
 10877  003D60  D042               	goto	l912
 10878                           
 10879                           ; BSR set to: 0
 10880  003D62  0E01               	movlw	1
 10881  003D64  0100               	movlb	0	; () banked
 10882  003D66  6F8C               	movwf	___lldiv@counter& (0+255),b
 10883  003D68  D008               	goto	l4260
 10884  003D6A                     l4258:
 10885                           
 10886                           ; BSR set to: 0
 10887  003D6A  0100               	movlb	0	; () banked
 10888  003D6C  90D8               	bcf	status,0,c
 10889  003D6E  3784               	rlcf	___lldiv@divisor& (0+255),f,b
 10890  003D70  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 10891  003D72  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 10892  003D74  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 10893  003D76  0100               	movlb	0	; () banked
 10894  003D78  2B8C               	incf	___lldiv@counter& (0+255),f,b
 10895  003D7A                     l4260:
 10896                           
 10897                           ; BSR set to: 0
 10898  003D7A  0100               	movlb	0	; () banked
 10899  003D7C  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 10900  003D7E  D7F5               	goto	l4258
 10901  003D80                     l4262:
 10902                           
 10903                           ; BSR set to: 0
 10904  003D80  0100               	movlb	0	; () banked
 10905  003D82  90D8               	bcf	status,0,c
 10906  003D84  3788               	rlcf	___lldiv@quotient& (0+255),f,b
 10907  003D86  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 10908  003D88  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 10909  003D8A  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 10910                           
 10911                           ; BSR set to: 0
 10912  003D8C  0100               	movlb	0	; () banked
 10913  003D8E  5184               	movf	___lldiv@divisor& (0+255),w,b
 10914  003D90  0100               	movlb	0	; () banked
 10915  003D92  5D80               	subwf	___lldiv@dividend& (0+255),w,b
 10916  003D94  0100               	movlb	0	; () banked
 10917  003D96  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 10918  003D98  0100               	movlb	0	; () banked
 10919  003D9A  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 10920  003D9C  0100               	movlb	0	; () banked
 10921  003D9E  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 10922  003DA0  0100               	movlb	0	; () banked
 10923  003DA2  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 10924  003DA4  0100               	movlb	0	; () banked
 10925  003DA6  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 10926  003DA8  0100               	movlb	0	; () banked
 10927  003DAA  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 10928  003DAC  A0D8               	btfss	status,0,c
 10929  003DAE  D012               	goto	l4270
 10930                           
 10931                           ; BSR set to: 0
 10932  003DB0  0100               	movlb	0	; () banked
 10933  003DB2  5184               	movf	___lldiv@divisor& (0+255),w,b
 10934  003DB4  0100               	movlb	0	; () banked
 10935  003DB6  5F80               	subwf	___lldiv@dividend& (0+255),f,b
 10936  003DB8  0100               	movlb	0	; () banked
 10937  003DBA  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 10938  003DBC  0100               	movlb	0	; () banked
 10939  003DBE  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 10940  003DC0  0100               	movlb	0	; () banked
 10941  003DC2  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 10942  003DC4  0100               	movlb	0	; () banked
 10943  003DC6  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 10944  003DC8  0100               	movlb	0	; () banked
 10945  003DCA  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 10946  003DCC  0100               	movlb	0	; () banked
 10947  003DCE  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 10948                           
 10949                           ; BSR set to: 0
 10950  003DD0  0100               	movlb	0	; () banked
 10951  003DD2  8188               	bsf	___lldiv@quotient& (0+255),0,b
 10952  003DD4                     l4270:
 10953                           
 10954                           ; BSR set to: 0
 10955  003DD4  0100               	movlb	0	; () banked
 10956  003DD6  90D8               	bcf	status,0,c
 10957  003DD8  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 10958  003DDA  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 10959  003DDC  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 10960  003DDE  3384               	rrcf	___lldiv@divisor& (0+255),f,b
 10961                           
 10962                           ; BSR set to: 0
 10963  003DE0  0100               	movlb	0	; () banked
 10964  003DE2  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
 10965  003DE4  D7CD               	goto	l4262
 10966  003DE6                     l912:
 10967                           
 10968                           ; BSR set to: 0
 10969  003DE6  C088  F080         	movff	___lldiv@quotient,?___lldiv
 10970  003DEA  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
 10971  003DEE  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
 10972  003DF2  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
 10973                           
 10974                           ; BSR set to: 0
 10975  003DF6  0012               	return		;funcret
 10976  003DF8                     __end_of___lldiv:
 10977                           	opt stack 0
 10978                           tblptru	equ	0xFF8
 10979                           tblptrh	equ	0xFF7
 10980                           tblptrl	equ	0xFF6
 10981                           tablat	equ	0xFF5
 10982                           prodh	equ	0xFF4
 10983                           prodl	equ	0xFF3
 10984                           intcon	equ	0xFF2
 10985                           intcon2	equ	0xFF1
 10986                           intcon3	equ	0xFF0
 10987                           postinc0	equ	0xFEE
 10988                           wreg	equ	0xFE8
 10989                           indf2	equ	0xFDF
 10990                           postinc2	equ	0xFDE
 10991                           postdec2	equ	0xFDD
 10992                           fsr2h	equ	0xFDA
 10993                           fsr2l	equ	0xFD9
 10994                           status	equ	0xFD8
 10995                           
 10996 ;; *************** function _Eeprom_WriteByte *****************
 10997 ;; Defined at:
 10998 ;;		line 513 in file "main.c"
 10999 ;; Parameters:    Size  Location     Type
 11000 ;;  address         2    0[BANK0 ] unsigned int 
 11001 ;;  data            1    2[BANK0 ] unsigned char 
 11002 ;; Auto vars:     Size  Location     Type
 11003 ;;		None
 11004 ;; Return value:  Size  Location     Type
 11005 ;;                  1    wreg      void 
 11006 ;; Registers used:
 11007 ;;		wreg, status,2
 11008 ;; Tracked objects:
 11009 ;;		On entry : 0/0
 11010 ;;		On exit  : 0/0
 11011 ;;		Unchanged: 0/0
 11012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11013 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11016 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11017 ;;Total ram usage:        3 bytes
 11018 ;; Hardware stack levels used:    1
 11019 ;; Hardware stack levels required when called:    6
 11020 ;; This function calls:
 11021 ;;		Nothing
 11022 ;; This function is called by:
 11023 ;;		_main
 11024 ;; This function uses a non-reentrant model
 11025 ;;
 11026                           
 11027                           	psect	text43
 11028  004926                     __ptext43:
 11029                           	opt stack 0
 11030  004926                     _Eeprom_WriteByte:
 11031                           	opt stack 24
 11032                           
 11033                           ;main.c: 515: EEADRH = (uint8_t)(address >> 8);
 11034                           
 11035                           ; BSR set to: 0
 11036                           ;incstack = 0
 11037  004926  0100               	movlb	0	; () banked
 11038  004928  5181               	movf	(Eeprom_WriteByte@address+1)& (0+255),w,b
 11039  00492A  6EAA               	movwf	4010,c	;volatile
 11040                           
 11041                           ; BSR set to: 0
 11042                           ;main.c: 516: EEADR = (uint8_t)address;
 11043  00492C  C080  FFA9         	movff	Eeprom_WriteByte@address,4009	;volatile
 11044                           
 11045                           ; BSR set to: 0
 11046                           ;main.c: 518: EEDATA = data;
 11047  004930  C082  FFA8         	movff	Eeprom_WriteByte@data,4008	;volatile
 11048                           
 11049                           ; BSR set to: 0
 11050                           ;main.c: 519: EECON1bits.EEPGD = 0;
 11051  004934  9EA6               	bcf	4006,7,c	;volatile
 11052                           
 11053                           ; BSR set to: 0
 11054                           ;main.c: 520: EECON1bits.CFGS = 0;
 11055  004936  9CA6               	bcf	4006,6,c	;volatile
 11056                           
 11057                           ; BSR set to: 0
 11058                           ;main.c: 521: EECON1bits.WREN = 1;
 11059  004938  84A6               	bsf	4006,2,c	;volatile
 11060                           
 11061                           ;main.c: 525: EECON2 = 0x55;
 11062  00493A  0E55               	movlw	85
 11063  00493C  6EA7               	movwf	4007,c	;volatile
 11064                           
 11065                           ;main.c: 526: EECON2 = 0xAA;
 11066  00493E  0EAA               	movlw	170
 11067  004940  6EA7               	movwf	4007,c	;volatile
 11068                           
 11069                           ; BSR set to: 0
 11070                           ;main.c: 527: EECON1bits.WR = 1;
 11071  004942  82A6               	bsf	4006,1,c	;volatile
 11072  004944                     l295:
 11073  004944  A8A1               	btfss	4001,4,c	;volatile
 11074  004946  D7FE               	goto	l295
 11075                           
 11076                           ;main.c: 533: }
 11077                           ;main.c: 535: PIR2bits.EEIF = 0;
 11078  004948  98A1               	bcf	4001,4,c	;volatile
 11079                           
 11080                           ;main.c: 536: EECON1bits.WREN = 0;
 11081  00494A  94A6               	bcf	4006,2,c	;volatile
 11082  00494C  0012               	return		;funcret
 11083  00494E                     __end_of_Eeprom_WriteByte:
 11084                           	opt stack 0
 11085                           tblptru	equ	0xFF8
 11086                           tblptrh	equ	0xFF7
 11087                           tblptrl	equ	0xFF6
 11088                           tablat	equ	0xFF5
 11089                           prodh	equ	0xFF4
 11090                           prodl	equ	0xFF3
 11091                           intcon	equ	0xFF2
 11092                           intcon2	equ	0xFF1
 11093                           intcon3	equ	0xFF0
 11094                           postinc0	equ	0xFEE
 11095                           wreg	equ	0xFE8
 11096                           indf2	equ	0xFDF
 11097                           postinc2	equ	0xFDE
 11098                           postdec2	equ	0xFDD
 11099                           fsr2h	equ	0xFDA
 11100                           fsr2l	equ	0xFD9
 11101                           status	equ	0xFD8
 11102                           
 11103 ;; *************** function _keypressed *****************
 11104 ;; Defined at:
 11105 ;;		line 335 in file "main.c"
 11106 ;; Parameters:    Size  Location     Type
 11107 ;;		None
 11108 ;; Auto vars:     Size  Location     Type
 11109 ;;  keypress        1  115[COMRAM] unsigned char 
 11110 ;; Return value:  Size  Location     Type
 11111 ;;                  1    wreg      void 
 11112 ;; Registers used:
 11113 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11114 ;; Tracked objects:
 11115 ;;		On entry : 0/0
 11116 ;;		On exit  : 0/0
 11117 ;;		Unchanged: 0/0
 11118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11120 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11121 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11122 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11123 ;;Total ram usage:       16 bytes
 11124 ;; Hardware stack levels used:    1
 11125 ;; Hardware stack levels required when called:    5
 11126 ;; This function calls:
 11127 ;;		_select_menu
 11128 ;;		i2_lcdInst
 11129 ;; This function is called by:
 11130 ;;		Interrupt level 2
 11131 ;; This function uses a non-reentrant model
 11132 ;;
 11133                           
 11134                           	psect	intcode
 11135  000008                     __pintcode:
 11136                           	opt stack 0
 11137  000008                     _keypressed:
 11138                           	opt stack 20
 11139                           
 11140                           ;incstack = 0
 11141  000008  827B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 11142  00000A  EDFC  F01E         	call	int_func,f	;refresh shadow registers
 11143                           tblptru	equ	0xFF8
 11144                           tblptrh	equ	0xFF7
 11145                           tblptrl	equ	0xFF6
 11146                           tablat	equ	0xFF5
 11147                           prodh	equ	0xFF4
 11148                           prodl	equ	0xFF3
 11149                           intcon	equ	0xFF2
 11150                           intcon2	equ	0xFF1
 11151                           intcon3	equ	0xFF0
 11152                           postinc0	equ	0xFEE
 11153                           wreg	equ	0xFE8
 11154                           indf2	equ	0xFDF
 11155                           postinc2	equ	0xFDE
 11156                           postdec2	equ	0xFDD
 11157                           fsr2h	equ	0xFDA
 11158                           fsr2l	equ	0xFD9
 11159                           status	equ	0xFD8
 11160                           
 11161                           	psect	intcode_body
 11162  003DF8                     __pintcode_body:
 11163                           	opt stack 20
 11164  003DF8                     int_func:
 11165                           	opt stack 20
 11166  003DF8  0006               	pop		; remove dummy address from shadow register refresh
 11167  003DFA  CFFA F066          	movff	pclath,??_keypressed+1
 11168  003DFE  CFFB F067          	movff	pclatu,??_keypressed+2
 11169  003E02  CFE9 F068          	movff	fsr0l,??_keypressed+3
 11170  003E06  CFEA F069          	movff	fsr0h,??_keypressed+4
 11171  003E0A  CFE1 F06A          	movff	fsr1l,??_keypressed+5
 11172  003E0E  CFE2 F06B          	movff	fsr1h,??_keypressed+6
 11173  003E12  CFD9 F06C          	movff	fsr2l,??_keypressed+7
 11174  003E16  CFDA F06D          	movff	fsr2h,??_keypressed+8
 11175  003E1A  CFF3 F06E          	movff	prodl,??_keypressed+9
 11176  003E1E  CFF4 F06F          	movff	prodh,??_keypressed+10
 11177  003E22  CFF6 F070          	movff	tblptrl,??_keypressed+11
 11178  003E26  CFF7 F071          	movff	tblptrh,??_keypressed+12
 11179  003E2A  CFF8 F072          	movff	tblptru,??_keypressed+13
 11180  003E2E  CFF5 F073          	movff	tablat,??_keypressed+14
 11181                           
 11182                           ;main.c: 336: if(INT1IF){
 11183  003E32  A0F0               	btfss	intcon3,0,c	;volatile
 11184  003E34  D01C               	goto	i2l194
 11185                           
 11186                           ;main.c: 337: { lcdInst(0b00000001); _delay((unsigned long)((15)*(8000000/4000.0))); };
 11187  003E36  0E01               	movlw	1
 11188  003E38  EC2D  F025         	call	i2_lcdInst
 11189  003E3C  0E27               	movlw	39
 11190  003E3E  6E65               	movwf	??_keypressed& (0+255),c
 11191  003E40  0EF5               	movlw	245
 11192  003E42                     i2u696_47:
 11193  003E42  2EE8               	decfsz	wreg,f,c
 11194  003E44  D7FE               	bra	i2u696_47
 11195  003E46  2E65               	decfsz	??_keypressed& (0+255),f,c
 11196  003E48  D7FC               	bra	i2u696_47
 11197  003E4A  F000               	nop	
 11198                           
 11199                           ;main.c: 338: unsigned char keypress = (PORTB & 0xF0) >> 4;
 11200  003E4C  3881               	swapf	3969,w,c	;volatile
 11201  003E4E  0B0F               	andlw	15
 11202  003E50  0B0F               	andlw	15
 11203  003E52  6E74               	movwf	keypressed@keypress,c
 11204                           
 11205                           ;main.c: 339: select_menu(keys[keypress]);
 11206  003E54  5074               	movf	keypressed@keypress,w,c
 11207  003E56  0D01               	mullw	1
 11208  003E58  0E23               	movlw	low _keys
 11209  003E5A  24F3               	addwf	prodl,w,c
 11210  003E5C  6EF6               	movwf	tblptrl,c
 11211  003E5E  0EFF               	movlw	high _keys
 11212  003E60  20F4               	addwfc	prodh,w,c
 11213  003E62  6EF7               	movwf	tblptrh,c
 11214  003E64                     	if	0	;There are less than 3 active tblptr bytes
 11215  003E64                     	endif
 11216  003E64  0008               	tblrd		*
 11217  003E66  50F5               	movf	tablat,w,c
 11218  003E68  ECB9  F014         	call	_select_menu
 11219                           
 11220                           ;main.c: 340: INT1IF = 0;
 11221  003E6C  90F0               	bcf	intcon3,0,c	;volatile
 11222  003E6E                     i2l194:
 11223  003E6E  C073  FFF5         	movff	??_keypressed+14,tablat
 11224  003E72  C072  FFF8         	movff	??_keypressed+13,tblptru
 11225  003E76  C071  FFF7         	movff	??_keypressed+12,tblptrh
 11226  003E7A  C070  FFF6         	movff	??_keypressed+11,tblptrl
 11227  003E7E  C06F  FFF4         	movff	??_keypressed+10,prodh
 11228  003E82  C06E  FFF3         	movff	??_keypressed+9,prodl
 11229  003E86  C06D  FFDA         	movff	??_keypressed+8,fsr2h
 11230  003E8A  C06C  FFD9         	movff	??_keypressed+7,fsr2l
 11231  003E8E  C06B  FFE2         	movff	??_keypressed+6,fsr1h
 11232  003E92  C06A  FFE1         	movff	??_keypressed+5,fsr1l
 11233  003E96  C069  FFEA         	movff	??_keypressed+4,fsr0h
 11234  003E9A  C068  FFE9         	movff	??_keypressed+3,fsr0l
 11235  003E9E  C067  FFFB         	movff	??_keypressed+2,pclatu
 11236  003EA2  C066  FFFA         	movff	??_keypressed+1,pclath
 11237  003EA6  927B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 11238  003EA8  0011               	retfie		f
 11239  003EAA                     __end_of_keypressed:
 11240                           	opt stack 0
 11241                           pclatu	equ	0xFFB
 11242                           pclath	equ	0xFFA
 11243                           tblptru	equ	0xFF8
 11244                           tblptrh	equ	0xFF7
 11245                           tblptrl	equ	0xFF6
 11246                           tablat	equ	0xFF5
 11247                           prodh	equ	0xFF4
 11248                           prodl	equ	0xFF3
 11249                           intcon	equ	0xFF2
 11250                           intcon2	equ	0xFF1
 11251                           intcon3	equ	0xFF0
 11252                           postinc0	equ	0xFEE
 11253                           fsr0h	equ	0xFEA
 11254                           fsr0l	equ	0xFE9
 11255                           wreg	equ	0xFE8
 11256                           fsr1h	equ	0xFE2
 11257                           fsr1l	equ	0xFE1
 11258                           indf2	equ	0xFDF
 11259                           postinc2	equ	0xFDE
 11260                           postdec2	equ	0xFDD
 11261                           fsr2h	equ	0xFDA
 11262                           fsr2l	equ	0xFD9
 11263                           status	equ	0xFD8
 11264                           
 11265 ;; *************** function i2_lcdInst *****************
 11266 ;; Defined at:
 11267 ;;		line 25 in file "lcd.c"
 11268 ;; Parameters:    Size  Location     Type
 11269 ;;  data            1    wreg     unsigned char 
 11270 ;; Auto vars:     Size  Location     Type
 11271 ;;  data            1    2[COMRAM] unsigned char 
 11272 ;; Return value:  Size  Location     Type
 11273 ;;                  1    wreg      void 
 11274 ;; Registers used:
 11275 ;;		wreg, status,2, status,0, cstack
 11276 ;; Tracked objects:
 11277 ;;		On entry : 0/0
 11278 ;;		On exit  : 0/0
 11279 ;;		Unchanged: 0/0
 11280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11282 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11284 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11285 ;;Total ram usage:        1 bytes
 11286 ;; Hardware stack levels used:    1
 11287 ;; Hardware stack levels required when called:    1
 11288 ;; This function calls:
 11289 ;;		i2_lcdNibble
 11290 ;; This function is called by:
 11291 ;;		_keypressed
 11292 ;; This function uses a non-reentrant model
 11293 ;;
 11294                           
 11295                           	psect	text45
 11296  004A5A                     __ptext45:
 11297                           	opt stack 0
 11298  004A5A                     i2_lcdInst:
 11299                           	opt stack 23
 11300                           
 11301                           ;incstack = 0
 11302                           ;i2lcdInst@data stored from wreg
 11303  004A5A  6E03               	movwf	i2lcdInst@data,c
 11304                           
 11305                           ;lcd.c: 26: LATDbits.LATD2 = 0;
 11306  004A5C  948C               	bcf	3980,2,c	;volatile
 11307                           
 11308                           ;lcd.c: 27: lcdNibble(data);
 11309  004A5E  5003               	movf	i2lcdInst@data,w,c
 11310  004A60  EC26  F023         	call	i2_lcdNibble
 11311  004A64  0012               	return		;funcret
 11312  004A66                     __end_ofi2_lcdInst:
 11313                           	opt stack 0
 11314                           pclatu	equ	0xFFB
 11315                           pclath	equ	0xFFA
 11316                           tblptru	equ	0xFF8
 11317                           tblptrh	equ	0xFF7
 11318                           tblptrl	equ	0xFF6
 11319                           tablat	equ	0xFF5
 11320                           prodh	equ	0xFF4
 11321                           prodl	equ	0xFF3
 11322                           intcon	equ	0xFF2
 11323                           intcon2	equ	0xFF1
 11324                           intcon3	equ	0xFF0
 11325                           postinc0	equ	0xFEE
 11326                           fsr0h	equ	0xFEA
 11327                           fsr0l	equ	0xFE9
 11328                           wreg	equ	0xFE8
 11329                           fsr1h	equ	0xFE2
 11330                           fsr1l	equ	0xFE1
 11331                           indf2	equ	0xFDF
 11332                           postinc2	equ	0xFDE
 11333                           postdec2	equ	0xFDD
 11334                           fsr2h	equ	0xFDA
 11335                           fsr2l	equ	0xFD9
 11336                           status	equ	0xFD8
 11337                           
 11338 ;; *************** function _select_menu *****************
 11339 ;; Defined at:
 11340 ;;		line 348 in file "main.c"
 11341 ;; Parameters:    Size  Location     Type
 11342 ;;  temp            1    wreg     unsigned char 
 11343 ;; Auto vars:     Size  Location     Type
 11344 ;;  temp            1   99[COMRAM] unsigned char 
 11345 ;; Return value:  Size  Location     Type
 11346 ;;                  1    wreg      void 
 11347 ;; Registers used:
 11348 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11349 ;; Tracked objects:
 11350 ;;		On entry : 0/0
 11351 ;;		On exit  : 0/0
 11352 ;;		Unchanged: 0/0
 11353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11355 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11356 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11357 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11358 ;;Total ram usage:        3 bytes
 11359 ;; Hardware stack levels used:    1
 11360 ;; Hardware stack levels required when called:    4
 11361 ;; This function calls:
 11362 ;;		i2_printf
 11363 ;; This function is called by:
 11364 ;;		_keypressed
 11365 ;; This function uses a non-reentrant model
 11366 ;;
 11367                           
 11368                           	psect	text46
 11369  002972                     __ptext46:
 11370                           	opt stack 0
 11371  002972                     _select_menu:
 11372                           	opt stack 20
 11373                           
 11374                           ;incstack = 0
 11375                           ;select_menu@temp stored from wreg
 11376  002972  6E64               	movwf	select_menu@temp,c
 11377                           
 11378                           ;main.c: 349: extern unsigned int menu;
 11379                           ;main.c: 350: extern unsigned int log;
 11380                           ;main.c: 351: extern unsigned int is_active;
 11381                           ;main.c: 352: switch(menu) {
 11382  002974  D0F4               	goto	i2l5452
 11383  002976                     i2l5366:
 11384                           
 11385                           ;main.c: 354: if(temp == '*') {
 11386  002976  0E2A               	movlw	42
 11387  002978  1864               	xorwf	select_menu@temp,w,c
 11388  00297A  A4D8               	btfss	status,2,c
 11389  00297C  D00D               	goto	i2l5370
 11390                           
 11391                           ;main.c: 355: is_active = !is_active;
 11392  00297E  0101               	movlb	1	; () banked
 11393  002980  510A               	movf	_is_active& (0+255),w,b
 11394  002982  0101               	movlb	1	; () banked
 11395  002984  110B               	iorwf	(_is_active+1)& (0+255),w,b
 11396  002986  A4D8               	btfss	status,2,c
 11397  002988  D002               	goto	i2u638_40
 11398  00298A  0E01               	movlw	1
 11399  00298C  D001               	goto	i2u639_40
 11400  00298E                     i2u638_40:
 11401  00298E  0E00               	movlw	0
 11402  002990                     i2u639_40:
 11403  002990  0101               	movlb	1	; () banked
 11404  002992  6F0A               	movwf	_is_active& (0+255),b
 11405  002994  6B0B               	clrf	(_is_active+1)& (0+255),b
 11406                           
 11407                           ;main.c: 356: } else {
 11408  002996  0012               	return	
 11409  002998                     i2l5370:
 11410                           
 11411                           ;main.c: 357: if(temp == '7'){menu = 1;} else if(temp == '9'){menu = 2;}
 11412  002998  0E37               	movlw	55
 11413  00299A  1864               	xorwf	select_menu@temp,w,c
 11414  00299C  A4D8               	btfss	status,2,c
 11415  00299E  D006               	goto	i2l5374
 11416  0029A0  0E00               	movlw	0
 11417  0029A2  0101               	movlb	1	; () banked
 11418  0029A4  6F11               	movwf	(_menu+1)& (0+255),b
 11419  0029A6  0E01               	movlw	1
 11420  0029A8  6F10               	movwf	_menu& (0+255),b
 11421  0029AA  0012               	return	
 11422  0029AC                     i2l5374:
 11423  0029AC  0E39               	movlw	57
 11424  0029AE  1864               	xorwf	select_menu@temp,w,c
 11425  0029B0  A4D8               	btfss	status,2,c
 11426  0029B2  0012               	return	
 11427  0029B4  0E00               	movlw	0
 11428  0029B6  0101               	movlb	1	; () banked
 11429  0029B8  6F11               	movwf	(_menu+1)& (0+255),b
 11430  0029BA  0E02               	movlw	2
 11431  0029BC  6F10               	movwf	_menu& (0+255),b
 11432                           
 11433                           ; BSR set to: 1
 11434                           ;main.c: 358: }
 11435                           ;main.c: 359: break;
 11436                           
 11437                           ; BSR set to: 1
 11438                           
 11439                           ; BSR set to: 1
 11440  0029BE  0012               	return	
 11441  0029C0                     i2l5378:
 11442                           
 11443                           ;main.c: 361: if(temp == '7'){menu = 7;} else if(temp == '9'){menu = 0;}
 11444  0029C0  0E37               	movlw	55
 11445  0029C2  1864               	xorwf	select_menu@temp,w,c
 11446  0029C4  A4D8               	btfss	status,2,c
 11447  0029C6  D006               	goto	i2l5382
 11448  0029C8  0E00               	movlw	0
 11449  0029CA  0101               	movlb	1	; () banked
 11450  0029CC  6F11               	movwf	(_menu+1)& (0+255),b
 11451  0029CE  0E07               	movlw	7
 11452  0029D0  6F10               	movwf	_menu& (0+255),b
 11453  0029D2  0012               	return	
 11454  0029D4                     i2l5382:
 11455  0029D4  0E39               	movlw	57
 11456  0029D6  1864               	xorwf	select_menu@temp,w,c
 11457  0029D8  A4D8               	btfss	status,2,c
 11458  0029DA  0012               	return	
 11459  0029DC  0E00               	movlw	0
 11460  0029DE  0101               	movlb	1	; () banked
 11461  0029E0  6F11               	movwf	(_menu+1)& (0+255),b
 11462  0029E2  0E00               	movlw	0
 11463  0029E4  6F10               	movwf	_menu& (0+255),b
 11464                           
 11465                           ; BSR set to: 1
 11466                           ;main.c: 362: break;
 11467                           
 11468                           ; BSR set to: 1
 11469  0029E6  0012               	return	
 11470  0029E8                     i2l5386:
 11471                           
 11472                           ;main.c: 364: if(temp == '7'){menu = 0;} else if(temp == '9'){menu = 3;}
 11473  0029E8  0E37               	movlw	55
 11474  0029EA  1864               	xorwf	select_menu@temp,w,c
 11475  0029EC  A4D8               	btfss	status,2,c
 11476  0029EE  D006               	goto	i2l5390
 11477  0029F0  0E00               	movlw	0
 11478  0029F2  0101               	movlb	1	; () banked
 11479  0029F4  6F11               	movwf	(_menu+1)& (0+255),b
 11480  0029F6  0E00               	movlw	0
 11481  0029F8  6F10               	movwf	_menu& (0+255),b
 11482  0029FA  0012               	return	
 11483  0029FC                     i2l5390:
 11484  0029FC  0E39               	movlw	57
 11485  0029FE  1864               	xorwf	select_menu@temp,w,c
 11486  002A00  A4D8               	btfss	status,2,c
 11487  002A02  0012               	return	
 11488  002A04  0E00               	movlw	0
 11489  002A06  0101               	movlb	1	; () banked
 11490  002A08  6F11               	movwf	(_menu+1)& (0+255),b
 11491  002A0A  0E03               	movlw	3
 11492  002A0C  6F10               	movwf	_menu& (0+255),b
 11493                           
 11494                           ; BSR set to: 1
 11495                           ;main.c: 365: break;
 11496                           
 11497                           ; BSR set to: 1
 11498  002A0E  0012               	return	
 11499  002A10                     i2l5394:
 11500                           
 11501                           ;main.c: 367: if(temp == '7'){menu = 2;} else if(temp == '9'){menu = 4;}
 11502  002A10  0E37               	movlw	55
 11503  002A12  1864               	xorwf	select_menu@temp,w,c
 11504  002A14  A4D8               	btfss	status,2,c
 11505  002A16  D006               	goto	i2l5398
 11506  002A18  0E00               	movlw	0
 11507  002A1A  0101               	movlb	1	; () banked
 11508  002A1C  6F11               	movwf	(_menu+1)& (0+255),b
 11509  002A1E  0E02               	movlw	2
 11510  002A20  6F10               	movwf	_menu& (0+255),b
 11511  002A22  0012               	return	
 11512  002A24                     i2l5398:
 11513  002A24  0E39               	movlw	57
 11514  002A26  1864               	xorwf	select_menu@temp,w,c
 11515  002A28  A4D8               	btfss	status,2,c
 11516  002A2A  0012               	return	
 11517  002A2C  0E00               	movlw	0
 11518  002A2E  0101               	movlb	1	; () banked
 11519  002A30  6F11               	movwf	(_menu+1)& (0+255),b
 11520  002A32  0E04               	movlw	4
 11521  002A34  6F10               	movwf	_menu& (0+255),b
 11522                           
 11523                           ; BSR set to: 1
 11524                           ;main.c: 368: break;
 11525                           
 11526                           ; BSR set to: 1
 11527  002A36  0012               	return	
 11528  002A38                     i2l5402:
 11529                           
 11530                           ;main.c: 370: if(temp == '7'){menu = 3;} else if(temp == '9'){menu = 5;}
 11531  002A38  0E37               	movlw	55
 11532  002A3A  1864               	xorwf	select_menu@temp,w,c
 11533  002A3C  A4D8               	btfss	status,2,c
 11534  002A3E  D006               	goto	i2l5406
 11535  002A40  0E00               	movlw	0
 11536  002A42  0101               	movlb	1	; () banked
 11537  002A44  6F11               	movwf	(_menu+1)& (0+255),b
 11538  002A46  0E03               	movlw	3
 11539  002A48  6F10               	movwf	_menu& (0+255),b
 11540  002A4A  0012               	return	
 11541  002A4C                     i2l5406:
 11542  002A4C  0E39               	movlw	57
 11543  002A4E  1864               	xorwf	select_menu@temp,w,c
 11544  002A50  A4D8               	btfss	status,2,c
 11545  002A52  0012               	return	
 11546  002A54  0E00               	movlw	0
 11547  002A56  0101               	movlb	1	; () banked
 11548  002A58  6F11               	movwf	(_menu+1)& (0+255),b
 11549  002A5A  0E05               	movlw	5
 11550  002A5C  6F10               	movwf	_menu& (0+255),b
 11551                           
 11552                           ; BSR set to: 1
 11553                           ;main.c: 371: break;
 11554                           
 11555                           ; BSR set to: 1
 11556  002A5E  0012               	return	
 11557  002A60                     i2l5410:
 11558                           
 11559                           ;main.c: 373: if(temp == '7'){menu = 4;} else if(temp == '9'){menu = 6;}
 11560  002A60  0E37               	movlw	55
 11561  002A62  1864               	xorwf	select_menu@temp,w,c
 11562  002A64  A4D8               	btfss	status,2,c
 11563  002A66  D006               	goto	i2l5414
 11564  002A68  0E00               	movlw	0
 11565  002A6A  0101               	movlb	1	; () banked
 11566  002A6C  6F11               	movwf	(_menu+1)& (0+255),b
 11567  002A6E  0E04               	movlw	4
 11568  002A70  6F10               	movwf	_menu& (0+255),b
 11569  002A72  0012               	return	
 11570  002A74                     i2l5414:
 11571  002A74  0E39               	movlw	57
 11572  002A76  1864               	xorwf	select_menu@temp,w,c
 11573  002A78  A4D8               	btfss	status,2,c
 11574  002A7A  0012               	return	
 11575  002A7C  0E00               	movlw	0
 11576  002A7E  0101               	movlb	1	; () banked
 11577  002A80  6F11               	movwf	(_menu+1)& (0+255),b
 11578  002A82  0E06               	movlw	6
 11579  002A84  6F10               	movwf	_menu& (0+255),b
 11580                           
 11581                           ; BSR set to: 1
 11582                           ;main.c: 374: break;
 11583                           
 11584                           ; BSR set to: 1
 11585  002A86  0012               	return	
 11586  002A88                     i2l5418:
 11587                           
 11588                           ;main.c: 376: if(temp == '7'){menu = 5;} else if(temp == '9'){menu = 7;}
 11589  002A88  0E37               	movlw	55
 11590  002A8A  1864               	xorwf	select_menu@temp,w,c
 11591  002A8C  A4D8               	btfss	status,2,c
 11592  002A8E  D006               	goto	i2l5422
 11593  002A90  0E00               	movlw	0
 11594  002A92  0101               	movlb	1	; () banked
 11595  002A94  6F11               	movwf	(_menu+1)& (0+255),b
 11596  002A96  0E05               	movlw	5
 11597  002A98  6F10               	movwf	_menu& (0+255),b
 11598  002A9A  0012               	return	
 11599  002A9C                     i2l5422:
 11600  002A9C  0E39               	movlw	57
 11601  002A9E  1864               	xorwf	select_menu@temp,w,c
 11602  002AA0  A4D8               	btfss	status,2,c
 11603  002AA2  0012               	return	
 11604  002AA4  0E00               	movlw	0
 11605  002AA6  0101               	movlb	1	; () banked
 11606  002AA8  6F11               	movwf	(_menu+1)& (0+255),b
 11607  002AAA  0E07               	movlw	7
 11608  002AAC  6F10               	movwf	_menu& (0+255),b
 11609                           
 11610                           ; BSR set to: 1
 11611                           ;main.c: 377: break;
 11612                           
 11613                           ; BSR set to: 1
 11614  002AAE  0012               	return	
 11615  002AB0                     i2l5426:
 11616                           
 11617                           ;main.c: 379: if(temp == '1') {
 11618  002AB0  0E31               	movlw	49
 11619  002AB2  1864               	xorwf	select_menu@temp,w,c
 11620  002AB4  A4D8               	btfss	status,2,c
 11621  002AB6  D00B               	goto	i2l5430
 11622                           
 11623                           ;main.c: 380: log = 1;
 11624  002AB8  0E00               	movlw	0
 11625  002ABA  0101               	movlb	1	; () banked
 11626  002ABC  6F0F               	movwf	(_log+1)& (0+255),b
 11627  002ABE  0E01               	movlw	1
 11628  002AC0  6F0E               	movwf	_log& (0+255),b
 11629                           
 11630                           ;main.c: 381: menu = 8;
 11631  002AC2  0E00               	movlw	0
 11632  002AC4  0101               	movlb	1	; () banked
 11633  002AC6  6F11               	movwf	(_menu+1)& (0+255),b
 11634  002AC8  0E08               	movlw	8
 11635  002ACA  6F10               	movwf	_menu& (0+255),b
 11636                           
 11637                           ;main.c: 382: } else if (temp == '2') {
 11638  002ACC  0012               	return	
 11639  002ACE                     i2l5430:
 11640  002ACE  0E32               	movlw	50
 11641  002AD0  1864               	xorwf	select_menu@temp,w,c
 11642  002AD2  A4D8               	btfss	status,2,c
 11643  002AD4  D00B               	goto	i2l5434
 11644                           
 11645                           ;main.c: 383: log = 2;
 11646  002AD6  0E00               	movlw	0
 11647  002AD8  0101               	movlb	1	; () banked
 11648  002ADA  6F0F               	movwf	(_log+1)& (0+255),b
 11649  002ADC  0E02               	movlw	2
 11650  002ADE  6F0E               	movwf	_log& (0+255),b
 11651                           
 11652                           ;main.c: 384: menu = 9;
 11653  002AE0  0E00               	movlw	0
 11654  002AE2  0101               	movlb	1	; () banked
 11655  002AE4  6F11               	movwf	(_menu+1)& (0+255),b
 11656  002AE6  0E09               	movlw	9
 11657  002AE8  6F10               	movwf	_menu& (0+255),b
 11658                           
 11659                           ;main.c: 385: } else if (temp == '3') {
 11660  002AEA  0012               	return	
 11661  002AEC                     i2l5434:
 11662  002AEC  0E33               	movlw	51
 11663  002AEE  1864               	xorwf	select_menu@temp,w,c
 11664  002AF0  A4D8               	btfss	status,2,c
 11665  002AF2  D00B               	goto	i2l5438
 11666                           
 11667                           ;main.c: 386: log = 3;
 11668  002AF4  0E00               	movlw	0
 11669  002AF6  0101               	movlb	1	; () banked
 11670  002AF8  6F0F               	movwf	(_log+1)& (0+255),b
 11671  002AFA  0E03               	movlw	3
 11672  002AFC  6F0E               	movwf	_log& (0+255),b
 11673                           
 11674                           ;main.c: 387: menu = 10;
 11675  002AFE  0E00               	movlw	0
 11676  002B00  0101               	movlb	1	; () banked
 11677  002B02  6F11               	movwf	(_menu+1)& (0+255),b
 11678  002B04  0E0A               	movlw	10
 11679  002B06  6F10               	movwf	_menu& (0+255),b
 11680                           
 11681                           ;main.c: 388: } else {
 11682  002B08  0012               	return	
 11683  002B0A                     i2l5438:
 11684                           
 11685                           ;main.c: 389: if(temp == '7'){menu = 6;} else if(temp == '9'){menu = 1;}
 11686  002B0A  0E37               	movlw	55
 11687  002B0C  1864               	xorwf	select_menu@temp,w,c
 11688  002B0E  A4D8               	btfss	status,2,c
 11689  002B10  D006               	goto	i2l5442
 11690  002B12  0E00               	movlw	0
 11691  002B14  0101               	movlb	1	; () banked
 11692  002B16  6F11               	movwf	(_menu+1)& (0+255),b
 11693  002B18  0E06               	movlw	6
 11694  002B1A  6F10               	movwf	_menu& (0+255),b
 11695  002B1C  0012               	return	
 11696  002B1E                     i2l5442:
 11697  002B1E  0E39               	movlw	57
 11698  002B20  1864               	xorwf	select_menu@temp,w,c
 11699  002B22  A4D8               	btfss	status,2,c
 11700  002B24  0012               	return	
 11701  002B26  0E00               	movlw	0
 11702  002B28  0101               	movlb	1	; () banked
 11703  002B2A  6F11               	movwf	(_menu+1)& (0+255),b
 11704  002B2C  0E01               	movlw	1
 11705  002B2E  6F10               	movwf	_menu& (0+255),b
 11706                           
 11707                           ; BSR set to: 1
 11708                           ;main.c: 390: }
 11709                           ;main.c: 391: break;
 11710                           
 11711                           ; BSR set to: 1
 11712                           
 11713                           ; BSR set to: 1
 11714                           
 11715                           ; BSR set to: 1
 11716                           
 11717                           ; BSR set to: 1
 11718  002B30  0012               	return	
 11719  002B32                     i2l5446:
 11720                           
 11721                           ;main.c: 393: case 9:
 11722                           ;main.c: 394: case 10:
 11723                           ;main.c: 395: if(temp == '8') {
 11724  002B32  0E38               	movlw	56
 11725  002B34  1864               	xorwf	select_menu@temp,w,c
 11726  002B36  A4D8               	btfss	status,2,c
 11727  002B38  0012               	return	
 11728                           
 11729                           ;main.c: 396: menu = 7;
 11730  002B3A  0E00               	movlw	0
 11731  002B3C  0101               	movlb	1	; () banked
 11732  002B3E  6F11               	movwf	(_menu+1)& (0+255),b
 11733  002B40  0E07               	movlw	7
 11734  002B42  6F10               	movwf	_menu& (0+255),b
 11735                           
 11736                           ;main.c: 397: log = 0;
 11737  002B44  0E00               	movlw	0
 11738  002B46  0101               	movlb	1	; () banked
 11739  002B48  6F0F               	movwf	(_log+1)& (0+255),b
 11740  002B4A  0E00               	movlw	0
 11741  002B4C  6F0E               	movwf	_log& (0+255),b
 11742                           
 11743                           ; BSR set to: 1
 11744                           ;main.c: 398: }
 11745                           ;main.c: 399: break;
 11746  002B4E  0012               	return	
 11747  002B50                     i2l5450:
 11748                           
 11749                           ;main.c: 401: printf("error");
 11750  002B50  0EF9               	movlw	low STR_18
 11751  002B52  6E40               	movwf	i2printf@f,c
 11752  002B54  0EFF               	movlw	high STR_18
 11753  002B56  6E41               	movwf	i2printf@f+1,c
 11754  002B58  EC85  F005         	call	i2_printf	;wreg free
 11755                           
 11756                           ;main.c: 402: }
 11757  002B5C  0012               	return	
 11758  002B5E                     i2l5452:
 11759  002B5E  C110  F062         	movff	_menu,??_select_menu
 11760  002B62  C111  F063         	movff	_menu+1,??_select_menu+1
 11761                           
 11762                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11763                           ; Switch size 1, requested type "space"
 11764                           ; Number of cases is 1, Range of values is 0 to 0
 11765                           ; switch strategies available:
 11766                           ; Name         Instructions Cycles
 11767                           ; simple_byte            4     3 (average)
 11768                           ;	Chosen strategy is simple_byte
 11769  002B66  5063               	movf	??_select_menu+1,w,c
 11770  002B68  0A00               	xorlw	0	; case 0
 11771  002B6A  A4D8               	btfss	status,2,c
 11772  002B6C  D7F1               	goto	i2l5450
 11773                           
 11774                           ; Switch size 1, requested type "space"
 11775                           ; Number of cases is 11, Range of values is 0 to 10
 11776                           ; switch strategies available:
 11777                           ; Name         Instructions Cycles
 11778                           ; simple_byte           34    18 (average)
 11779                           ;	Chosen strategy is simple_byte
 11780  002B6E  5062               	movf	??_select_menu,w,c
 11781  002B70  0A00               	xorlw	0	; case 0
 11782  002B72  B4D8               	btfsc	status,2,c
 11783  002B74  D700               	goto	i2l5366
 11784  002B76  0A01               	xorlw	1	; case 1
 11785  002B78  B4D8               	btfsc	status,2,c
 11786  002B7A  D722               	goto	i2l5378
 11787  002B7C  0A03               	xorlw	3	; case 2
 11788  002B7E  B4D8               	btfsc	status,2,c
 11789  002B80  D733               	goto	i2l5386
 11790  002B82  0A01               	xorlw	1	; case 3
 11791  002B84  B4D8               	btfsc	status,2,c
 11792  002B86  D744               	goto	i2l5394
 11793  002B88  0A07               	xorlw	7	; case 4
 11794  002B8A  B4D8               	btfsc	status,2,c
 11795  002B8C  D755               	goto	i2l5402
 11796  002B8E  0A01               	xorlw	1	; case 5
 11797  002B90  B4D8               	btfsc	status,2,c
 11798  002B92  D766               	goto	i2l5410
 11799  002B94  0A03               	xorlw	3	; case 6
 11800  002B96  B4D8               	btfsc	status,2,c
 11801  002B98  D777               	goto	i2l5418
 11802  002B9A  0A01               	xorlw	1	; case 7
 11803  002B9C  B4D8               	btfsc	status,2,c
 11804  002B9E  D788               	goto	i2l5426
 11805  002BA0  0A0F               	xorlw	15	; case 8
 11806  002BA2  B4D8               	btfsc	status,2,c
 11807  002BA4  D7C6               	goto	i2l5446
 11808  002BA6  0A01               	xorlw	1	; case 9
 11809  002BA8  B4D8               	btfsc	status,2,c
 11810  002BAA  D7C3               	goto	i2l5446
 11811  002BAC  0A03               	xorlw	3	; case 10
 11812  002BAE  B4D8               	btfsc	status,2,c
 11813  002BB0  D7C0               	goto	i2l5446
 11814  002BB2  D7CE               	goto	i2l5450
 11815  002BB4                     __end_of_select_menu:
 11816                           	opt stack 0
 11817                           pclatu	equ	0xFFB
 11818                           pclath	equ	0xFFA
 11819                           tblptru	equ	0xFF8
 11820                           tblptrh	equ	0xFF7
 11821                           tblptrl	equ	0xFF6
 11822                           tablat	equ	0xFF5
 11823                           prodh	equ	0xFF4
 11824                           prodl	equ	0xFF3
 11825                           intcon	equ	0xFF2
 11826                           intcon2	equ	0xFF1
 11827                           intcon3	equ	0xFF0
 11828                           postinc0	equ	0xFEE
 11829                           fsr0h	equ	0xFEA
 11830                           fsr0l	equ	0xFE9
 11831                           wreg	equ	0xFE8
 11832                           fsr1h	equ	0xFE2
 11833                           fsr1l	equ	0xFE1
 11834                           indf2	equ	0xFDF
 11835                           postinc2	equ	0xFDE
 11836                           postdec2	equ	0xFDD
 11837                           fsr2h	equ	0xFDA
 11838                           fsr2l	equ	0xFD9
 11839                           status	equ	0xFD8
 11840                           
 11841 ;; *************** function i2_printf *****************
 11842 ;; Defined at:
 11843 ;;		line 464 in file "/Applications/microchip/xc8/v1.40/sources/common/doprnt.c"
 11844 ;; Parameters:    Size  Location     Type
 11845 ;;  f               2   63[COMRAM] PTR const unsigned char 
 11846 ;;		 -> STR_20(17), STR_19(17), STR_18(6), STR_17(15), 
 11847 ;;		 -> STR_16(12), STR_15(15), STR_14(12), STR_13(15), 
 11848 ;;		 -> STR_12(14), STR_11(15), STR_10(13), STR_9(15), 
 11849 ;;		 -> STR_8(14), STR_7(15), STR_6(10), STR_5(15), 
 11850 ;;		 -> STR_4(17), STR_3(15), STR_2(15), STR_1(17), 
 11851 ;; Auto vars:     Size  Location     Type
 11852 ;;  printf          4   89[COMRAM] unsigned long 
 11853 ;;  printf          4   83[COMRAM] struct .
 11854 ;;  printf          3   93[COMRAM] struct .
 11855 ;;  printf          3    0        PTR const unsigned char 
 11856 ;;  printf          2   87[COMRAM] int 
 11857 ;;  printf          2   81[COMRAM] int 
 11858 ;;  printf          2   79[COMRAM] unsigned short 
 11859 ;;  printf          2   77[COMRAM] int 
 11860 ;;  printf          2   75[COMRAM] PTR void [1]
 11861 ;;		 -> ?i2_printf(2), ?_printf(2), 
 11862 ;;  printf          2    0        unsigned int 
 11863 ;;  printf          1   96[COMRAM] char 
 11864 ;;  printf          1   74[COMRAM] unsigned char 
 11865 ;;  printf          1    0        unsigned char 
 11866 ;; Return value:  Size  Location     Type
 11867 ;;                  2   63[COMRAM] int 
 11868 ;; Registers used:
 11869 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11870 ;; Tracked objects:
 11871 ;;		On entry : 0/0
 11872 ;;		On exit  : 0/0
 11873 ;;		Unchanged: 0/0
 11874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11875 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11876 ;;      Locals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11877 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11878 ;;      Totals:        34       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11879 ;;Total ram usage:       34 bytes
 11880 ;; Hardware stack levels used:    1
 11881 ;; Hardware stack levels required when called:    3
 11882 ;; This function calls:
 11883 ;;		i2___awdiv
 11884 ;;		i2___ftadd
 11885 ;;		i2___ftge
 11886 ;;		i2___ftmul
 11887 ;;		i2___ftneg
 11888 ;;		i2___ftsub
 11889 ;;		i2___fttol
 11890 ;;		i2___lldiv
 11891 ;;		i2___llmod
 11892 ;;		i2___lltoft
 11893 ;;		i2___wmul
 11894 ;;		i2__div_to_l_
 11895 ;;		i2__tdiv_to_l_
 11896 ;;		i2_fround
 11897 ;;		i2_isdigit
 11898 ;;		i2_putch
 11899 ;;		i2_scale
 11900 ;; This function is called by:
 11901 ;;		_select_menu
 11902 ;; This function uses a non-reentrant model
 11903 ;;
 11904                           
 11905                           	psect	text47
 11906  000B0A                     __ptext47:
 11907                           	opt stack 0
 11908  000B0A                     i2_printf:
 11909                           	opt stack 20
 11910                           
 11911                           ;doprnt.c: 466: va_list ap;
 11912                           ;doprnt.c: 499: signed char c;
 11913                           ;doprnt.c: 501: int width;
 11914                           ;doprnt.c: 504: int prec;
 11915                           ;doprnt.c: 508: unsigned short flag;
 11916                           ;doprnt.c: 515: char d;
 11917                           ;doprnt.c: 516: double fval;
 11918                           ;doprnt.c: 517: int exp;
 11919                           ;doprnt.c: 523: union {
 11920                           ;doprnt.c: 524: unsigned long vd;
 11921                           ;doprnt.c: 525: double integ;
 11922                           ;doprnt.c: 526: } tmpval;
 11923                           ;doprnt.c: 528: unsigned long val;
 11924                           ;doprnt.c: 529: unsigned len;
 11925                           ;doprnt.c: 530: const char * cp;
 11926                           ;doprnt.c: 533: *ap = __va_start();
 11927                           
 11928                           ;incstack = 0
 11929  000B0A  0E42               	movlw	low (?i2_printf+2)
 11930  000B0C  6E4C               	movwf	i2printf@ap,c
 11931  000B0E  0E00               	movlw	high (?i2_printf+2)
 11932  000B10  6E4D               	movwf	i2printf@ap+1,c
 11933                           
 11934                           ;doprnt.c: 536: while(c = *f++) {
 11935  000B12  EF0B  F00A         	goto	i2l5240
 11936  000B16                     i2l4984:
 11937                           
 11938                           ;doprnt.c: 538: if(c != '%')
 11939  000B16  0E25               	movlw	37
 11940  000B18  1861               	xorwf	i2printf@c,w,c
 11941  000B1A  B4D8               	btfsc	status,2,c
 11942  000B1C  D005               	goto	i2l4988
 11943                           
 11944                           ;doprnt.c: 540: {
 11945                           ;doprnt.c: 541: (putch(c) );
 11946  000B1E  5061               	movf	i2printf@c,w,c
 11947  000B20  EC33  F025         	call	i2_putch
 11948                           
 11949                           ;doprnt.c: 542: continue;
 11950  000B24  EF0B  F00A         	goto	i2l5240
 11951  000B28                     i2l4988:
 11952                           
 11953                           ;doprnt.c: 543: }
 11954                           ;doprnt.c: 546: width = 0;
 11955  000B28  0E00               	movlw	0
 11956  000B2A  6E4F               	movwf	i2printf@width+1,c
 11957  000B2C  0E00               	movlw	0
 11958  000B2E  6E4E               	movwf	i2printf@width,c
 11959                           
 11960                           ;doprnt.c: 548: flag = 0;
 11961  000B30  0E00               	movlw	0
 11962  000B32  6E51               	movwf	i2printf@flag+1,c
 11963  000B34  0E00               	movlw	0
 11964  000B36  6E50               	movwf	i2printf@flag,c
 11965                           
 11966                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 11967  000B38  C040  FFF6         	movff	i2printf@f,tblptrl
 11968  000B3C  C041  FFF7         	movff	i2printf@f+1,tblptrh
 11969  000B40                     	if	0	;tblptru may be non-zero
 11970  000B40                     	endif
 11971  000B40                     	if	0	;tblptru may be non-zero
 11972  000B40                     	endif
 11973  000B40  0008               	tblrd		*
 11974  000B42  50F5               	movf	tablat,w,c
 11975  000B44  ECDF  F024         	call	i2_isdigit
 11976  000B48  A0D8               	btfss	status,0,c
 11977  000B4A  D037               	goto	i2l5008
 11978                           
 11979                           ;doprnt.c: 598: width = 0;
 11980  000B4C  0E00               	movlw	0
 11981  000B4E  6E4F               	movwf	i2printf@width+1,c
 11982  000B50  0E00               	movlw	0
 11983  000B52  6E4E               	movwf	i2printf@width,c
 11984  000B54                     i2l4994:
 11985                           
 11986                           ;doprnt.c: 600: width *= 10;
 11987  000B54  C04E  F00F         	movff	i2printf@width,i2___wmul@multiplier
 11988  000B58  C04F  F010         	movff	i2printf@width+1,i2___wmul@multiplier+1
 11989  000B5C  0E00               	movlw	0
 11990  000B5E  6E12               	movwf	i2___wmul@multiplicand+1,c
 11991  000B60  0E0A               	movlw	10
 11992  000B62  6E11               	movwf	i2___wmul@multiplicand,c
 11993  000B64  ECBA  F024         	call	i2___wmul	;wreg free
 11994  000B68  C00F  F04E         	movff	?i2___wmul,i2printf@width
 11995  000B6C  C010  F04F         	movff	?i2___wmul+1,i2printf@width+1
 11996                           
 11997                           ;doprnt.c: 601: width += *f++ - '0';
 11998  000B70  0ED0               	movlw	208
 11999  000B72  6E42               	movwf	??i2_printf& (0+255),c
 12000  000B74  0EFF               	movlw	255
 12001  000B76  6E43               	movwf	(??i2_printf+1)& (0+255),c
 12002  000B78  C040  FFF6         	movff	i2printf@f,tblptrl
 12003  000B7C  C041  FFF7         	movff	i2printf@f+1,tblptrh
 12004  000B80                     	if	0	;tblptru may be non-zero
 12005  000B80                     	endif
 12006  000B80                     	if	0	;tblptru may be non-zero
 12007  000B80                     	endif
 12008  000B80  0008               	tblrd		*
 12009  000B82  50F5               	movf	tablat,w,c
 12010  000B84  6E44               	movwf	(??i2_printf+2)& (0+255),c
 12011  000B86  6A45               	clrf	(??i2_printf+3)& (0+255),c
 12012  000B88  5042               	movf	??i2_printf,w,c
 12013  000B8A  2644               	addwf	??i2_printf+2,f,c
 12014  000B8C  5043               	movf	??i2_printf+1,w,c
 12015  000B8E  2245               	addwfc	??i2_printf+3,f,c
 12016  000B90  5044               	movf	??i2_printf+2,w,c
 12017  000B92  264E               	addwf	i2printf@width,f,c
 12018  000B94  5045               	movf	??i2_printf+3,w,c
 12019  000B96  224F               	addwfc	i2printf@width+1,f,c
 12020  000B98  4A40               	infsnz	i2printf@f,f,c
 12021  000B9A  2A41               	incf	i2printf@f+1,f,c
 12022                           
 12023                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 12024  000B9C  C040  FFF6         	movff	i2printf@f,tblptrl
 12025  000BA0  C041  FFF7         	movff	i2printf@f+1,tblptrh
 12026  000BA4                     	if	0	;tblptru may be non-zero
 12027  000BA4                     	endif
 12028  000BA4                     	if	0	;tblptru may be non-zero
 12029  000BA4                     	endif
 12030  000BA4  0008               	tblrd		*
 12031  000BA6  50F5               	movf	tablat,w,c
 12032  000BA8  ECDF  F024         	call	i2_isdigit
 12033  000BAC  A0D8               	btfss	status,0,c
 12034  000BAE  D005               	goto	i2l5008
 12035  000BB0  D7D1               	goto	i2l4994
 12036  000BB2                     i2l5002:
 12037                           
 12038                           ;doprnt.c: 663: flag |= 0x400;
 12039  000BB2  8451               	bsf	i2printf@flag+1,2,c
 12040                           
 12041                           ;doprnt.c: 698: case 'i':
 12042                           ;doprnt.c: 699: break;
 12043                           
 12044                           ;doprnt.c: 697: case 'd':
 12045                           
 12046                           ;doprnt.c: 664: break;
 12047  000BB4  D01D               	goto	i2l5010
 12048  000BB6                     i2l5004:
 12049                           
 12050                           ;doprnt.c: 721: flag |= 0x80;
 12051  000BB6  8E50               	bsf	i2printf@flag,7,c
 12052                           
 12053                           ;doprnt.c: 723: break;
 12054  000BB8  D01B               	goto	i2l5010
 12055  000BBA                     i2l5008:
 12056  000BBA  C040  FFF6         	movff	i2printf@f,tblptrl
 12057  000BBE  C041  FFF7         	movff	i2printf@f+1,tblptrh
 12058  000BC2  4A40               	infsnz	i2printf@f,f,c
 12059  000BC4  2A41               	incf	i2printf@f+1,f,c
 12060  000BC6                     	if	0	;tblptru may be non-zero
 12061  000BC6                     	endif
 12062  000BC6                     	if	0	;tblptru may be non-zero
 12063  000BC6                     	endif
 12064  000BC6  0008               	tblrd		*
 12065  000BC8  CFF5 F061          	movff	tablat,i2printf@c
 12066  000BCC  5061               	movf	i2printf@c,w,c
 12067                           
 12068                           ; Switch size 1, requested type "space"
 12069                           ; Number of cases is 5, Range of values is 0 to 120
 12070                           ; switch strategies available:
 12071                           ; Name         Instructions Cycles
 12072                           ; simple_byte           16     9 (average)
 12073                           ;	Chosen strategy is simple_byte
 12074  000BCE  0A00               	xorlw	0	; case 0
 12075  000BD0  B4D8               	btfsc	status,2,c
 12076  000BD2  0012               	return	
 12077  000BD4  0A64               	xorlw	100	; case 100
 12078  000BD6  B4D8               	btfsc	status,2,c
 12079  000BD8  D00B               	goto	i2l5010
 12080  000BDA  0A02               	xorlw	2	; case 102
 12081  000BDC  B4D8               	btfsc	status,2,c
 12082  000BDE  D7E9               	goto	i2l5002
 12083  000BE0  0A0F               	xorlw	15	; case 105
 12084  000BE2  B4D8               	btfsc	status,2,c
 12085  000BE4  D005               	goto	i2l5010
 12086  000BE6  0A11               	xorlw	17	; case 120
 12087  000BE8  B4D8               	btfsc	status,2,c
 12088  000BEA  D7E5               	goto	i2l5004
 12089  000BEC  EF0B  F00A         	goto	i2l5240
 12090  000BF0                     i2l5010:
 12091                           
 12092                           ;doprnt.c: 825: if(flag & (0x700)) {
 12093  000BF0  0E07               	movlw	7
 12094  000BF2  1451               	andwf	i2printf@flag+1,w,c
 12095  000BF4  B4D8               	btfsc	status,2,c
 12096  000BF6  D2CC               	goto	i2l453
 12097                           
 12098                           ;doprnt.c: 829: prec = 6;
 12099  000BF8  0E00               	movlw	0
 12100  000BFA  6E53               	movwf	i2printf@prec+1,c
 12101  000BFC  0E06               	movlw	6
 12102  000BFE  6E52               	movwf	i2printf@prec,c
 12103                           
 12104                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
 12105  000C00  C04C  FFD9         	movff	i2printf@ap,fsr2l
 12106  000C04  C04D  FFDA         	movff	i2printf@ap+1,fsr2h
 12107  000C08  CFDE F05E          	movff	postinc2,i2printf@fval
 12108  000C0C  CFDE F05F          	movff	postinc2,i2printf@fval+1
 12109  000C10  CFDD F060          	movff	postdec2,i2printf@fval+2
 12110  000C14  0E03               	movlw	3
 12111  000C16  264C               	addwf	i2printf@ap,f,c
 12112  000C18  0E00               	movlw	0
 12113  000C1A  224D               	addwfc	i2printf@ap+1,f,c
 12114                           
 12115                           ;doprnt.c: 831: if(fval < 0.0) {
 12116  000C1C  AE60               	btfss	i2printf@fval+2,7,c
 12117  000C1E  D010               	goto	i2l5024
 12118                           
 12119                           ;doprnt.c: 832: fval = -fval;
 12120  000C20  C05E  F001         	movff	i2printf@fval,i2___ftneg@f1
 12121  000C24  C05F  F002         	movff	i2printf@fval+1,i2___ftneg@f1+1
 12122  000C28  C060  F003         	movff	i2printf@fval+2,i2___ftneg@f1+2
 12123  000C2C  ECCD  F024         	call	i2___ftneg	;wreg free
 12124  000C30  C001  F05E         	movff	?i2___ftneg,i2printf@fval
 12125  000C34  C002  F05F         	movff	?i2___ftneg+1,i2printf@fval+1
 12126  000C38  C003  F060         	movff	?i2___ftneg+2,i2printf@fval+2
 12127                           
 12128                           ;doprnt.c: 833: flag |= 0x03;
 12129  000C3C  0E03               	movlw	3
 12130  000C3E  1250               	iorwf	i2printf@flag,f,c
 12131  000C40                     i2l5024:
 12132                           
 12133                           ;doprnt.c: 834: }
 12134                           ;doprnt.c: 835: exp = 0;
 12135  000C40  0E00               	movlw	0
 12136  000C42  6E59               	movwf	i2printf@exp+1,c
 12137  000C44  0E00               	movlw	0
 12138  000C46  6E58               	movwf	i2printf@exp,c
 12139                           
 12140                           ;doprnt.c: 836: if( fval!=0) {
 12141  000C48  505E               	movf	i2printf@fval,w,c
 12142  000C4A  105F               	iorwf	i2printf@fval+1,w,c
 12143  000C4C  1060               	iorwf	i2printf@fval+2,w,c
 12144  000C4E  B4D8               	btfsc	status,2,c
 12145  000C50  D083               	goto	i2l5052
 12146                           
 12147                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
 12148  000C52  0E82               	movlw	130
 12149  000C54  6E42               	movwf	??i2_printf& (0+255),c
 12150  000C56  0EFF               	movlw	255
 12151  000C58  6E43               	movwf	(??i2_printf+1)& (0+255),c
 12152  000C5A  C05E  F044         	movff	i2printf@fval,??i2_printf+2
 12153  000C5E  C05F  F045         	movff	i2printf@fval+1,??i2_printf+3
 12154  000C62  C060  F046         	movff	i2printf@fval+2,??i2_printf+4
 12155  000C66  C061  F047         	movff	i2printf@fval+3,??i2_printf+5
 12156  000C6A  0E10               	movlw	16
 12157  000C6C  D005               	goto	i2u589_40
 12158  000C6E                     i2u589_45:
 12159  000C6E  90D8               	bcf	status,0,c
 12160  000C70  3247               	rrcf	??i2_printf+5,f,c
 12161  000C72  3246               	rrcf	??i2_printf+4,f,c
 12162  000C74  3245               	rrcf	??i2_printf+3,f,c
 12163  000C76  3244               	rrcf	??i2_printf+2,f,c
 12164  000C78                     i2u589_40:
 12165  000C78  2EE8               	decfsz	wreg,f,c
 12166  000C7A  D7F9               	goto	i2u589_45
 12167  000C7C  5044               	movf	??i2_printf+2,w,c
 12168  000C7E  2442               	addwf	??i2_printf,w,c
 12169  000C80  6E58               	movwf	i2printf@exp,c
 12170  000C82  0E00               	movlw	0
 12171  000C84  2043               	addwfc	??i2_printf+1,w,c
 12172  000C86  6E59               	movwf	i2printf@exp+1,c
 12173                           
 12174                           ;doprnt.c: 838: exp--;
 12175  000C88  0658               	decf	i2printf@exp,f,c
 12176  000C8A  A0D8               	btfss	status,0,c
 12177  000C8C  0659               	decf	i2printf@exp+1,f,c
 12178                           
 12179                           ;doprnt.c: 839: exp *= 3;
 12180  000C8E  C058  F00F         	movff	i2printf@exp,i2___wmul@multiplier
 12181  000C92  C059  F010         	movff	i2printf@exp+1,i2___wmul@multiplier+1
 12182  000C96  0E00               	movlw	0
 12183  000C98  6E12               	movwf	i2___wmul@multiplicand+1,c
 12184  000C9A  0E03               	movlw	3
 12185  000C9C  6E11               	movwf	i2___wmul@multiplicand,c
 12186  000C9E  ECBA  F024         	call	i2___wmul	;wreg free
 12187  000CA2  C00F  F058         	movff	?i2___wmul,i2printf@exp
 12188  000CA6  C010  F059         	movff	?i2___wmul+1,i2printf@exp+1
 12189                           
 12190                           ;doprnt.c: 840: exp /= 10;
 12191  000CAA  C058  F007         	movff	i2printf@exp,i2___awdiv@dividend
 12192  000CAE  C059  F008         	movff	i2printf@exp+1,i2___awdiv@dividend+1
 12193  000CB2  0E00               	movlw	0
 12194  000CB4  6E0A               	movwf	i2___awdiv@divisor+1,c
 12195  000CB6  0E0A               	movlw	10
 12196  000CB8  6E09               	movwf	i2___awdiv@divisor,c
 12197  000CBA  EC3A  F021         	call	i2___awdiv	;wreg free
 12198  000CBE  C007  F058         	movff	?i2___awdiv,i2printf@exp
 12199  000CC2  C008  F059         	movff	?i2___awdiv+1,i2printf@exp+1
 12200                           
 12201                           ;doprnt.c: 841: if(exp < 0)
 12202  000CC6  AE59               	btfss	i2printf@exp+1,7,c
 12203  000CC8  D003               	goto	i2l5040
 12204                           
 12205                           ;doprnt.c: 842: exp--;
 12206  000CCA  0658               	decf	i2printf@exp,f,c
 12207  000CCC  A0D8               	btfss	status,0,c
 12208  000CCE  0659               	decf	i2printf@exp+1,f,c
 12209  000CD0                     i2l5040:
 12210                           
 12211                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
 12212  000CD0  5058               	movf	i2printf@exp,w,c
 12213  000CD2  0800               	sublw	0
 12214  000CD4  EC14  F00F         	call	i2_scale
 12215  000CD8  C024  F054         	movff	?i2_scale,i2printf@tmpval
 12216  000CDC  C025  F055         	movff	?i2_scale+1,i2printf@tmpval+1
 12217  000CE0  C026  F056         	movff	?i2_scale+2,i2printf@tmpval+2
 12218                           
 12219                           ;doprnt.c: 847: tmpval.integ *= fval;
 12220  000CE4  C054  F015         	movff	i2printf@tmpval,i2___ftmul@f1
 12221  000CE8  C055  F016         	movff	i2printf@tmpval+1,i2___ftmul@f1+1
 12222  000CEC  C056  F017         	movff	i2printf@tmpval+2,i2___ftmul@f1+2
 12223  000CF0  C05E  F018         	movff	i2printf@fval,i2___ftmul@f2
 12224  000CF4  C05F  F019         	movff	i2printf@fval+1,i2___ftmul@f2+1
 12225  000CF8  C060  F01A         	movff	i2printf@fval+2,i2___ftmul@f2+2
 12226  000CFC  EC85  F01C         	call	i2___ftmul	;wreg free
 12227  000D00  C015  F054         	movff	?i2___ftmul,i2printf@tmpval
 12228  000D04  C016  F055         	movff	?i2___ftmul+1,i2printf@tmpval+1
 12229  000D08  C017  F056         	movff	?i2___ftmul+2,i2printf@tmpval+2
 12230                           
 12231                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
 12232  000D0C  C054  F001         	movff	i2printf@tmpval,i2___ftge@ff1
 12233  000D10  C055  F002         	movff	i2printf@tmpval+1,i2___ftge@ff1+1
 12234  000D14  C056  F003         	movff	i2printf@tmpval+2,i2___ftge@ff1+2
 12235  000D18  0E00               	movlw	0
 12236  000D1A  6E04               	movwf	i2___ftge@ff2,c
 12237  000D1C  0E80               	movlw	128
 12238  000D1E  6E05               	movwf	i2___ftge@ff2+1,c
 12239  000D20  0E3F               	movlw	63
 12240  000D22  6E06               	movwf	i2___ftge@ff2+2,c
 12241  000D24  ECF2  F020         	call	i2___ftge	;wreg free
 12242  000D28  B0D8               	btfsc	status,0,c
 12243  000D2A  D004               	goto	i2l5048
 12244                           
 12245                           ;doprnt.c: 849: exp--;
 12246  000D2C  0658               	decf	i2printf@exp,f,c
 12247  000D2E  A0D8               	btfss	status,0,c
 12248  000D30  0659               	decf	i2printf@exp+1,f,c
 12249  000D32  D012               	goto	i2l5052
 12250  000D34                     i2l5048:
 12251                           
 12252                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
 12253  000D34  C054  F001         	movff	i2printf@tmpval,i2___ftge@ff1
 12254  000D38  C055  F002         	movff	i2printf@tmpval+1,i2___ftge@ff1+1
 12255  000D3C  C056  F003         	movff	i2printf@tmpval+2,i2___ftge@ff1+2
 12256  000D40  0E00               	movlw	0
 12257  000D42  6E04               	movwf	i2___ftge@ff2,c
 12258  000D44  0E20               	movlw	32
 12259  000D46  6E05               	movwf	i2___ftge@ff2+1,c
 12260  000D48  0E41               	movlw	65
 12261  000D4A  6E06               	movwf	i2___ftge@ff2+2,c
 12262  000D4C  ECF2  F020         	call	i2___ftge	;wreg free
 12263  000D50  A0D8               	btfss	status,0,c
 12264  000D52  D002               	goto	i2l5052
 12265                           
 12266                           ;doprnt.c: 851: exp++;
 12267  000D54  4A58               	infsnz	i2printf@exp,f,c
 12268  000D56  2A59               	incf	i2printf@exp+1,f,c
 12269  000D58                     i2l5052:
 12270                           
 12271                           ;doprnt.c: 852: }
 12272                           ;doprnt.c: 1112: if(prec <= 12)
 12273  000D58  BE53               	btfsc	i2printf@prec+1,7,c
 12274  000D5A  D006               	goto	i2l5054
 12275  000D5C  5053               	movf	i2printf@prec+1,w,c
 12276  000D5E  E11B               	bnz	i2l5056
 12277  000D60  0E0D               	movlw	13
 12278  000D62  5C52               	subwf	i2printf@prec,w,c
 12279  000D64  B0D8               	btfsc	status,0,c
 12280  000D66  D017               	goto	i2l5056
 12281  000D68                     i2l5054:
 12282                           
 12283                           ;doprnt.c: 1113: fval += fround(prec);
 12284  000D68  C05E  F02E         	movff	i2printf@fval,i2___ftadd@f1
 12285  000D6C  C05F  F02F         	movff	i2printf@fval+1,i2___ftadd@f1+1
 12286  000D70  C060  F030         	movff	i2printf@fval+2,i2___ftadd@f1+2
 12287  000D74  5052               	movf	i2printf@prec,w,c
 12288  000D76  EC96  F013         	call	i2_fround
 12289  000D7A  C024  F031         	movff	?i2_fround,i2___ftadd@f2
 12290  000D7E  C025  F032         	movff	?i2_fround+1,i2___ftadd@f2+1
 12291  000D82  C026  F033         	movff	?i2_fround+2,i2___ftadd@f2+2
 12292  000D86  ECDA  F015         	call	i2___ftadd	;wreg free
 12293  000D8A  C02E  F05E         	movff	?i2___ftadd,i2printf@fval
 12294  000D8E  C02F  F05F         	movff	?i2___ftadd+1,i2printf@fval+1
 12295  000D92  C030  F060         	movff	?i2___ftadd+2,i2printf@fval+2
 12296  000D96                     i2l5056:
 12297                           
 12298                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
 12299  000D96  BE59               	btfsc	i2printf@exp+1,7,c
 12300  000D98  D006               	goto	i2l5058
 12301  000D9A  5059               	movf	i2printf@exp+1,w,c
 12302  000D9C  E11E               	bnz	i2l5064
 12303  000D9E  0E0A               	movlw	10
 12304  000DA0  5C58               	subwf	i2printf@exp,w,c
 12305  000DA2  B0D8               	btfsc	status,0,c
 12306  000DA4  D01A               	goto	i2l5064
 12307  000DA6                     i2l5058:
 12308  000DA6  505E               	movf	i2printf@fval,w,c
 12309  000DA8  105F               	iorwf	i2printf@fval+1,w,c
 12310  000DAA  1060               	iorwf	i2printf@fval+2,w,c
 12311  000DAC  B4D8               	btfsc	status,2,c
 12312  000DAE  D051               	goto	i2l5078
 12313  000DB0  C05E  F02B         	movff	i2printf@fval,i2___fttol@f1
 12314  000DB4  C05F  F02C         	movff	i2printf@fval+1,i2___fttol@f1+1
 12315  000DB8  C060  F02D         	movff	i2printf@fval+2,i2___fttol@f1+2
 12316  000DBC  ECFF  F01C         	call	i2___fttol	;wreg free
 12317  000DC0  502B               	movf	?i2___fttol,w,c
 12318  000DC2  102C               	iorwf	?i2___fttol+1,w,c
 12319  000DC4  102D               	iorwf	?i2___fttol+2,w,c
 12320  000DC6  102E               	iorwf	?i2___fttol+3,w,c
 12321  000DC8  B4D8               	btfsc	status,2,c
 12322  000DCA  BE59               	btfsc	i2printf@exp+1,7,c
 12323  000DCC  D042               	goto	i2l5078
 12324  000DCE  5059               	movf	i2printf@exp+1,w,c
 12325  000DD0  E104               	bnz	i2l5064
 12326  000DD2  0E02               	movlw	2
 12327  000DD4  5C58               	subwf	i2printf@exp,w,c
 12328  000DD6  A0D8               	btfss	status,0,c
 12329  000DD8  D03C               	goto	i2l5078
 12330  000DDA                     i2l5064:
 12331                           
 12332                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
 12333  000DDA  C054  F001         	movff	i2printf@tmpval,i2___ftge@ff1
 12334  000DDE  C055  F002         	movff	i2printf@tmpval+1,i2___ftge@ff1+1
 12335  000DE2  C056  F003         	movff	i2printf@tmpval+2,i2___ftge@ff1+2
 12336  000DE6  0E70               	movlw	112
 12337  000DE8  6E04               	movwf	i2___ftge@ff2,c
 12338  000DEA  0E89               	movlw	137
 12339  000DEC  6E05               	movwf	i2___ftge@ff2+1,c
 12340  000DEE  0E40               	movlw	64
 12341  000DF0  6E06               	movwf	i2___ftge@ff2+2,c
 12342  000DF2  ECF2  F020         	call	i2___ftge	;wreg free
 12343  000DF6  B0D8               	btfsc	status,0,c
 12344  000DF8  D002               	goto	i2l5068
 12345                           
 12346                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
 12347  000DFA  0EF7               	movlw	247
 12348  000DFC  D001               	goto	L5
 12349  000DFE                     i2l5068:
 12350                           
 12351                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
 12352  000DFE  0EF8               	movlw	248
 12353  000E00                     L5:
 12354  000E00  2658               	addwf	i2printf@exp,f,c
 12355  000E02  0EFF               	movlw	255
 12356  000E04  2259               	addwfc	i2printf@exp+1,f,c
 12357                           
 12358                           ;doprnt.c: 1124: }
 12359                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
 12360  000E06  5058               	movf	i2printf@exp,w,c
 12361  000E08  EC14  F00F         	call	i2_scale
 12362  000E0C  C024  F054         	movff	?i2_scale,i2printf@tmpval
 12363  000E10  C025  F055         	movff	?i2_scale+1,i2printf@tmpval+1
 12364  000E14  C026  F056         	movff	?i2_scale+2,i2printf@tmpval+2
 12365                           
 12366                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
 12367  000E18  C05E  F001         	movff	i2printf@fval,i2__tdiv_to_l_@f1
 12368  000E1C  C05F  F002         	movff	i2printf@fval+1,i2__tdiv_to_l_@f1+1
 12369  000E20  C060  F003         	movff	i2printf@fval+2,i2__tdiv_to_l_@f1+2
 12370  000E24  C054  F004         	movff	i2printf@tmpval,i2__tdiv_to_l_@f2
 12371  000E28  C055  F005         	movff	i2printf@tmpval+1,i2__tdiv_to_l_@f2+1
 12372  000E2C  C056  F006         	movff	i2printf@tmpval+2,i2__tdiv_to_l_@f2+2
 12373  000E30  EC3A  F01A         	call	i2__tdiv_to_l_	;wreg free
 12374  000E34  C001  F05A         	movff	?i2__tdiv_to_l_,i2printf@val
 12375  000E38  C002  F05B         	movff	?i2__tdiv_to_l_+1,i2printf@val+1
 12376  000E3C  C003  F05C         	movff	?i2__tdiv_to_l_+2,i2printf@val+2
 12377  000E40  C004  F05D         	movff	?i2__tdiv_to_l_+3,i2printf@val+3
 12378                           
 12379                           ;doprnt.c: 1129: fval = 0.0;
 12380  000E44  0E00               	movlw	0
 12381  000E46  6E5E               	movwf	i2printf@fval,c
 12382  000E48  0E00               	movlw	0
 12383  000E4A  6E5F               	movwf	i2printf@fval+1,c
 12384  000E4C  0E00               	movlw	0
 12385  000E4E  6E60               	movwf	i2printf@fval+2,c
 12386                           
 12387                           ;doprnt.c: 1130: } else {
 12388  000E50  D032               	goto	i2l5082
 12389  000E52                     i2l5078:
 12390                           
 12391                           ;doprnt.c: 1131: val = (unsigned long)fval;
 12392  000E52  C05E  F02B         	movff	i2printf@fval,i2___fttol@f1
 12393  000E56  C05F  F02C         	movff	i2printf@fval+1,i2___fttol@f1+1
 12394  000E5A  C060  F02D         	movff	i2printf@fval+2,i2___fttol@f1+2
 12395  000E5E  ECFF  F01C         	call	i2___fttol	;wreg free
 12396  000E62  C02B  F05A         	movff	?i2___fttol,i2printf@val
 12397  000E66  C02C  F05B         	movff	?i2___fttol+1,i2printf@val+1
 12398  000E6A  C02D  F05C         	movff	?i2___fttol+2,i2printf@val+2
 12399  000E6E  C02E  F05D         	movff	?i2___fttol+3,i2printf@val+3
 12400                           
 12401                           ;doprnt.c: 1132: fval -= (double)val;
 12402  000E72  C05E  F03A         	movff	i2printf@fval,i2___ftsub@f1
 12403  000E76  C05F  F03B         	movff	i2printf@fval+1,i2___ftsub@f1+1
 12404  000E7A  C060  F03C         	movff	i2printf@fval+2,i2___ftsub@f1+2
 12405  000E7E  C05A  F009         	movff	i2printf@val,i2___lltoft@c
 12406  000E82  C05B  F00A         	movff	i2printf@val+1,i2___lltoft@c+1
 12407  000E86  C05C  F00B         	movff	i2printf@val+2,i2___lltoft@c+2
 12408  000E8A  C05D  F00C         	movff	i2printf@val+3,i2___lltoft@c+3
 12409  000E8E  ECF8  F022         	call	i2___lltoft	;wreg free
 12410  000E92  C009  F03D         	movff	?i2___lltoft,i2___ftsub@f2
 12411  000E96  C00A  F03E         	movff	?i2___lltoft+1,i2___ftsub@f2+1
 12412  000E9A  C00B  F03F         	movff	?i2___lltoft+2,i2___ftsub@f2+2
 12413  000E9E  ECE4  F023         	call	i2___ftsub	;wreg free
 12414  000EA2  C03A  F05E         	movff	?i2___ftsub,i2printf@fval
 12415  000EA6  C03B  F05F         	movff	?i2___ftsub+1,i2printf@fval+1
 12416  000EAA  C03C  F060         	movff	?i2___ftsub+2,i2printf@fval+2
 12417                           
 12418                           ;doprnt.c: 1133: exp = 0;
 12419  000EAE  0E00               	movlw	0
 12420  000EB0  6E59               	movwf	i2printf@exp+1,c
 12421  000EB2  0E00               	movlw	0
 12422  000EB4  6E58               	movwf	i2printf@exp,c
 12423  000EB6                     i2l5082:
 12424                           
 12425                           ;doprnt.c: 1134: }
 12426                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
 12427  000EB6  0E01               	movlw	1
 12428  000EB8  6E61               	movwf	i2printf@c,c
 12429  000EBA                     i2l5084:
 12430  000EBA  0E0A               	movlw	10
 12431  000EBC  1861               	xorwf	i2printf@c,w,c
 12432  000EBE  B4D8               	btfsc	status,2,c
 12433  000EC0  D018               	goto	i2l5096
 12434                           
 12435                           ;doprnt.c: 1137: if(val < dpowers[c])
 12436  000EC2  5061               	movf	i2printf@c,w,c
 12437  000EC4  0D04               	mullw	4
 12438  000EC6  0E8D               	movlw	low _dpowers
 12439  000EC8  24F3               	addwf	prodl,w,c
 12440  000ECA  6EF6               	movwf	tblptrl,c
 12441  000ECC  0EFE               	movlw	high _dpowers
 12442  000ECE  20F4               	addwfc	prodh,w,c
 12443  000ED0  6EF7               	movwf	tblptrh,c
 12444  000ED2                     	if	0	;There are less than 3 active tblptr bytes
 12445  000ED2                     	endif
 12446  000ED2  0009               	tblrd		*+
 12447  000ED4  50F5               	movf	tablat,w,c
 12448  000ED6  5C5A               	subwf	i2printf@val,w,c
 12449  000ED8  0009               	tblrd		*+
 12450  000EDA  50F5               	movf	tablat,w,c
 12451  000EDC  585B               	subwfb	i2printf@val+1,w,c
 12452  000EDE  0009               	tblrd		*+
 12453  000EE0  50F5               	movf	tablat,w,c
 12454  000EE2  585C               	subwfb	i2printf@val+2,w,c
 12455  000EE4  0009               	tblrd		*+
 12456  000EE6  50F5               	movf	tablat,w,c
 12457  000EE8  585D               	subwfb	i2printf@val+3,w,c
 12458  000EEA  A0D8               	btfss	status,0,c
 12459  000EEC  D002               	goto	i2l5096
 12460                           
 12461                           ;doprnt.c: 1138: break;
 12462  000EEE  2A61               	incf	i2printf@c,f,c
 12463  000EF0  D7E4               	goto	i2l5084
 12464  000EF2                     i2l5096:
 12465                           
 12466                           ;doprnt.c: 1142: width -= prec + c + exp;
 12467  000EF2  C061  F042         	movff	i2printf@c,??i2_printf
 12468  000EF6  6A43               	clrf	(??i2_printf+1)& (0+255),c
 12469  000EF8  BE42               	btfsc	??i2_printf& (0+255),7,c
 12470  000EFA  0643               	decf	(??i2_printf+1)& (0+255),f,c
 12471  000EFC  5052               	movf	i2printf@prec,w,c
 12472  000EFE  2642               	addwf	??i2_printf,f,c
 12473  000F00  5053               	movf	i2printf@prec+1,w,c
 12474  000F02  2243               	addwfc	??i2_printf+1,f,c
 12475  000F04  5058               	movf	i2printf@exp,w,c
 12476  000F06  2642               	addwf	??i2_printf,f,c
 12477  000F08  5059               	movf	i2printf@exp+1,w,c
 12478  000F0A  2243               	addwfc	??i2_printf+1,f,c
 12479  000F0C  5042               	movf	??i2_printf,w,c
 12480  000F0E  5E4E               	subwf	i2printf@width,f,c
 12481  000F10  5043               	movf	??i2_printf+1,w,c
 12482  000F12  5A4F               	subwfb	i2printf@width+1,f,c
 12483                           
 12484                           ;doprnt.c: 1143: if(
 12485                           ;doprnt.c: 1147: prec)
 12486  000F14  5052               	movf	i2printf@prec,w,c
 12487  000F16  1053               	iorwf	i2printf@prec+1,w,c
 12488  000F18  B4D8               	btfsc	status,2,c
 12489  000F1A  D003               	goto	i2l5100
 12490                           
 12491                           ;doprnt.c: 1148: width--;
 12492  000F1C  064E               	decf	i2printf@width,f,c
 12493  000F1E  A0D8               	btfss	status,0,c
 12494  000F20  064F               	decf	i2printf@width+1,f,c
 12495  000F22                     i2l5100:
 12496                           
 12497                           ;doprnt.c: 1149: if(flag & 0x03)
 12498  000F22  0E03               	movlw	3
 12499  000F24  1450               	andwf	i2printf@flag,w,c
 12500  000F26  6E42               	movwf	??i2_printf& (0+255),c
 12501  000F28  0E00               	movlw	0
 12502  000F2A  1451               	andwf	i2printf@flag+1,w,c
 12503  000F2C  6E43               	movwf	(??i2_printf+1)& (0+255),c
 12504  000F2E  5042               	movf	??i2_printf,w,c
 12505  000F30  1043               	iorwf	??i2_printf+1,w,c
 12506  000F32  B4D8               	btfsc	status,2,c
 12507  000F34  D007               	goto	i2l5108
 12508  000F36  D003               	goto	i2l5106
 12509  000F38                     i2l5104:
 12510                           
 12511                           ;doprnt.c: 1181: (putch(' ') );
 12512  000F38  0E20               	movlw	32
 12513  000F3A  EC33  F025         	call	i2_putch
 12514  000F3E                     i2l5106:
 12515                           
 12516                           ;doprnt.c: 1182: width--;
 12517  000F3E  064E               	decf	i2printf@width,f,c
 12518  000F40  A0D8               	btfss	status,0,c
 12519  000F42  064F               	decf	i2printf@width+1,f,c
 12520  000F44                     i2l5108:
 12521  000F44  BE4F               	btfsc	i2printf@width+1,7,c
 12522  000F46  D005               	goto	i2l5110
 12523  000F48  504F               	movf	i2printf@width+1,w,c
 12524  000F4A  E1F6               	bnz	i2l5104
 12525  000F4C  044E               	decf	i2printf@width,w,c
 12526  000F4E  B0D8               	btfsc	status,0,c
 12527  000F50  D7F3               	goto	i2l5104
 12528  000F52                     i2l5110:
 12529                           
 12530                           ;doprnt.c: 1183: }
 12531                           ;doprnt.c: 1188: if(flag & 0x03)
 12532  000F52  0E03               	movlw	3
 12533  000F54  1450               	andwf	i2printf@flag,w,c
 12534  000F56  6E42               	movwf	??i2_printf& (0+255),c
 12535  000F58  0E00               	movlw	0
 12536  000F5A  1451               	andwf	i2printf@flag+1,w,c
 12537  000F5C  6E43               	movwf	(??i2_printf+1)& (0+255),c
 12538  000F5E  5042               	movf	??i2_printf,w,c
 12539  000F60  1043               	iorwf	??i2_printf+1,w,c
 12540  000F62  B4D8               	btfsc	status,2,c
 12541  000F64  D048               	goto	i2l5120
 12542                           
 12543                           ;doprnt.c: 1190: (putch('-') );
 12544  000F66  0E2D               	movlw	45
 12545  000F68  EC33  F025         	call	i2_putch
 12546                           
 12547                           ;doprnt.c: 1195: }
 12548                           ;doprnt.c: 1196: while(c--) {
 12549  000F6C  D044               	goto	i2l5120
 12550  000F6E                     i2l5114:
 12551                           
 12552                           ;doprnt.c: 1200: {
 12553                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
 12554  000F6E  C05A  F001         	movff	i2printf@val,i2___lldiv@dividend
 12555  000F72  C05B  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 12556  000F76  C05C  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 12557  000F7A  C05D  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 12558  000F7E  5061               	movf	i2printf@c,w,c
 12559  000F80  0D04               	mullw	4
 12560  000F82  0E8D               	movlw	low _dpowers
 12561  000F84  24F3               	addwf	prodl,w,c
 12562  000F86  6EF6               	movwf	tblptrl,c
 12563  000F88  0EFE               	movlw	high _dpowers
 12564  000F8A  20F4               	addwfc	prodh,w,c
 12565  000F8C  6EF7               	movwf	tblptrh,c
 12566  000F8E                     	if	0	;There are less than 3 active tblptr bytes
 12567  000F8E                     	endif
 12568  000F8E  0009               	tblrd		*+
 12569  000F90  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 12570  000F94  0009               	tblrd		*+
 12571  000F96  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 12572  000F9A  0009               	tblrd		*+
 12573  000F9C  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 12574  000FA0  000A               	tblrd		*-
 12575  000FA2  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 12576  000FA6  EC7C  F021         	call	i2___lldiv	;wreg free
 12577  000FAA  C001  F054         	movff	?i2___lldiv,i2printf@tmpval
 12578  000FAE  C002  F055         	movff	?i2___lldiv+1,i2printf@tmpval+1
 12579  000FB2  C003  F056         	movff	?i2___lldiv+2,i2printf@tmpval+2
 12580  000FB6  C004  F057         	movff	?i2___lldiv+3,i2printf@tmpval+3
 12581                           
 12582                           ;doprnt.c: 1202: tmpval.vd %= 10;
 12583  000FBA  C054  F00E         	movff	i2printf@tmpval,i2___llmod@dividend
 12584  000FBE  C055  F00F         	movff	i2printf@tmpval+1,i2___llmod@dividend+1
 12585  000FC2  C056  F010         	movff	i2printf@tmpval+2,i2___llmod@dividend+2
 12586  000FC6  C057  F011         	movff	i2printf@tmpval+3,i2___llmod@dividend+3
 12587  000FCA  0E0A               	movlw	10
 12588  000FCC  6E12               	movwf	i2___llmod@divisor,c
 12589  000FCE  0E00               	movlw	0
 12590  000FD0  6E13               	movwf	i2___llmod@divisor+1,c
 12591  000FD2  0E00               	movlw	0
 12592  000FD4  6E14               	movwf	i2___llmod@divisor+2,c
 12593  000FD6  0E00               	movlw	0
 12594  000FD8  6E15               	movwf	i2___llmod@divisor+3,c
 12595  000FDA  EC67  F022         	call	i2___llmod	;wreg free
 12596  000FDE  C00E  F054         	movff	?i2___llmod,i2printf@tmpval
 12597  000FE2  C00F  F055         	movff	?i2___llmod+1,i2printf@tmpval+1
 12598  000FE6  C010  F056         	movff	?i2___llmod+2,i2printf@tmpval+2
 12599  000FEA  C011  F057         	movff	?i2___llmod+3,i2printf@tmpval+3
 12600                           
 12601                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
 12602  000FEE  5054               	movf	i2printf@tmpval,w,c
 12603  000FF0  0F30               	addlw	48
 12604  000FF2  EC33  F025         	call	i2_putch
 12605  000FF6                     i2l5120:
 12606  000FF6  0661               	decf	i2printf@c,f,c
 12607  000FF8  2861               	incf	i2printf@c,w,c
 12608  000FFA  B4D8               	btfsc	status,2,c
 12609  000FFC  D007               	goto	i2l5126
 12610  000FFE  D7B7               	goto	i2l5114
 12611  001000                     i2l5122:
 12612                           
 12613                           ;doprnt.c: 1208: (putch('0') );
 12614  001000  0E30               	movlw	48
 12615  001002  EC33  F025         	call	i2_putch
 12616                           
 12617                           ;doprnt.c: 1209: exp--;
 12618  001006  0658               	decf	i2printf@exp,f,c
 12619  001008  A0D8               	btfss	status,0,c
 12620  00100A  0659               	decf	i2printf@exp+1,f,c
 12621  00100C                     i2l5126:
 12622  00100C  BE59               	btfsc	i2printf@exp+1,7,c
 12623  00100E  D005               	goto	i2l5128
 12624  001010  5059               	movf	i2printf@exp+1,w,c
 12625  001012  E1F6               	bnz	i2l5122
 12626  001014  0458               	decf	i2printf@exp,w,c
 12627  001016  B0D8               	btfsc	status,0,c
 12628  001018  D7F3               	goto	i2l5122
 12629  00101A                     i2l5128:
 12630                           
 12631                           ;doprnt.c: 1210: }
 12632                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
 12633  00101A  BE53               	btfsc	i2printf@prec+1,7,c
 12634  00101C  D009               	goto	i2l486
 12635  00101E  5053               	movf	i2printf@prec+1,w,c
 12636  001020  E104               	bnz	i2u608_40
 12637  001022  0E09               	movlw	9
 12638  001024  5C52               	subwf	i2printf@prec,w,c
 12639  001026  A0D8               	btfss	status,0,c
 12640  001028  D003               	goto	i2l486
 12641  00102A                     i2u608_40:
 12642                           
 12643                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
 12644  00102A  0E08               	movlw	8
 12645  00102C  6E61               	movwf	i2printf@c,c
 12646  00102E  D002               	goto	i2l5132
 12647  001030                     i2l486:
 12648                           
 12649                           ;doprnt.c: 1213: else
 12650                           ;doprnt.c: 1214: c = prec;
 12651  001030  C052  F061         	movff	i2printf@prec,i2printf@c
 12652  001034                     i2l5132:
 12653                           
 12654                           ;doprnt.c: 1215: prec -= c;
 12655  001034  5061               	movf	i2printf@c,w,c
 12656  001036  5E52               	subwf	i2printf@prec,f,c
 12657  001038  0E00               	movlw	0
 12658  00103A  BE61               	btfsc	i2printf@c,7,c
 12659  00103C  0EFF               	movlw	255
 12660  00103E  5A53               	subwfb	i2printf@prec+1,f,c
 12661                           
 12662                           ;doprnt.c: 1219: if(c)
 12663  001040  5061               	movf	i2printf@c,w,c
 12664  001042  B4D8               	btfsc	status,2,c
 12665  001044  D003               	goto	i2l5138
 12666                           
 12667                           ;doprnt.c: 1221: (putch('.') );
 12668  001046  0E2E               	movlw	46
 12669  001048  EC33  F025         	call	i2_putch
 12670  00104C                     i2l5138:
 12671                           
 12672                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 12673  00104C  5061               	movf	i2printf@c,w,c
 12674  00104E  EC14  F00F         	call	i2_scale
 12675  001052  C024  F048         	movff	?i2_scale,i2_printf$1514
 12676  001056  C025  F049         	movff	?i2_scale+1,i2_printf$1514+1
 12677  00105A  C026  F04A         	movff	?i2_scale+2,i2_printf$1514+2
 12678                           
 12679                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 12680  00105E  C05E  F018         	movff	i2printf@fval,i2___ftmul@f2
 12681  001062  C05F  F019         	movff	i2printf@fval+1,i2___ftmul@f2+1
 12682  001066  C060  F01A         	movff	i2printf@fval+2,i2___ftmul@f2+2
 12683  00106A  C048  F015         	movff	i2_printf$1514,i2___ftmul@f1
 12684  00106E  C049  F016         	movff	i2_printf$1514+1,i2___ftmul@f1+1
 12685  001072  C04A  F017         	movff	i2_printf$1514+2,i2___ftmul@f1+2
 12686  001076  EC85  F01C         	call	i2___ftmul	;wreg free
 12687  00107A  C015  F02B         	movff	?i2___ftmul,i2___fttol@f1
 12688  00107E  C016  F02C         	movff	?i2___ftmul+1,i2___fttol@f1+1
 12689  001082  C017  F02D         	movff	?i2___ftmul+2,i2___fttol@f1+2
 12690  001086  ECFF  F01C         	call	i2___fttol	;wreg free
 12691  00108A  C02B  F05A         	movff	?i2___fttol,i2printf@val
 12692  00108E  C02C  F05B         	movff	?i2___fttol+1,i2printf@val+1
 12693  001092  C02D  F05C         	movff	?i2___fttol+2,i2printf@val+2
 12694  001096  C02E  F05D         	movff	?i2___fttol+3,i2printf@val+3
 12695                           
 12696                           ;doprnt.c: 1228: while(c--) {
 12697  00109A  D06A               	goto	i2l5148
 12698  00109C                     i2l5142:
 12699                           
 12700                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
 12701  00109C  C05A  F001         	movff	i2printf@val,i2___lldiv@dividend
 12702  0010A0  C05B  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 12703  0010A4  C05C  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 12704  0010A8  C05D  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 12705  0010AC  5061               	movf	i2printf@c,w,c
 12706  0010AE  0D04               	mullw	4
 12707  0010B0  0E8D               	movlw	low _dpowers
 12708  0010B2  24F3               	addwf	prodl,w,c
 12709  0010B4  6EF6               	movwf	tblptrl,c
 12710  0010B6  0EFE               	movlw	high _dpowers
 12711  0010B8  20F4               	addwfc	prodh,w,c
 12712  0010BA  6EF7               	movwf	tblptrh,c
 12713  0010BC                     	if	0	;There are less than 3 active tblptr bytes
 12714  0010BC                     	endif
 12715  0010BC  0009               	tblrd		*+
 12716  0010BE  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 12717  0010C2  0009               	tblrd		*+
 12718  0010C4  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 12719  0010C8  0009               	tblrd		*+
 12720  0010CA  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 12721  0010CE  000A               	tblrd		*-
 12722  0010D0  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 12723  0010D4  EC7C  F021         	call	i2___lldiv	;wreg free
 12724  0010D8  C001  F054         	movff	?i2___lldiv,i2printf@tmpval
 12725  0010DC  C002  F055         	movff	?i2___lldiv+1,i2printf@tmpval+1
 12726  0010E0  C003  F056         	movff	?i2___lldiv+2,i2printf@tmpval+2
 12727  0010E4  C004  F057         	movff	?i2___lldiv+3,i2printf@tmpval+3
 12728                           
 12729                           ;doprnt.c: 1230: tmpval.vd %= 10;
 12730  0010E8  C054  F00E         	movff	i2printf@tmpval,i2___llmod@dividend
 12731  0010EC  C055  F00F         	movff	i2printf@tmpval+1,i2___llmod@dividend+1
 12732  0010F0  C056  F010         	movff	i2printf@tmpval+2,i2___llmod@dividend+2
 12733  0010F4  C057  F011         	movff	i2printf@tmpval+3,i2___llmod@dividend+3
 12734  0010F8  0E0A               	movlw	10
 12735  0010FA  6E12               	movwf	i2___llmod@divisor,c
 12736  0010FC  0E00               	movlw	0
 12737  0010FE  6E13               	movwf	i2___llmod@divisor+1,c
 12738  001100  0E00               	movlw	0
 12739  001102  6E14               	movwf	i2___llmod@divisor+2,c
 12740  001104  0E00               	movlw	0
 12741  001106  6E15               	movwf	i2___llmod@divisor+3,c
 12742  001108  EC67  F022         	call	i2___llmod	;wreg free
 12743  00110C  C00E  F054         	movff	?i2___llmod,i2printf@tmpval
 12744  001110  C00F  F055         	movff	?i2___llmod+1,i2printf@tmpval+1
 12745  001114  C010  F056         	movff	?i2___llmod+2,i2printf@tmpval+2
 12746  001118  C011  F057         	movff	?i2___llmod+3,i2printf@tmpval+3
 12747                           
 12748                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
 12749  00111C  5054               	movf	i2printf@tmpval,w,c
 12750  00111E  0F30               	addlw	48
 12751  001120  EC33  F025         	call	i2_putch
 12752                           
 12753                           ;doprnt.c: 1232: val %= dpowers[c];
 12754  001124  C05A  F00E         	movff	i2printf@val,i2___llmod@dividend
 12755  001128  C05B  F00F         	movff	i2printf@val+1,i2___llmod@dividend+1
 12756  00112C  C05C  F010         	movff	i2printf@val+2,i2___llmod@dividend+2
 12757  001130  C05D  F011         	movff	i2printf@val+3,i2___llmod@dividend+3
 12758  001134  5061               	movf	i2printf@c,w,c
 12759  001136  0D04               	mullw	4
 12760  001138  0E8D               	movlw	low _dpowers
 12761  00113A  24F3               	addwf	prodl,w,c
 12762  00113C  6EF6               	movwf	tblptrl,c
 12763  00113E  0EFE               	movlw	high _dpowers
 12764  001140  20F4               	addwfc	prodh,w,c
 12765  001142  6EF7               	movwf	tblptrh,c
 12766  001144                     	if	0	;There are less than 3 active tblptr bytes
 12767  001144                     	endif
 12768  001144  0009               	tblrd		*+
 12769  001146  CFF5 F012          	movff	tablat,i2___llmod@divisor
 12770  00114A  0009               	tblrd		*+
 12771  00114C  CFF5 F013          	movff	tablat,i2___llmod@divisor+1
 12772  001150  0009               	tblrd		*+
 12773  001152  CFF5 F014          	movff	tablat,i2___llmod@divisor+2
 12774  001156  000A               	tblrd		*-
 12775  001158  CFF5 F015          	movff	tablat,i2___llmod@divisor+3
 12776  00115C  EC67  F022         	call	i2___llmod	;wreg free
 12777  001160  C00E  F05A         	movff	?i2___llmod,i2printf@val
 12778  001164  C00F  F05B         	movff	?i2___llmod+1,i2printf@val+1
 12779  001168  C010  F05C         	movff	?i2___llmod+2,i2printf@val+2
 12780  00116C  C011  F05D         	movff	?i2___llmod+3,i2printf@val+3
 12781  001170                     i2l5148:
 12782  001170  0661               	decf	i2printf@c,f,c
 12783  001172  2861               	incf	i2printf@c,w,c
 12784  001174  B4D8               	btfsc	status,2,c
 12785  001176  D007               	goto	i2l5154
 12786  001178  D791               	goto	i2l5142
 12787  00117A                     i2l5150:
 12788                           
 12789                           ;doprnt.c: 1236: (putch('0') );
 12790  00117A  0E30               	movlw	48
 12791  00117C  EC33  F025         	call	i2_putch
 12792                           
 12793                           ;doprnt.c: 1237: prec--;
 12794  001180  0652               	decf	i2printf@prec,f,c
 12795  001182  A0D8               	btfss	status,0,c
 12796  001184  0653               	decf	i2printf@prec+1,f,c
 12797  001186                     i2l5154:
 12798  001186  5052               	movf	i2printf@prec,w,c
 12799  001188  1053               	iorwf	i2printf@prec+1,w,c
 12800  00118A  B4D8               	btfsc	status,2,c
 12801  00118C  D144               	goto	i2l5240
 12802  00118E  D7F5               	goto	i2l5150
 12803  001190                     i2l453:
 12804                           
 12805                           ;doprnt.c: 1246: }
 12806                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 12807  001190  BE50               	btfsc	i2printf@flag,7,c
 12808  001192  D01E               	goto	i2l5166
 12809                           
 12810                           ;doprnt.c: 1253: {
 12811                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 12812  001194  C04C  FFD9         	movff	i2printf@ap,fsr2l
 12813  001198  C04D  FFDA         	movff	i2printf@ap+1,fsr2h
 12814  00119C  CFDE F05A          	movff	postinc2,i2printf@val
 12815  0011A0  CFDD F05B          	movff	postdec2,i2printf@val+1
 12816  0011A4  0E00               	movlw	0
 12817  0011A6  BE5B               	btfsc	i2printf@val+1,7,c
 12818  0011A8  0EFF               	movlw	-1
 12819  0011AA  6E5C               	movwf	i2printf@val+2,c
 12820  0011AC  6E5D               	movwf	i2printf@val+3,c
 12821  0011AE  0E02               	movlw	2
 12822  0011B0  264C               	addwf	i2printf@ap,f,c
 12823  0011B2  0E00               	movlw	0
 12824  0011B4  224D               	addwfc	i2printf@ap+1,f,c
 12825                           
 12826                           ;doprnt.c: 1261: if((long)val < 0) {
 12827  0011B6  AE5D               	btfss	i2printf@val+3,7,c
 12828  0011B8  D05A               	goto	i2l5200
 12829                           
 12830                           ;doprnt.c: 1262: flag |= 0x03;
 12831  0011BA  0E03               	movlw	3
 12832  0011BC  1250               	iorwf	i2printf@flag,f,c
 12833                           
 12834                           ;doprnt.c: 1263: val = -val;
 12835  0011BE  1E5D               	comf	i2printf@val+3,f,c
 12836  0011C0  1E5C               	comf	i2printf@val+2,f,c
 12837  0011C2  1E5B               	comf	i2printf@val+1,f,c
 12838  0011C4  6C5A               	negf	i2printf@val,c
 12839  0011C6  0E00               	movlw	0
 12840  0011C8  225B               	addwfc	i2printf@val+1,f,c
 12841  0011CA  225C               	addwfc	i2printf@val+2,f,c
 12842  0011CC  225D               	addwfc	i2printf@val+3,f,c
 12843                           
 12844                           ;doprnt.c: 1264: }
 12845                           ;doprnt.c: 1266: }
 12846  0011CE  D04F               	goto	i2l5200
 12847  0011D0                     i2l5166:
 12848                           
 12849                           ;doprnt.c: 1268: else
 12850                           ;doprnt.c: 1273: {
 12851                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 12852  0011D0  C04C  FFD9         	movff	i2printf@ap,fsr2l
 12853  0011D4  C04D  FFDA         	movff	i2printf@ap+1,fsr2h
 12854  0011D8  CFDE F042          	movff	postinc2,??i2_printf
 12855  0011DC  CFDD F043          	movff	postdec2,??i2_printf+1
 12856  0011E0  C042  F05A         	movff	??i2_printf,i2printf@val
 12857  0011E4  C043  F05B         	movff	??i2_printf+1,i2printf@val+1
 12858  0011E8  6A5C               	clrf	i2printf@val+2,c
 12859  0011EA  6A5D               	clrf	i2printf@val+3,c
 12860  0011EC  0E02               	movlw	2
 12861  0011EE  264C               	addwf	i2printf@ap,f,c
 12862  0011F0  0E00               	movlw	0
 12863  0011F2  224D               	addwfc	i2printf@ap+1,f,c
 12864                           
 12865                           ;doprnt.c: 1287: }
 12866                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 12867  0011F4  D03C               	goto	i2l5200
 12868  0011F6                     i2l5170:
 12869                           
 12870                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 12871  0011F6  0E01               	movlw	1
 12872  0011F8  6E61               	movwf	i2printf@c,c
 12873  0011FA                     i2l5172:
 12874  0011FA  0E0A               	movlw	10
 12875  0011FC  1861               	xorwf	i2printf@c,w,c
 12876  0011FE  B4D8               	btfsc	status,2,c
 12877  001200  D03E               	goto	i2l5202
 12878                           
 12879                           ;doprnt.c: 1306: if(val < dpowers[c])
 12880  001202  5061               	movf	i2printf@c,w,c
 12881  001204  0D04               	mullw	4
 12882  001206  0E8D               	movlw	low _dpowers
 12883  001208  24F3               	addwf	prodl,w,c
 12884  00120A  6EF6               	movwf	tblptrl,c
 12885  00120C  0EFE               	movlw	high _dpowers
 12886  00120E  20F4               	addwfc	prodh,w,c
 12887  001210  6EF7               	movwf	tblptrh,c
 12888  001212                     	if	0	;There are less than 3 active tblptr bytes
 12889  001212                     	endif
 12890  001212  0009               	tblrd		*+
 12891  001214  50F5               	movf	tablat,w,c
 12892  001216  5C5A               	subwf	i2printf@val,w,c
 12893  001218  0009               	tblrd		*+
 12894  00121A  50F5               	movf	tablat,w,c
 12895  00121C  585B               	subwfb	i2printf@val+1,w,c
 12896  00121E  0009               	tblrd		*+
 12897  001220  50F5               	movf	tablat,w,c
 12898  001222  585C               	subwfb	i2printf@val+2,w,c
 12899  001224  0009               	tblrd		*+
 12900  001226  50F5               	movf	tablat,w,c
 12901  001228  585D               	subwfb	i2printf@val+3,w,c
 12902  00122A  A0D8               	btfss	status,0,c
 12903  00122C  D028               	goto	i2l5202
 12904                           
 12905                           ;doprnt.c: 1307: break;
 12906  00122E  2A61               	incf	i2printf@c,f,c
 12907  001230  D7E4               	goto	i2l5172
 12908  001232                     i2l5184:
 12909                           
 12910                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 12911  001232  0E01               	movlw	1
 12912  001234  6E61               	movwf	i2printf@c,c
 12913  001236                     i2l5186:
 12914  001236  0E08               	movlw	8
 12915  001238  1861               	xorwf	i2printf@c,w,c
 12916  00123A  B4D8               	btfsc	status,2,c
 12917  00123C  D020               	goto	i2l5202
 12918                           
 12919                           ;doprnt.c: 1317: if(val < hexpowers[c])
 12920  00123E  5061               	movf	i2printf@c,w,c
 12921  001240  0D04               	mullw	4
 12922  001242  0E03               	movlw	low _hexpowers
 12923  001244  24F3               	addwf	prodl,w,c
 12924  001246  6EF6               	movwf	tblptrl,c
 12925  001248  0EFF               	movlw	high _hexpowers
 12926  00124A  20F4               	addwfc	prodh,w,c
 12927  00124C  6EF7               	movwf	tblptrh,c
 12928  00124E                     	if	0	;There are less than 3 active tblptr bytes
 12929  00124E                     	endif
 12930  00124E  0009               	tblrd		*+
 12931  001250  50F5               	movf	tablat,w,c
 12932  001252  5C5A               	subwf	i2printf@val,w,c
 12933  001254  0009               	tblrd		*+
 12934  001256  50F5               	movf	tablat,w,c
 12935  001258  585B               	subwfb	i2printf@val+1,w,c
 12936  00125A  0009               	tblrd		*+
 12937  00125C  50F5               	movf	tablat,w,c
 12938  00125E  585C               	subwfb	i2printf@val+2,w,c
 12939  001260  0009               	tblrd		*+
 12940  001262  50F5               	movf	tablat,w,c
 12941  001264  585D               	subwfb	i2printf@val+3,w,c
 12942  001266  A0D8               	btfss	status,0,c
 12943  001268  D00A               	goto	i2l5202
 12944                           
 12945                           ;doprnt.c: 1318: break;
 12946  00126A  2A61               	incf	i2printf@c,f,c
 12947  00126C  D7E4               	goto	i2l5186
 12948  00126E                     i2l5200:
 12949  00126E  5050               	movf	i2printf@flag,w,c
 12950  001270  0B80               	andlw	128
 12951                           
 12952                           ; Switch size 1, requested type "space"
 12953                           ; Number of cases is 2, Range of values is 0 to 128
 12954                           ; switch strategies available:
 12955                           ; Name         Instructions Cycles
 12956                           ; simple_byte            7     4 (average)
 12957                           ;	Chosen strategy is simple_byte
 12958  001272  0A00               	xorlw	0	; case 0
 12959  001274  B4D8               	btfsc	status,2,c
 12960  001276  D7BF               	goto	i2l5170
 12961  001278  0A80               	xorlw	128	; case 128
 12962  00127A  B4D8               	btfsc	status,2,c
 12963  00127C  D7DA               	goto	i2l5184
 12964  00127E                     i2l5202:
 12965                           
 12966                           ;doprnt.c: 1345: if(width && flag & 0x03)
 12967  00127E  504E               	movf	i2printf@width,w,c
 12968  001280  104F               	iorwf	i2printf@width+1,w,c
 12969  001282  B4D8               	btfsc	status,2,c
 12970  001284  D00D               	goto	i2l5208
 12971  001286  0E03               	movlw	3
 12972  001288  1450               	andwf	i2printf@flag,w,c
 12973  00128A  6E42               	movwf	??i2_printf& (0+255),c
 12974  00128C  0E00               	movlw	0
 12975  00128E  1451               	andwf	i2printf@flag+1,w,c
 12976  001290  6E43               	movwf	(??i2_printf+1)& (0+255),c
 12977  001292  5042               	movf	??i2_printf,w,c
 12978  001294  1043               	iorwf	??i2_printf+1,w,c
 12979  001296  B4D8               	btfsc	status,2,c
 12980  001298  D003               	goto	i2l5208
 12981                           
 12982                           ;doprnt.c: 1346: width--;
 12983  00129A  064E               	decf	i2printf@width,f,c
 12984  00129C  A0D8               	btfss	status,0,c
 12985  00129E  064F               	decf	i2printf@width+1,f,c
 12986  0012A0                     i2l5208:
 12987                           
 12988                           ;doprnt.c: 1381: if(width > c)
 12989  0012A0  0E80               	movlw	128
 12990  0012A2  BE61               	btfsc	i2printf@c,7,c
 12991  0012A4  0E7F               	movlw	127
 12992  0012A6  6E42               	movwf	??i2_printf& (0+255),c
 12993  0012A8  504E               	movf	i2printf@width,w,c
 12994  0012AA  5C61               	subwf	i2printf@c,w,c
 12995  0012AC  504F               	movf	i2printf@width+1,w,c
 12996  0012AE  0A80               	xorlw	128
 12997  0012B0  5842               	subwfb	??i2_printf& (0+255),w,c
 12998  0012B2  B0D8               	btfsc	status,0,c
 12999  0012B4  D007               	goto	i2l5212
 13000                           
 13001                           ;doprnt.c: 1382: width -= c;
 13002  0012B6  5061               	movf	i2printf@c,w,c
 13003  0012B8  5E4E               	subwf	i2printf@width,f,c
 13004  0012BA  0E00               	movlw	0
 13005  0012BC  BE61               	btfsc	i2printf@c,7,c
 13006  0012BE  0EFF               	movlw	255
 13007  0012C0  5A4F               	subwfb	i2printf@width+1,f,c
 13008  0012C2  D004               	goto	i2l5214
 13009  0012C4                     i2l5212:
 13010                           
 13011                           ;doprnt.c: 1383: else
 13012                           ;doprnt.c: 1384: width = 0;
 13013  0012C4  0E00               	movlw	0
 13014  0012C6  6E4F               	movwf	i2printf@width+1,c
 13015  0012C8  0E00               	movlw	0
 13016  0012CA  6E4E               	movwf	i2printf@width,c
 13017  0012CC                     i2l5214:
 13018                           
 13019                           ;doprnt.c: 1422: {
 13020                           ;doprnt.c: 1424: if(width
 13021                           ;doprnt.c: 1428: )
 13022  0012CC  504E               	movf	i2printf@width,w,c
 13023  0012CE  104F               	iorwf	i2printf@width+1,w,c
 13024  0012D0  B4D8               	btfsc	status,2,c
 13025  0012D2  D00A               	goto	i2l5220
 13026  0012D4                     i2l5216:
 13027                           
 13028                           ;doprnt.c: 1430: (putch(' ') );
 13029  0012D4  0E20               	movlw	32
 13030  0012D6  EC33  F025         	call	i2_putch
 13031                           
 13032                           ;doprnt.c: 1431: while(--width);
 13033  0012DA  064E               	decf	i2printf@width,f,c
 13034  0012DC  A0D8               	btfss	status,0,c
 13035  0012DE  064F               	decf	i2printf@width+1,f,c
 13036  0012E0  504E               	movf	i2printf@width,w,c
 13037  0012E2  104F               	iorwf	i2printf@width+1,w,c
 13038  0012E4  A4D8               	btfss	status,2,c
 13039  0012E6  D7F6               	goto	i2l5216
 13040  0012E8                     i2l5220:
 13041                           
 13042                           ;doprnt.c: 1438: if(flag & 0x03)
 13043  0012E8  0E03               	movlw	3
 13044  0012EA  1450               	andwf	i2printf@flag,w,c
 13045  0012EC  6E42               	movwf	??i2_printf& (0+255),c
 13046  0012EE  0E00               	movlw	0
 13047  0012F0  1451               	andwf	i2printf@flag+1,w,c
 13048  0012F2  6E43               	movwf	(??i2_printf+1)& (0+255),c
 13049  0012F4  5042               	movf	??i2_printf,w,c
 13050  0012F6  1043               	iorwf	??i2_printf+1,w,c
 13051  0012F8  B4D8               	btfsc	status,2,c
 13052  0012FA  D003               	goto	i2l5224
 13053                           
 13054                           ;doprnt.c: 1439: (putch('-') );
 13055  0012FC  0E2D               	movlw	45
 13056  0012FE  EC33  F025         	call	i2_putch
 13057  001302                     i2l5224:
 13058                           
 13059                           ;doprnt.c: 1469: }
 13060                           ;doprnt.c: 1472: prec = c;
 13061  001302  5061               	movf	i2printf@c,w,c
 13062  001304  6E52               	movwf	i2printf@prec,c
 13063  001306  6A53               	clrf	i2printf@prec+1,c
 13064  001308  BE52               	btfsc	i2printf@prec,7,c
 13065  00130A  0653               	decf	i2printf@prec+1,f,c
 13066                           
 13067                           ;doprnt.c: 1474: while(prec--) {
 13068  00130C  D07C               	goto	i2l5238
 13069  00130E                     i2l5226:
 13070                           
 13071                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 13072  00130E  C052  F042         	movff	i2printf@prec,??i2_printf
 13073  001312  C053  F043         	movff	i2printf@prec+1,??i2_printf+1
 13074  001316  90D8               	bcf	status,0,c
 13075  001318  3642               	rlcf	??i2_printf,f,c
 13076  00131A  3643               	rlcf	??i2_printf+1,f,c
 13077  00131C  90D8               	bcf	status,0,c
 13078  00131E  3642               	rlcf	??i2_printf,f,c
 13079  001320  3643               	rlcf	??i2_printf+1,f,c
 13080  001322  0E8D               	movlw	low _dpowers
 13081  001324  2442               	addwf	??i2_printf,w,c
 13082  001326  6EF6               	movwf	tblptrl,c
 13083  001328  0EFE               	movlw	high _dpowers
 13084  00132A  2043               	addwfc	??i2_printf+1,w,c
 13085  00132C  6EF7               	movwf	tblptrh,c
 13086  00132E                     	if	0	;There are less than 3 active tblptr bytes
 13087  00132E                     	endif
 13088  00132E  0009               	tblrd		*+
 13089  001330  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 13090  001334  0009               	tblrd		*+
 13091  001336  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 13092  00133A  0009               	tblrd		*+
 13093  00133C  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 13094  001340  000A               	tblrd		*-
 13095  001342  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 13096  001346  C05A  F001         	movff	i2printf@val,i2___lldiv@dividend
 13097  00134A  C05B  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 13098  00134E  C05C  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 13099  001352  C05D  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 13100  001356  EC7C  F021         	call	i2___lldiv	;wreg free
 13101  00135A  C001  F00E         	movff	?i2___lldiv,i2___llmod@dividend
 13102  00135E  C002  F00F         	movff	?i2___lldiv+1,i2___llmod@dividend+1
 13103  001362  C003  F010         	movff	?i2___lldiv+2,i2___llmod@dividend+2
 13104  001366  C004  F011         	movff	?i2___lldiv+3,i2___llmod@dividend+3
 13105  00136A  0E0A               	movlw	10
 13106  00136C  6E12               	movwf	i2___llmod@divisor,c
 13107  00136E  0E00               	movlw	0
 13108  001370  6E13               	movwf	i2___llmod@divisor+1,c
 13109  001372  0E00               	movlw	0
 13110  001374  6E14               	movwf	i2___llmod@divisor+2,c
 13111  001376  0E00               	movlw	0
 13112  001378  6E15               	movwf	i2___llmod@divisor+3,c
 13113  00137A  EC67  F022         	call	i2___llmod	;wreg free
 13114  00137E  500E               	movf	?i2___llmod,w,c
 13115  001380  0F30               	addlw	48
 13116  001382  6E61               	movwf	i2printf@c,c
 13117                           
 13118                           ;doprnt.c: 1491: break;
 13119  001384  D03D               	goto	i2l5236
 13120  001386                     i2l5228:
 13121                           
 13122                           ;doprnt.c: 1499: {
 13123                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 13124  001386  C05A  F001         	movff	i2printf@val,i2___lldiv@dividend
 13125  00138A  C05B  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 13126  00138E  C05C  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 13127  001392  C05D  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 13128  001396  C052  F042         	movff	i2printf@prec,??i2_printf
 13129  00139A  C053  F043         	movff	i2printf@prec+1,??i2_printf+1
 13130  00139E  90D8               	bcf	status,0,c
 13131  0013A0  3642               	rlcf	??i2_printf,f,c
 13132  0013A2  3643               	rlcf	??i2_printf+1,f,c
 13133  0013A4  90D8               	bcf	status,0,c
 13134  0013A6  3642               	rlcf	??i2_printf,f,c
 13135  0013A8  3643               	rlcf	??i2_printf+1,f,c
 13136  0013AA  0E03               	movlw	low _hexpowers
 13137  0013AC  2442               	addwf	??i2_printf,w,c
 13138  0013AE  6EF6               	movwf	tblptrl,c
 13139  0013B0  0EFF               	movlw	high _hexpowers
 13140  0013B2  2043               	addwfc	??i2_printf+1,w,c
 13141  0013B4  6EF7               	movwf	tblptrh,c
 13142  0013B6                     	if	0	;There are less than 3 active tblptr bytes
 13143  0013B6                     	endif
 13144  0013B6  0009               	tblrd		*+
 13145  0013B8  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 13146  0013BC  0009               	tblrd		*+
 13147  0013BE  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 13148  0013C2  0009               	tblrd		*+
 13149  0013C4  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 13150  0013C8  000A               	tblrd		*-
 13151  0013CA  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 13152  0013CE  EC7C  F021         	call	i2___lldiv	;wreg free
 13153  0013D2  5001               	movf	?i2___lldiv,w,c
 13154  0013D4  0B0F               	andlw	15
 13155  0013D6  6E4B               	movwf	i2printf@idx,c
 13156                           
 13157                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 13158  0013D8  504B               	movf	i2printf@idx,w,c
 13159  0013DA  0D01               	mullw	1
 13160  0013DC  0E3B               	movlw	low STR_21
 13161  0013DE  24F3               	addwf	prodl,w,c
 13162  0013E0  6EF6               	movwf	tblptrl,c
 13163  0013E2  0EFF               	movlw	high STR_21
 13164  0013E4  20F4               	addwfc	prodh,w,c
 13165  0013E6  6EF7               	movwf	tblptrh,c
 13166  0013E8                     	if	0	;There are less than 3 active tblptr bytes
 13167  0013E8                     	endif
 13168  0013E8  0008               	tblrd		*
 13169  0013EA  CFF5 F061          	movff	tablat,i2printf@c
 13170                           
 13171                           ;doprnt.c: 1523: }
 13172                           
 13173                           ;doprnt.c: 1508: }
 13174                           ;doprnt.c: 1510: break;
 13175  0013EE  D008               	goto	i2l5236
 13176  0013F0                     i2l5234:
 13177  0013F0  5050               	movf	i2printf@flag,w,c
 13178  0013F2  0B80               	andlw	128
 13179                           
 13180                           ; Switch size 1, requested type "space"
 13181                           ; Number of cases is 2, Range of values is 0 to 128
 13182                           ; switch strategies available:
 13183                           ; Name         Instructions Cycles
 13184                           ; simple_byte            7     4 (average)
 13185                           ;	Chosen strategy is simple_byte
 13186  0013F4  0A00               	xorlw	0	; case 0
 13187  0013F6  B4D8               	btfsc	status,2,c
 13188  0013F8  D78A               	goto	i2l5226
 13189  0013FA  0A80               	xorlw	128	; case 128
 13190  0013FC  B4D8               	btfsc	status,2,c
 13191  0013FE  D7C3               	goto	i2l5228
 13192  001400                     i2l5236:
 13193                           
 13194                           ;doprnt.c: 1524: (putch(c) );
 13195  001400  5061               	movf	i2printf@c,w,c
 13196  001402  EC33  F025         	call	i2_putch
 13197  001406                     i2l5238:
 13198  001406  0652               	decf	i2printf@prec,f,c
 13199  001408  A0D8               	btfss	status,0,c
 13200  00140A  0653               	decf	i2printf@prec+1,f,c
 13201  00140C  2852               	incf	i2printf@prec,w,c
 13202  00140E  E1F0               	bnz	i2l5234
 13203  001410  2853               	incf	i2printf@prec+1,w,c
 13204  001412  A4D8               	btfss	status,2,c
 13205  001414  D7ED               	goto	i2l5234
 13206  001416                     i2l5240:
 13207  001416  C040  FFF6         	movff	i2printf@f,tblptrl
 13208  00141A  C041  FFF7         	movff	i2printf@f+1,tblptrh
 13209  00141E  4A40               	infsnz	i2printf@f,f,c
 13210  001420  2A41               	incf	i2printf@f+1,f,c
 13211  001422                     	if	0	;tblptru may be non-zero
 13212  001422                     	endif
 13213  001422                     	if	0	;tblptru may be non-zero
 13214  001422                     	endif
 13215  001422  0008               	tblrd		*
 13216  001424  CFF5 F061          	movff	tablat,i2printf@c
 13217  001428  5061               	movf	i2printf@c,w,c
 13218  00142A  B4D8               	btfsc	status,2,c
 13219  00142C  0012               	return	
 13220  00142E  EF8B  F005         	goto	i2l4984
 13221  001432                     __end_ofi2_printf:
 13222                           	opt stack 0
 13223                           pclatu	equ	0xFFB
 13224                           pclath	equ	0xFFA
 13225                           tblptru	equ	0xFF8
 13226                           tblptrh	equ	0xFF7
 13227                           tblptrl	equ	0xFF6
 13228                           tablat	equ	0xFF5
 13229                           prodh	equ	0xFF4
 13230                           prodl	equ	0xFF3
 13231                           intcon	equ	0xFF2
 13232                           intcon2	equ	0xFF1
 13233                           intcon3	equ	0xFF0
 13234                           postinc0	equ	0xFEE
 13235                           fsr0h	equ	0xFEA
 13236                           fsr0l	equ	0xFE9
 13237                           wreg	equ	0xFE8
 13238                           fsr1h	equ	0xFE2
 13239                           fsr1l	equ	0xFE1
 13240                           indf2	equ	0xFDF
 13241                           postinc2	equ	0xFDE
 13242                           postdec2	equ	0xFDD
 13243                           fsr2h	equ	0xFDA
 13244                           fsr2l	equ	0xFD9
 13245                           status	equ	0xFD8
 13246                           
 13247 ;; *************** function i2_scale *****************
 13248 ;; Defined at:
 13249 ;;		line 425 in file "/Applications/microchip/xc8/v1.40/sources/common/doprnt.c"
 13250 ;; Parameters:    Size  Location     Type
 13251 ;;  scl             1    wreg     char 
 13252 ;; Auto vars:     Size  Location     Type
 13253 ;;  scl             1   41[COMRAM] char 
 13254 ;; Return value:  Size  Location     Type
 13255 ;;                  3   35[COMRAM] char 
 13256 ;; Registers used:
 13257 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13258 ;; Tracked objects:
 13259 ;;		On entry : 0/0
 13260 ;;		On exit  : 0/0
 13261 ;;		Unchanged: 0/0
 13262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13263 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13264 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13266 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13267 ;;Total ram usage:        7 bytes
 13268 ;; Hardware stack levels used:    1
 13269 ;; Hardware stack levels required when called:    2
 13270 ;; This function calls:
 13271 ;;		i2___awdiv
 13272 ;;		i2___awmod
 13273 ;;		i2___ftmul
 13274 ;;		i2___wmul
 13275 ;; This function is called by:
 13276 ;;		i2_printf
 13277 ;; This function uses a non-reentrant model
 13278 ;;
 13279                           
 13280                           	psect	text48
 13281  001E28                     __ptext48:
 13282                           	opt stack 0
 13283  001E28                     i2_scale:
 13284                           	opt stack 20
 13285                           
 13286                           ;incstack = 0
 13287                           ;i2scale@scl stored from wreg
 13288  001E28  6E2A               	movwf	i2scale@scl,c
 13289                           
 13290                           ;doprnt.c: 428: if(scl < 0) {
 13291  001E2A  AE2A               	btfss	i2scale@scl,7,c
 13292  001E2C  D0FB               	goto	i2l4346
 13293                           
 13294                           ;doprnt.c: 429: scl = -scl;
 13295  001E2E  6C2A               	negf	i2scale@scl,c
 13296                           
 13297                           ;doprnt.c: 430: if(scl>=110)
 13298  001E30  502A               	movf	i2scale@scl,w,c
 13299  001E32  0A80               	xorlw	128
 13300  001E34  0F12               	addlw	-238
 13301  001E36  A0D8               	btfss	status,0,c
 13302  001E38  D091               	goto	i2l4336
 13303                           
 13304                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 13305  001E3A  0E00               	movlw	0
 13306  001E3C  6E12               	movwf	i2___wmul@multiplicand+1,c
 13307  001E3E  0E03               	movlw	3
 13308  001E40  6E11               	movwf	i2___wmul@multiplicand,c
 13309  001E42  0E00               	movlw	0
 13310  001E44  6E0A               	movwf	i2___awdiv@divisor+1,c
 13311  001E46  0E0A               	movlw	10
 13312  001E48  6E09               	movwf	i2___awdiv@divisor,c
 13313  001E4A  0E00               	movlw	0
 13314  001E4C  6E04               	movwf	i2___awmod@divisor+1,c
 13315  001E4E  0E64               	movlw	100
 13316  001E50  6E03               	movwf	i2___awmod@divisor,c
 13317  001E52  502A               	movf	i2scale@scl,w,c
 13318  001E54  6E01               	movwf	i2___awmod@dividend,c
 13319  001E56  6A02               	clrf	i2___awmod@dividend+1,c
 13320  001E58  BE01               	btfsc	i2___awmod@dividend,7,c
 13321  001E5A  0602               	decf	i2___awmod@dividend+1,f,c
 13322  001E5C  ECFB  F021         	call	i2___awmod	;wreg free
 13323  001E60  C001  F007         	movff	?i2___awmod,i2___awdiv@dividend
 13324  001E64  C002  F008         	movff	?i2___awmod+1,i2___awdiv@dividend+1
 13325  001E68  EC3A  F021         	call	i2___awdiv	;wreg free
 13326  001E6C  0E09               	movlw	9
 13327  001E6E  2407               	addwf	?i2___awdiv,w,c
 13328  001E70  6E0F               	movwf	i2___wmul@multiplier,c
 13329  001E72  0E00               	movlw	0
 13330  001E74  2008               	addwfc	?i2___awdiv+1,w,c
 13331  001E76  6E10               	movwf	i2___wmul@multiplier+1,c
 13332  001E78  ECBA  F024         	call	i2___wmul	;wreg free
 13333  001E7C  0EB5               	movlw	low __npowers_
 13334  001E7E  240F               	addwf	?i2___wmul,w,c
 13335  001E80  6EF6               	movwf	tblptrl,c
 13336  001E82  0EFE               	movlw	high __npowers_
 13337  001E84  2010               	addwfc	?i2___wmul+1,w,c
 13338  001E86  6EF7               	movwf	tblptrh,c
 13339  001E88                     	if	0	;There are less than 3 active tblptr bytes
 13340  001E88                     	endif
 13341  001E88  0009               	tblrd		*+
 13342  001E8A  CFF5 F018          	movff	tablat,i2___ftmul@f2
 13343  001E8E  0009               	tblrd		*+
 13344  001E90  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 13345  001E94  000A               	tblrd		*-
 13346  001E96  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 13347  001E9A  0E00               	movlw	0
 13348  001E9C  6E0A               	movwf	i2___awdiv@divisor+1,c
 13349  001E9E  0E64               	movlw	100
 13350  001EA0  6E09               	movwf	i2___awdiv@divisor,c
 13351  001EA2  502A               	movf	i2scale@scl,w,c
 13352  001EA4  6E07               	movwf	i2___awdiv@dividend,c
 13353  001EA6  6A08               	clrf	i2___awdiv@dividend+1,c
 13354  001EA8  BE07               	btfsc	i2___awdiv@dividend,7,c
 13355  001EAA  0608               	decf	i2___awdiv@dividend+1,f,c
 13356  001EAC  EC3A  F021         	call	i2___awdiv	;wreg free
 13357  001EB0  0E12               	movlw	18
 13358  001EB2  2407               	addwf	?i2___awdiv,w,c
 13359  001EB4  6E0F               	movwf	i2___wmul@multiplier,c
 13360  001EB6  0E00               	movlw	0
 13361  001EB8  2008               	addwfc	?i2___awdiv+1,w,c
 13362  001EBA  6E10               	movwf	i2___wmul@multiplier+1,c
 13363  001EBC  0E00               	movlw	0
 13364  001EBE  6E12               	movwf	i2___wmul@multiplicand+1,c
 13365  001EC0  0E03               	movlw	3
 13366  001EC2  6E11               	movwf	i2___wmul@multiplicand,c
 13367  001EC4  ECBA  F024         	call	i2___wmul	;wreg free
 13368  001EC8  0EB5               	movlw	low __npowers_
 13369  001ECA  240F               	addwf	?i2___wmul,w,c
 13370  001ECC  6EF6               	movwf	tblptrl,c
 13371  001ECE  0EFE               	movlw	high __npowers_
 13372  001ED0  2010               	addwfc	?i2___wmul+1,w,c
 13373  001ED2  6EF7               	movwf	tblptrh,c
 13374  001ED4                     	if	0	;There are less than 3 active tblptr bytes
 13375  001ED4                     	endif
 13376  001ED4  0009               	tblrd		*+
 13377  001ED6  CFF5 F015          	movff	tablat,i2___ftmul@f1
 13378  001EDA  0009               	tblrd		*+
 13379  001EDC  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 13380  001EE0  000A               	tblrd		*-
 13381  001EE2  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 13382  001EE6  EC85  F01C         	call	i2___ftmul	;wreg free
 13383  001EEA  C015  F027         	movff	?i2___ftmul,i2_scale$1513
 13384  001EEE  C016  F028         	movff	?i2___ftmul+1,i2_scale$1513+1
 13385  001EF2  C017  F029         	movff	?i2___ftmul+2,i2_scale$1513+2
 13386                           
 13387                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 13388  001EF6  C027  F015         	movff	i2_scale$1513,i2___ftmul@f1
 13389  001EFA  C028  F016         	movff	i2_scale$1513+1,i2___ftmul@f1+1
 13390  001EFE  C029  F017         	movff	i2_scale$1513+2,i2___ftmul@f1+2
 13391  001F02  0E00               	movlw	0
 13392  001F04  6E12               	movwf	i2___wmul@multiplicand+1,c
 13393  001F06  0E03               	movlw	3
 13394  001F08  6E11               	movwf	i2___wmul@multiplicand,c
 13395  001F0A  0E00               	movlw	0
 13396  001F0C  6E04               	movwf	i2___awmod@divisor+1,c
 13397  001F0E  0E0A               	movlw	10
 13398  001F10  6E03               	movwf	i2___awmod@divisor,c
 13399  001F12  502A               	movf	i2scale@scl,w,c
 13400  001F14  6E01               	movwf	i2___awmod@dividend,c
 13401  001F16  6A02               	clrf	i2___awmod@dividend+1,c
 13402  001F18  BE01               	btfsc	i2___awmod@dividend,7,c
 13403  001F1A  0602               	decf	i2___awmod@dividend+1,f,c
 13404  001F1C  ECFB  F021         	call	i2___awmod	;wreg free
 13405  001F20  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 13406  001F24  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 13407  001F28  ECBA  F024         	call	i2___wmul	;wreg free
 13408  001F2C  0EB5               	movlw	low __npowers_
 13409  001F2E  240F               	addwf	?i2___wmul,w,c
 13410  001F30  6EF6               	movwf	tblptrl,c
 13411  001F32  0EFE               	movlw	high __npowers_
 13412  001F34  2010               	addwfc	?i2___wmul+1,w,c
 13413  001F36  6EF7               	movwf	tblptrh,c
 13414  001F38                     	if	0	;There are less than 3 active tblptr bytes
 13415  001F38                     	endif
 13416  001F38  0009               	tblrd		*+
 13417  001F3A  CFF5 F018          	movff	tablat,i2___ftmul@f2
 13418  001F3E  0009               	tblrd		*+
 13419  001F40  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 13420  001F44  000A               	tblrd		*-
 13421  001F46  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 13422  001F4A  EC85  F01C         	call	i2___ftmul	;wreg free
 13423  001F4E  C015  F024         	movff	?i2___ftmul,?i2_scale
 13424  001F52  C016  F025         	movff	?i2___ftmul+1,?i2_scale+1
 13425  001F56  C017  F026         	movff	?i2___ftmul+2,?i2_scale+2
 13426  001F5A  0012               	return	
 13427  001F5C                     i2l4336:
 13428                           
 13429                           ;doprnt.c: 432: else if(scl > 10)
 13430  001F5C  502A               	movf	i2scale@scl,w,c
 13431  001F5E  0A80               	xorlw	128
 13432  001F60  0F75               	addlw	-139
 13433  001F62  A0D8               	btfss	status,0,c
 13434  001F64  D04D               	goto	i2l4342
 13435                           
 13436                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
 13437  001F66  0E00               	movlw	0
 13438  001F68  6E0A               	movwf	i2___awdiv@divisor+1,c
 13439  001F6A  0E0A               	movlw	10
 13440  001F6C  6E09               	movwf	i2___awdiv@divisor,c
 13441  001F6E  502A               	movf	i2scale@scl,w,c
 13442  001F70  6E07               	movwf	i2___awdiv@dividend,c
 13443  001F72  6A08               	clrf	i2___awdiv@dividend+1,c
 13444  001F74  BE07               	btfsc	i2___awdiv@dividend,7,c
 13445  001F76  0608               	decf	i2___awdiv@dividend+1,f,c
 13446  001F78  EC3A  F021         	call	i2___awdiv	;wreg free
 13447  001F7C  0E09               	movlw	9
 13448  001F7E  2407               	addwf	?i2___awdiv,w,c
 13449  001F80  6E0F               	movwf	i2___wmul@multiplier,c
 13450  001F82  0E00               	movlw	0
 13451  001F84  2008               	addwfc	?i2___awdiv+1,w,c
 13452  001F86  6E10               	movwf	i2___wmul@multiplier+1,c
 13453  001F88  0E00               	movlw	0
 13454  001F8A  6E12               	movwf	i2___wmul@multiplicand+1,c
 13455  001F8C  0E03               	movlw	3
 13456  001F8E  6E11               	movwf	i2___wmul@multiplicand,c
 13457  001F90  ECBA  F024         	call	i2___wmul	;wreg free
 13458  001F94  0EB5               	movlw	low __npowers_
 13459  001F96  240F               	addwf	?i2___wmul,w,c
 13460  001F98  6EF6               	movwf	tblptrl,c
 13461  001F9A  0EFE               	movlw	high __npowers_
 13462  001F9C  2010               	addwfc	?i2___wmul+1,w,c
 13463  001F9E  6EF7               	movwf	tblptrh,c
 13464  001FA0                     	if	0	;There are less than 3 active tblptr bytes
 13465  001FA0                     	endif
 13466  001FA0  0009               	tblrd		*+
 13467  001FA2  CFF5 F015          	movff	tablat,i2___ftmul@f1
 13468  001FA6  0009               	tblrd		*+
 13469  001FA8  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 13470  001FAC  000A               	tblrd		*-
 13471  001FAE  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 13472  001FB2  0E00               	movlw	0
 13473  001FB4  6E12               	movwf	i2___wmul@multiplicand+1,c
 13474  001FB6  0E03               	movlw	3
 13475  001FB8  6E11               	movwf	i2___wmul@multiplicand,c
 13476  001FBA  0E00               	movlw	0
 13477  001FBC  6E04               	movwf	i2___awmod@divisor+1,c
 13478  001FBE  0E0A               	movlw	10
 13479  001FC0  6E03               	movwf	i2___awmod@divisor,c
 13480  001FC2  502A               	movf	i2scale@scl,w,c
 13481  001FC4  6E01               	movwf	i2___awmod@dividend,c
 13482  001FC6  6A02               	clrf	i2___awmod@dividend+1,c
 13483  001FC8  BE01               	btfsc	i2___awmod@dividend,7,c
 13484  001FCA  0602               	decf	i2___awmod@dividend+1,f,c
 13485  001FCC  ECFB  F021         	call	i2___awmod	;wreg free
 13486  001FD0  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 13487  001FD4  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 13488  001FD8  ECBA  F024         	call	i2___wmul	;wreg free
 13489  001FDC  0EB5               	movlw	low __npowers_
 13490  001FDE  240F               	addwf	?i2___wmul,w,c
 13491  001FE0  6EF6               	movwf	tblptrl,c
 13492  001FE2  0EFE               	movlw	high __npowers_
 13493  001FE4  2010               	addwfc	?i2___wmul+1,w,c
 13494  001FE6  6EF7               	movwf	tblptrh,c
 13495  001FE8                     	if	0	;There are less than 3 active tblptr bytes
 13496  001FE8                     	endif
 13497  001FE8  0009               	tblrd		*+
 13498  001FEA  CFF5 F018          	movff	tablat,i2___ftmul@f2
 13499  001FEE  0009               	tblrd		*+
 13500  001FF0  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 13501  001FF4  000A               	tblrd		*-
 13502  001FF6  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 13503  001FFA  EC85  F01C         	call	i2___ftmul	;wreg free
 13504  001FFE  D7A7               	goto	L6
 13505  002000                     i2l4342:
 13506                           
 13507                           ;doprnt.c: 434: return _npowers_[scl];
 13508  002000  502A               	movf	i2scale@scl,w,c
 13509  002002  0D03               	mullw	3
 13510  002004  0EB5               	movlw	low __npowers_
 13511  002006  24F3               	addwf	prodl,w,c
 13512  002008  6EF6               	movwf	tblptrl,c
 13513  00200A  0EFE               	movlw	high __npowers_
 13514  00200C  20F4               	addwfc	prodh,w,c
 13515  00200E  6EF7               	movwf	tblptrh,c
 13516  002010                     	if	0	;There are less than 3 active tblptr bytes
 13517  002010                     	endif
 13518  002010  0009               	tblrd		*+
 13519  002012  CFF5 F024          	movff	tablat,?i2_scale
 13520  002016  0009               	tblrd		*+
 13521  002018  CFF5 F025          	movff	tablat,?i2_scale+1
 13522  00201C  000A               	tblrd		*-
 13523  00201E  CFF5 F026          	movff	tablat,?i2_scale+2
 13524  002022  0012               	return	
 13525  002024                     i2l4346:
 13526                           
 13527                           ;doprnt.c: 435: }
 13528                           ;doprnt.c: 436: if(scl>=110)
 13529  002024  502A               	movf	i2scale@scl,w,c
 13530  002026  0A80               	xorlw	128
 13531  002028  0F12               	addlw	-238
 13532  00202A  A0D8               	btfss	status,0,c
 13533  00202C  D091               	goto	i2l4354
 13534                           
 13535                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 13536  00202E  0E00               	movlw	0
 13537  002030  6E12               	movwf	i2___wmul@multiplicand+1,c
 13538  002032  0E03               	movlw	3
 13539  002034  6E11               	movwf	i2___wmul@multiplicand,c
 13540  002036  0E00               	movlw	0
 13541  002038  6E0A               	movwf	i2___awdiv@divisor+1,c
 13542  00203A  0E0A               	movlw	10
 13543  00203C  6E09               	movwf	i2___awdiv@divisor,c
 13544  00203E  0E00               	movlw	0
 13545  002040  6E04               	movwf	i2___awmod@divisor+1,c
 13546  002042  0E64               	movlw	100
 13547  002044  6E03               	movwf	i2___awmod@divisor,c
 13548  002046  502A               	movf	i2scale@scl,w,c
 13549  002048  6E01               	movwf	i2___awmod@dividend,c
 13550  00204A  6A02               	clrf	i2___awmod@dividend+1,c
 13551  00204C  BE01               	btfsc	i2___awmod@dividend,7,c
 13552  00204E  0602               	decf	i2___awmod@dividend+1,f,c
 13553  002050  ECFB  F021         	call	i2___awmod	;wreg free
 13554  002054  C001  F007         	movff	?i2___awmod,i2___awdiv@dividend
 13555  002058  C002  F008         	movff	?i2___awmod+1,i2___awdiv@dividend+1
 13556  00205C  EC3A  F021         	call	i2___awdiv	;wreg free
 13557  002060  0E09               	movlw	9
 13558  002062  2407               	addwf	?i2___awdiv,w,c
 13559  002064  6E0F               	movwf	i2___wmul@multiplier,c
 13560  002066  0E00               	movlw	0
 13561  002068  2008               	addwfc	?i2___awdiv+1,w,c
 13562  00206A  6E10               	movwf	i2___wmul@multiplier+1,c
 13563  00206C  ECBA  F024         	call	i2___wmul	;wreg free
 13564  002070  0EDC               	movlw	low __powers_
 13565  002072  240F               	addwf	?i2___wmul,w,c
 13566  002074  6EF6               	movwf	tblptrl,c
 13567  002076  0EFE               	movlw	high __powers_
 13568  002078  2010               	addwfc	?i2___wmul+1,w,c
 13569  00207A  6EF7               	movwf	tblptrh,c
 13570  00207C                     	if	0	;There are less than 3 active tblptr bytes
 13571  00207C                     	endif
 13572  00207C  0009               	tblrd		*+
 13573  00207E  CFF5 F018          	movff	tablat,i2___ftmul@f2
 13574  002082  0009               	tblrd		*+
 13575  002084  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 13576  002088  000A               	tblrd		*-
 13577  00208A  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 13578  00208E  0E00               	movlw	0
 13579  002090  6E0A               	movwf	i2___awdiv@divisor+1,c
 13580  002092  0E64               	movlw	100
 13581  002094  6E09               	movwf	i2___awdiv@divisor,c
 13582  002096  502A               	movf	i2scale@scl,w,c
 13583  002098  6E07               	movwf	i2___awdiv@dividend,c
 13584  00209A  6A08               	clrf	i2___awdiv@dividend+1,c
 13585  00209C  BE07               	btfsc	i2___awdiv@dividend,7,c
 13586  00209E  0608               	decf	i2___awdiv@dividend+1,f,c
 13587  0020A0  EC3A  F021         	call	i2___awdiv	;wreg free
 13588  0020A4  0E12               	movlw	18
 13589  0020A6  2407               	addwf	?i2___awdiv,w,c
 13590  0020A8  6E0F               	movwf	i2___wmul@multiplier,c
 13591  0020AA  0E00               	movlw	0
 13592  0020AC  2008               	addwfc	?i2___awdiv+1,w,c
 13593  0020AE  6E10               	movwf	i2___wmul@multiplier+1,c
 13594  0020B0  0E00               	movlw	0
 13595  0020B2  6E12               	movwf	i2___wmul@multiplicand+1,c
 13596  0020B4  0E03               	movlw	3
 13597  0020B6  6E11               	movwf	i2___wmul@multiplicand,c
 13598  0020B8  ECBA  F024         	call	i2___wmul	;wreg free
 13599  0020BC  0EDC               	movlw	low __powers_
 13600  0020BE  240F               	addwf	?i2___wmul,w,c
 13601  0020C0  6EF6               	movwf	tblptrl,c
 13602  0020C2  0EFE               	movlw	high __powers_
 13603  0020C4  2010               	addwfc	?i2___wmul+1,w,c
 13604  0020C6  6EF7               	movwf	tblptrh,c
 13605  0020C8                     	if	0	;There are less than 3 active tblptr bytes
 13606  0020C8                     	endif
 13607  0020C8  0009               	tblrd		*+
 13608  0020CA  CFF5 F015          	movff	tablat,i2___ftmul@f1
 13609  0020CE  0009               	tblrd		*+
 13610  0020D0  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 13611  0020D4  000A               	tblrd		*-
 13612  0020D6  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 13613  0020DA  EC85  F01C         	call	i2___ftmul	;wreg free
 13614  0020DE  C015  F027         	movff	?i2___ftmul,i2_scale$1513
 13615  0020E2  C016  F028         	movff	?i2___ftmul+1,i2_scale$1513+1
 13616  0020E6  C017  F029         	movff	?i2___ftmul+2,i2_scale$1513+2
 13617                           
 13618                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 13619  0020EA  C027  F015         	movff	i2_scale$1513,i2___ftmul@f1
 13620  0020EE  C028  F016         	movff	i2_scale$1513+1,i2___ftmul@f1+1
 13621  0020F2  C029  F017         	movff	i2_scale$1513+2,i2___ftmul@f1+2
 13622  0020F6  0E00               	movlw	0
 13623  0020F8  6E12               	movwf	i2___wmul@multiplicand+1,c
 13624  0020FA  0E03               	movlw	3
 13625  0020FC  6E11               	movwf	i2___wmul@multiplicand,c
 13626  0020FE  0E00               	movlw	0
 13627  002100  6E04               	movwf	i2___awmod@divisor+1,c
 13628  002102  0E0A               	movlw	10
 13629  002104  6E03               	movwf	i2___awmod@divisor,c
 13630  002106  502A               	movf	i2scale@scl,w,c
 13631  002108  6E01               	movwf	i2___awmod@dividend,c
 13632  00210A  6A02               	clrf	i2___awmod@dividend+1,c
 13633  00210C  BE01               	btfsc	i2___awmod@dividend,7,c
 13634  00210E  0602               	decf	i2___awmod@dividend+1,f,c
 13635  002110  ECFB  F021         	call	i2___awmod	;wreg free
 13636  002114  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 13637  002118  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 13638  00211C  ECBA  F024         	call	i2___wmul	;wreg free
 13639  002120  0EDC               	movlw	low __powers_
 13640  002122  240F               	addwf	?i2___wmul,w,c
 13641  002124  6EF6               	movwf	tblptrl,c
 13642  002126  0EFE               	movlw	high __powers_
 13643  002128  2010               	addwfc	?i2___wmul+1,w,c
 13644  00212A  6EF7               	movwf	tblptrh,c
 13645  00212C                     	if	0	;There are less than 3 active tblptr bytes
 13646  00212C                     	endif
 13647  00212C  0009               	tblrd		*+
 13648  00212E  CFF5 F018          	movff	tablat,i2___ftmul@f2
 13649  002132  0009               	tblrd		*+
 13650  002134  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 13651  002138  000A               	tblrd		*-
 13652  00213A  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 13653  00213E  EC85  F01C         	call	i2___ftmul	;wreg free
 13654  002142  C015  F024         	movff	?i2___ftmul,?i2_scale
 13655  002146  C016  F025         	movff	?i2___ftmul+1,?i2_scale+1
 13656  00214A  C017  F026         	movff	?i2___ftmul+2,?i2_scale+2
 13657  00214E  0012               	return	
 13658  002150                     i2l4354:
 13659                           
 13660                           ;doprnt.c: 438: else if(scl > 10)
 13661  002150  502A               	movf	i2scale@scl,w,c
 13662  002152  0A80               	xorlw	128
 13663  002154  0F75               	addlw	-139
 13664  002156  A0D8               	btfss	status,0,c
 13665  002158  D04D               	goto	i2l4360
 13666                           
 13667                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
 13668  00215A  0E00               	movlw	0
 13669  00215C  6E0A               	movwf	i2___awdiv@divisor+1,c
 13670  00215E  0E0A               	movlw	10
 13671  002160  6E09               	movwf	i2___awdiv@divisor,c
 13672  002162  502A               	movf	i2scale@scl,w,c
 13673  002164  6E07               	movwf	i2___awdiv@dividend,c
 13674  002166  6A08               	clrf	i2___awdiv@dividend+1,c
 13675  002168  BE07               	btfsc	i2___awdiv@dividend,7,c
 13676  00216A  0608               	decf	i2___awdiv@dividend+1,f,c
 13677  00216C  EC3A  F021         	call	i2___awdiv	;wreg free
 13678  002170  0E09               	movlw	9
 13679  002172  2407               	addwf	?i2___awdiv,w,c
 13680  002174  6E0F               	movwf	i2___wmul@multiplier,c
 13681  002176  0E00               	movlw	0
 13682  002178  2008               	addwfc	?i2___awdiv+1,w,c
 13683  00217A  6E10               	movwf	i2___wmul@multiplier+1,c
 13684  00217C  0E00               	movlw	0
 13685  00217E  6E12               	movwf	i2___wmul@multiplicand+1,c
 13686  002180  0E03               	movlw	3
 13687  002182  6E11               	movwf	i2___wmul@multiplicand,c
 13688  002184  ECBA  F024         	call	i2___wmul	;wreg free
 13689  002188  0EDC               	movlw	low __powers_
 13690  00218A  240F               	addwf	?i2___wmul,w,c
 13691  00218C  6EF6               	movwf	tblptrl,c
 13692  00218E  0EFE               	movlw	high __powers_
 13693  002190  2010               	addwfc	?i2___wmul+1,w,c
 13694  002192  6EF7               	movwf	tblptrh,c
 13695  002194                     	if	0	;There are less than 3 active tblptr bytes
 13696  002194                     	endif
 13697  002194  0009               	tblrd		*+
 13698  002196  CFF5 F015          	movff	tablat,i2___ftmul@f1
 13699  00219A  0009               	tblrd		*+
 13700  00219C  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 13701  0021A0  000A               	tblrd		*-
 13702  0021A2  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 13703  0021A6  0E00               	movlw	0
 13704  0021A8  6E12               	movwf	i2___wmul@multiplicand+1,c
 13705  0021AA  0E03               	movlw	3
 13706  0021AC  6E11               	movwf	i2___wmul@multiplicand,c
 13707  0021AE  0E00               	movlw	0
 13708  0021B0  6E04               	movwf	i2___awmod@divisor+1,c
 13709  0021B2  0E0A               	movlw	10
 13710  0021B4  6E03               	movwf	i2___awmod@divisor,c
 13711  0021B6  502A               	movf	i2scale@scl,w,c
 13712  0021B8  6E01               	movwf	i2___awmod@dividend,c
 13713  0021BA  6A02               	clrf	i2___awmod@dividend+1,c
 13714  0021BC  BE01               	btfsc	i2___awmod@dividend,7,c
 13715  0021BE  0602               	decf	i2___awmod@dividend+1,f,c
 13716  0021C0  ECFB  F021         	call	i2___awmod	;wreg free
 13717  0021C4  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 13718  0021C8  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 13719  0021CC  ECBA  F024         	call	i2___wmul	;wreg free
 13720  0021D0  0EDC               	movlw	low __powers_
 13721  0021D2  240F               	addwf	?i2___wmul,w,c
 13722  0021D4  6EF6               	movwf	tblptrl,c
 13723  0021D6  0EFE               	movlw	high __powers_
 13724  0021D8  2010               	addwfc	?i2___wmul+1,w,c
 13725  0021DA  6EF7               	movwf	tblptrh,c
 13726  0021DC                     	if	0	;There are less than 3 active tblptr bytes
 13727  0021DC                     	endif
 13728  0021DC  0009               	tblrd		*+
 13729  0021DE  CFF5 F018          	movff	tablat,i2___ftmul@f2
 13730  0021E2  0009               	tblrd		*+
 13731  0021E4  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 13732  0021E8  000A               	tblrd		*-
 13733  0021EA  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 13734  0021EE  EC85  F01C         	call	i2___ftmul	;wreg free
 13735  0021F2  D7A7               	goto	L7
 13736  0021F4                     i2l4360:
 13737                           
 13738                           ;doprnt.c: 440: return _powers_[scl];
 13739  0021F4  502A               	movf	i2scale@scl,w,c
 13740  0021F6  0D03               	mullw	3
 13741  0021F8  0EDC               	movlw	low __powers_
 13742  0021FA  24F3               	addwf	prodl,w,c
 13743  0021FC  6EF6               	movwf	tblptrl,c
 13744  0021FE  0EFE               	movlw	high __powers_
 13745  002200  20F4               	addwfc	prodh,w,c
 13746  002202  6EF7               	movwf	tblptrh,c
 13747  002204                     	if	0	;There are less than 3 active tblptr bytes
 13748  002204                     	endif
 13749  002204  0009               	tblrd		*+
 13750  002206  CFF5 F024          	movff	tablat,?i2_scale
 13751  00220A  0009               	tblrd		*+
 13752  00220C  CFF5 F025          	movff	tablat,?i2_scale+1
 13753  002210  000A               	tblrd		*-
 13754  002212  CFF5 F026          	movff	tablat,?i2_scale+2
 13755  002216  0012               	return	
 13756  002218                     __end_ofi2_scale:
 13757                           	opt stack 0
 13758                           pclatu	equ	0xFFB
 13759                           pclath	equ	0xFFA
 13760                           tblptru	equ	0xFF8
 13761                           tblptrh	equ	0xFF7
 13762                           tblptrl	equ	0xFF6
 13763                           tablat	equ	0xFF5
 13764                           prodh	equ	0xFF4
 13765                           prodl	equ	0xFF3
 13766                           intcon	equ	0xFF2
 13767                           intcon2	equ	0xFF1
 13768                           intcon3	equ	0xFF0
 13769                           postinc0	equ	0xFEE
 13770                           fsr0h	equ	0xFEA
 13771                           fsr0l	equ	0xFE9
 13772                           wreg	equ	0xFE8
 13773                           fsr1h	equ	0xFE2
 13774                           fsr1l	equ	0xFE1
 13775                           indf2	equ	0xFDF
 13776                           postinc2	equ	0xFDE
 13777                           postdec2	equ	0xFDD
 13778                           fsr2h	equ	0xFDA
 13779                           fsr2l	equ	0xFD9
 13780                           status	equ	0xFD8
 13781                           
 13782 ;; *************** function i2_putch *****************
 13783 ;; Defined at:
 13784 ;;		line 30 in file "lcd.c"
 13785 ;; Parameters:    Size  Location     Type
 13786 ;;  data            1    wreg     unsigned char 
 13787 ;; Auto vars:     Size  Location     Type
 13788 ;;  data            1    2[COMRAM] unsigned char 
 13789 ;; Return value:  Size  Location     Type
 13790 ;;                  1    wreg      void 
 13791 ;; Registers used:
 13792 ;;		wreg, status,2, status,0, cstack
 13793 ;; Tracked objects:
 13794 ;;		On entry : 0/0
 13795 ;;		On exit  : 0/0
 13796 ;;		Unchanged: 0/0
 13797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13799 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13801 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13802 ;;Total ram usage:        1 bytes
 13803 ;; Hardware stack levels used:    1
 13804 ;; Hardware stack levels required when called:    1
 13805 ;; This function calls:
 13806 ;;		i2_lcdNibble
 13807 ;; This function is called by:
 13808 ;;		i2_printf
 13809 ;; This function uses a non-reentrant model
 13810 ;;
 13811                           
 13812                           	psect	text49
 13813  004A66                     __ptext49:
 13814                           	opt stack 0
 13815  004A66                     i2_putch:
 13816                           	opt stack 21
 13817                           
 13818                           ;incstack = 0
 13819                           ;i2putch@data stored from wreg
 13820  004A66  6E03               	movwf	i2putch@data,c
 13821                           
 13822                           ;lcd.c: 31: LATDbits.LATD2 = 1;
 13823  004A68  848C               	bsf	3980,2,c	;volatile
 13824                           
 13825                           ;lcd.c: 32: lcdNibble(data);
 13826  004A6A  5003               	movf	i2putch@data,w,c
 13827  004A6C  EC26  F023         	call	i2_lcdNibble
 13828  004A70  0012               	return		;funcret
 13829  004A72                     __end_ofi2_putch:
 13830                           	opt stack 0
 13831                           pclatu	equ	0xFFB
 13832                           pclath	equ	0xFFA
 13833                           tblptru	equ	0xFF8
 13834                           tblptrh	equ	0xFF7
 13835                           tblptrl	equ	0xFF6
 13836                           tablat	equ	0xFF5
 13837                           prodh	equ	0xFF4
 13838                           prodl	equ	0xFF3
 13839                           intcon	equ	0xFF2
 13840                           intcon2	equ	0xFF1
 13841                           intcon3	equ	0xFF0
 13842                           postinc0	equ	0xFEE
 13843                           fsr0h	equ	0xFEA
 13844                           fsr0l	equ	0xFE9
 13845                           wreg	equ	0xFE8
 13846                           fsr1h	equ	0xFE2
 13847                           fsr1l	equ	0xFE1
 13848                           indf2	equ	0xFDF
 13849                           postinc2	equ	0xFDE
 13850                           postdec2	equ	0xFDD
 13851                           fsr2h	equ	0xFDA
 13852                           fsr2l	equ	0xFD9
 13853                           status	equ	0xFD8
 13854                           
 13855 ;; *************** function i2_lcdNibble *****************
 13856 ;; Defined at:
 13857 ;;		line 35 in file "lcd.c"
 13858 ;; Parameters:    Size  Location     Type
 13859 ;;  data            1    wreg     unsigned char 
 13860 ;; Auto vars:     Size  Location     Type
 13861 ;;  data            1    1[COMRAM] unsigned char 
 13862 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 13863 ;; Return value:  Size  Location     Type
 13864 ;;                  1    wreg      void 
 13865 ;; Registers used:
 13866 ;;		wreg, status,2, status,0
 13867 ;; Tracked objects:
 13868 ;;		On entry : 0/0
 13869 ;;		On exit  : 0/0
 13870 ;;		Unchanged: 0/0
 13871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13873 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13875 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13876 ;;Total ram usage:        2 bytes
 13877 ;; Hardware stack levels used:    1
 13878 ;; This function calls:
 13879 ;;		Nothing
 13880 ;; This function is called by:
 13881 ;;		i2_lcdInst
 13882 ;;		i2_putch
 13883 ;; This function uses a non-reentrant model
 13884 ;;
 13885                           
 13886                           	psect	text50
 13887  00464C                     __ptext50:
 13888                           	opt stack 0
 13889  00464C                     i2_lcdNibble:
 13890                           	opt stack 23
 13891                           
 13892                           ;incstack = 0
 13893                           ;i2lcdNibble@data stored from wreg
 13894  00464C  6E02               	movwf	i2lcdNibble@data,c
 13895                           
 13896                           ;lcd.c: 37: char temp = data & 0xF0;
 13897  00464E  5002               	movf	i2lcdNibble@data,w,c
 13898  004650  0BF0               	andlw	240
 13899  004652  6E01               	movwf	i2lcdNibble@temp,c
 13900                           
 13901                           ;lcd.c: 38: LATD = LATD & 0x0F;
 13902  004654  508C               	movf	3980,w,c	;volatile
 13903  004656  0B0F               	andlw	15
 13904  004658  6E8C               	movwf	3980,c	;volatile
 13905                           
 13906                           ;lcd.c: 39: LATD = temp | LATD;
 13907  00465A  5001               	movf	i2lcdNibble@temp,w,c
 13908  00465C  108C               	iorwf	3980,w,c	;volatile
 13909  00465E  6E8C               	movwf	3980,c	;volatile
 13910                           
 13911                           ;lcd.c: 41: LATDbits.LATD3 = 0;
 13912  004660  968C               	bcf	3980,3,c	;volatile
 13913                           
 13914                           ;lcd.c: 42: _delay((unsigned long)((25)*(8000000/4000000.0)));
 13915  004662  0E10               	movlw	16
 13916  004664                     i2u697_47:
 13917  004664  2EE8               	decfsz	wreg,f,c
 13918  004666  D7FE               	bra	i2u697_47
 13919  004668  D000               	nop2	
 13920                           
 13921                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 13922  00466A  868C               	bsf	3980,3,c	;volatile
 13923                           
 13924                           ;lcd.c: 44: _delay((unsigned long)((25)*(8000000/4000000.0)));
 13925  00466C  0E10               	movlw	16
 13926  00466E                     i2u698_47:
 13927  00466E  2EE8               	decfsz	wreg,f,c
 13928  004670  D7FE               	bra	i2u698_47
 13929  004672  D000               	nop2	
 13930                           
 13931                           ;lcd.c: 46: data = data << 4;
 13932  004674  3802               	swapf	i2lcdNibble@data,w,c
 13933  004676  0BF0               	andlw	240
 13934  004678  6E02               	movwf	i2lcdNibble@data,c
 13935                           
 13936                           ;lcd.c: 48: temp = data & 0xF0;
 13937  00467A  5002               	movf	i2lcdNibble@data,w,c
 13938  00467C  0BF0               	andlw	240
 13939  00467E  6E01               	movwf	i2lcdNibble@temp,c
 13940                           
 13941                           ;lcd.c: 49: LATD = LATD & 0x0F;
 13942  004680  508C               	movf	3980,w,c	;volatile
 13943  004682  0B0F               	andlw	15
 13944  004684  6E8C               	movwf	3980,c	;volatile
 13945                           
 13946                           ;lcd.c: 50: LATD = temp | LATD;
 13947  004686  5001               	movf	i2lcdNibble@temp,w,c
 13948  004688  108C               	iorwf	3980,w,c	;volatile
 13949  00468A  6E8C               	movwf	3980,c	;volatile
 13950                           
 13951                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 13952  00468C  968C               	bcf	3980,3,c	;volatile
 13953                           
 13954                           ;lcd.c: 53: _delay((unsigned long)((25)*(8000000/4000000.0)));
 13955  00468E  0E10               	movlw	16
 13956  004690                     i2u699_47:
 13957  004690  2EE8               	decfsz	wreg,f,c
 13958  004692  D7FE               	bra	i2u699_47
 13959  004694  D000               	nop2	
 13960                           
 13961                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 13962  004696  868C               	bsf	3980,3,c	;volatile
 13963                           
 13964                           ;lcd.c: 55: _delay((unsigned long)((25)*(8000000/4000000.0)));
 13965  004698  0E10               	movlw	16
 13966  00469A                     i2u700_47:
 13967  00469A  2EE8               	decfsz	wreg,f,c
 13968  00469C  D7FE               	bra	i2u700_47
 13969  00469E  D000               	nop2	
 13970  0046A0  0012               	return		;funcret
 13971  0046A2                     __end_ofi2_lcdNibble:
 13972                           	opt stack 0
 13973                           pclatu	equ	0xFFB
 13974                           pclath	equ	0xFFA
 13975                           tblptru	equ	0xFF8
 13976                           tblptrh	equ	0xFF7
 13977                           tblptrl	equ	0xFF6
 13978                           tablat	equ	0xFF5
 13979                           prodh	equ	0xFF4
 13980                           prodl	equ	0xFF3
 13981                           intcon	equ	0xFF2
 13982                           intcon2	equ	0xFF1
 13983                           intcon3	equ	0xFF0
 13984                           postinc0	equ	0xFEE
 13985                           fsr0h	equ	0xFEA
 13986                           fsr0l	equ	0xFE9
 13987                           wreg	equ	0xFE8
 13988                           fsr1h	equ	0xFE2
 13989                           fsr1l	equ	0xFE1
 13990                           indf2	equ	0xFDF
 13991                           postinc2	equ	0xFDE
 13992                           postdec2	equ	0xFDD
 13993                           fsr2h	equ	0xFDA
 13994                           fsr2l	equ	0xFD9
 13995                           status	equ	0xFD8
 13996                           
 13997 ;; *************** function i2_isdigit *****************
 13998 ;; Defined at:
 13999 ;;		line 8 in file "/Applications/microchip/xc8/v1.40/sources/common/isdigit.c"
 14000 ;; Parameters:    Size  Location     Type
 14001 ;;  c               1    wreg     unsigned char 
 14002 ;; Auto vars:     Size  Location     Type
 14003 ;;  c               1    2[COMRAM] unsigned char 
 14004 ;; Return value:  Size  Location     Type
 14005 ;;		None               void
 14006 ;; Registers used:
 14007 ;;		wreg, status,2, status,0
 14008 ;; Tracked objects:
 14009 ;;		On entry : 0/0
 14010 ;;		On exit  : 0/0
 14011 ;;		Unchanged: 0/0
 14012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14014 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14015 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14016 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14017 ;;Total ram usage:        3 bytes
 14018 ;; Hardware stack levels used:    1
 14019 ;; This function calls:
 14020 ;;		Nothing
 14021 ;; This function is called by:
 14022 ;;		i2_printf
 14023 ;; This function uses a non-reentrant model
 14024 ;;
 14025                           
 14026                           	psect	text51
 14027  0049BE                     __ptext51:
 14028                           	opt stack 0
 14029  0049BE                     i2_isdigit:
 14030                           	opt stack 22
 14031                           
 14032                           ;incstack = 0
 14033                           ;i2isdigit@c stored from wreg
 14034  0049BE  6E03               	movwf	i2isdigit@c,c
 14035  0049C0  0E00               	movlw	0
 14036  0049C2  6E02               	movwf	i2_isdigit$999,c
 14037  0049C4  0E3A               	movlw	58
 14038  0049C6  6003               	cpfslt	i2isdigit@c,c
 14039  0049C8  D005               	goto	i2l4564
 14040  0049CA  0E2F               	movlw	47
 14041  0049CC  6403               	cpfsgt	i2isdigit@c,c
 14042  0049CE  D002               	goto	i2l4564
 14043  0049D0  0E01               	movlw	1
 14044  0049D2  6E02               	movwf	i2_isdigit$999,c
 14045  0049D4                     i2l4564:
 14046  0049D4  C002  F001         	movff	i2_isdigit$999,??i2_isdigit
 14047  0049D8  3001               	rrcf	??i2_isdigit,w,c
 14048  0049DA  0012               	return	
 14049  0049DC                     __end_ofi2_isdigit:
 14050                           	opt stack 0
 14051                           pclatu	equ	0xFFB
 14052                           pclath	equ	0xFFA
 14053                           tblptru	equ	0xFF8
 14054                           tblptrh	equ	0xFF7
 14055                           tblptrl	equ	0xFF6
 14056                           tablat	equ	0xFF5
 14057                           prodh	equ	0xFF4
 14058                           prodl	equ	0xFF3
 14059                           intcon	equ	0xFF2
 14060                           intcon2	equ	0xFF1
 14061                           intcon3	equ	0xFF0
 14062                           postinc0	equ	0xFEE
 14063                           fsr0h	equ	0xFEA
 14064                           fsr0l	equ	0xFE9
 14065                           wreg	equ	0xFE8
 14066                           fsr1h	equ	0xFE2
 14067                           fsr1l	equ	0xFE1
 14068                           indf2	equ	0xFDF
 14069                           postinc2	equ	0xFDE
 14070                           postdec2	equ	0xFDD
 14071                           fsr2h	equ	0xFDA
 14072                           fsr2l	equ	0xFD9
 14073                           status	equ	0xFD8
 14074                           
 14075 ;; *************** function i2_fround *****************
 14076 ;; Defined at:
 14077 ;;		line 409 in file "/Applications/microchip/xc8/v1.40/sources/common/doprnt.c"
 14078 ;; Parameters:    Size  Location     Type
 14079 ;;  prec            1    wreg     unsigned char 
 14080 ;; Auto vars:     Size  Location     Type
 14081 ;;  prec            1   44[COMRAM] unsigned char 
 14082 ;; Return value:  Size  Location     Type
 14083 ;;                  3   35[COMRAM] unsigned char 
 14084 ;; Registers used:
 14085 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14086 ;; Tracked objects:
 14087 ;;		On entry : 0/0
 14088 ;;		On exit  : 0/0
 14089 ;;		Unchanged: 0/0
 14090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14091 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14092 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14094 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14095 ;;Total ram usage:       10 bytes
 14096 ;; Hardware stack levels used:    1
 14097 ;; Hardware stack levels required when called:    2
 14098 ;; This function calls:
 14099 ;;		i2___awdiv
 14100 ;;		i2___awmod
 14101 ;;		i2___ftmul
 14102 ;;		i2___wmul
 14103 ;; This function is called by:
 14104 ;;		i2_printf
 14105 ;; This function uses a non-reentrant model
 14106 ;;
 14107                           
 14108                           	psect	text52
 14109  00272C                     __ptext52:
 14110                           	opt stack 0
 14111  00272C                     i2_fround:
 14112                           	opt stack 20
 14113                           
 14114                           ;incstack = 0
 14115                           ;i2fround@prec stored from wreg
 14116  00272C  6E2D               	movwf	i2fround@prec,c
 14117                           
 14118                           ;doprnt.c: 413: if(prec>=110)
 14119  00272E  0E6D               	movlw	109
 14120  002730  642D               	cpfsgt	i2fround@prec,c
 14121  002732  D09F               	goto	i2l4314
 14122                           
 14123                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 14124  002734  0E00               	movlw	0
 14125  002736  6E12               	movwf	i2___wmul@multiplicand+1,c
 14126  002738  0E03               	movlw	3
 14127  00273A  6E11               	movwf	i2___wmul@multiplicand,c
 14128  00273C  0E00               	movlw	0
 14129  00273E  6E0A               	movwf	i2___awdiv@divisor+1,c
 14130  002740  0E0A               	movlw	10
 14131  002742  6E09               	movwf	i2___awdiv@divisor,c
 14132  002744  0E00               	movlw	0
 14133  002746  6E04               	movwf	i2___awmod@divisor+1,c
 14134  002748  0E64               	movlw	100
 14135  00274A  6E03               	movwf	i2___awmod@divisor,c
 14136  00274C  C02D  F001         	movff	i2fround@prec,i2___awmod@dividend
 14137  002750  6A02               	clrf	i2___awmod@dividend+1,c
 14138  002752  ECFB  F021         	call	i2___awmod	;wreg free
 14139  002756  C001  F007         	movff	?i2___awmod,i2___awdiv@dividend
 14140  00275A  C002  F008         	movff	?i2___awmod+1,i2___awdiv@dividend+1
 14141  00275E  EC3A  F021         	call	i2___awdiv	;wreg free
 14142  002762  0E09               	movlw	9
 14143  002764  2407               	addwf	?i2___awdiv,w,c
 14144  002766  6E0F               	movwf	i2___wmul@multiplier,c
 14145  002768  0E00               	movlw	0
 14146  00276A  2008               	addwfc	?i2___awdiv+1,w,c
 14147  00276C  6E10               	movwf	i2___wmul@multiplier+1,c
 14148  00276E  ECBA  F024         	call	i2___wmul	;wreg free
 14149  002772  0EB5               	movlw	low __npowers_
 14150  002774  240F               	addwf	?i2___wmul,w,c
 14151  002776  6EF6               	movwf	tblptrl,c
 14152  002778  0EFE               	movlw	high __npowers_
 14153  00277A  2010               	addwfc	?i2___wmul+1,w,c
 14154  00277C  6EF7               	movwf	tblptrh,c
 14155  00277E                     	if	0	;There are less than 3 active tblptr bytes
 14156  00277E                     	endif
 14157  00277E  0009               	tblrd		*+
 14158  002780  CFF5 F018          	movff	tablat,i2___ftmul@f2
 14159  002784  0009               	tblrd		*+
 14160  002786  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 14161  00278A  000A               	tblrd		*-
 14162  00278C  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 14163  002790  0E00               	movlw	0
 14164  002792  6E0A               	movwf	i2___awdiv@divisor+1,c
 14165  002794  0E64               	movlw	100
 14166  002796  6E09               	movwf	i2___awdiv@divisor,c
 14167  002798  C02D  F007         	movff	i2fround@prec,i2___awdiv@dividend
 14168  00279C  6A08               	clrf	i2___awdiv@dividend+1,c
 14169  00279E  EC3A  F021         	call	i2___awdiv	;wreg free
 14170  0027A2  0E12               	movlw	18
 14171  0027A4  2407               	addwf	?i2___awdiv,w,c
 14172  0027A6  6E0F               	movwf	i2___wmul@multiplier,c
 14173  0027A8  0E00               	movlw	0
 14174  0027AA  2008               	addwfc	?i2___awdiv+1,w,c
 14175  0027AC  6E10               	movwf	i2___wmul@multiplier+1,c
 14176  0027AE  0E00               	movlw	0
 14177  0027B0  6E12               	movwf	i2___wmul@multiplicand+1,c
 14178  0027B2  0E03               	movlw	3
 14179  0027B4  6E11               	movwf	i2___wmul@multiplicand,c
 14180  0027B6  ECBA  F024         	call	i2___wmul	;wreg free
 14181  0027BA  0EB5               	movlw	low __npowers_
 14182  0027BC  240F               	addwf	?i2___wmul,w,c
 14183  0027BE  6EF6               	movwf	tblptrl,c
 14184  0027C0  0EFE               	movlw	high __npowers_
 14185  0027C2  2010               	addwfc	?i2___wmul+1,w,c
 14186  0027C4  6EF7               	movwf	tblptrh,c
 14187  0027C6                     	if	0	;There are less than 3 active tblptr bytes
 14188  0027C6                     	endif
 14189  0027C6  0009               	tblrd		*+
 14190  0027C8  CFF5 F015          	movff	tablat,i2___ftmul@f1
 14191  0027CC  0009               	tblrd		*+
 14192  0027CE  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 14193  0027D2  000A               	tblrd		*-
 14194  0027D4  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 14195  0027D8  EC85  F01C         	call	i2___ftmul	;wreg free
 14196  0027DC  C015  F02A         	movff	?i2___ftmul,i2_fround$1511
 14197  0027E0  C016  F02B         	movff	?i2___ftmul+1,i2_fround$1511+1
 14198  0027E4  C017  F02C         	movff	?i2___ftmul+2,i2_fround$1511+2
 14199                           
 14200                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 14201  0027E8  0E00               	movlw	0
 14202  0027EA  6E12               	movwf	i2___wmul@multiplicand+1,c
 14203  0027EC  0E03               	movlw	3
 14204  0027EE  6E11               	movwf	i2___wmul@multiplicand,c
 14205  0027F0  0E00               	movlw	0
 14206  0027F2  6E04               	movwf	i2___awmod@divisor+1,c
 14207  0027F4  0E0A               	movlw	10
 14208  0027F6  6E03               	movwf	i2___awmod@divisor,c
 14209  0027F8  C02D  F001         	movff	i2fround@prec,i2___awmod@dividend
 14210  0027FC  6A02               	clrf	i2___awmod@dividend+1,c
 14211  0027FE  ECFB  F021         	call	i2___awmod	;wreg free
 14212  002802  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 14213  002806  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 14214  00280A  ECBA  F024         	call	i2___wmul	;wreg free
 14215  00280E  0EB5               	movlw	low __npowers_
 14216  002810  240F               	addwf	?i2___wmul,w,c
 14217  002812  6EF6               	movwf	tblptrl,c
 14218  002814  0EFE               	movlw	high __npowers_
 14219  002816  2010               	addwfc	?i2___wmul+1,w,c
 14220  002818  6EF7               	movwf	tblptrh,c
 14221  00281A                     	if	0	;There are less than 3 active tblptr bytes
 14222  00281A                     	endif
 14223  00281A  0009               	tblrd		*+
 14224  00281C  CFF5 F018          	movff	tablat,i2___ftmul@f2
 14225  002820  0009               	tblrd		*+
 14226  002822  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 14227  002826  000A               	tblrd		*-
 14228  002828  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 14229  00282C  C02A  F015         	movff	i2_fround$1511,i2___ftmul@f1
 14230  002830  C02B  F016         	movff	i2_fround$1511+1,i2___ftmul@f1+1
 14231  002834  C02C  F017         	movff	i2_fround$1511+2,i2___ftmul@f1+2
 14232  002838  EC85  F01C         	call	i2___ftmul	;wreg free
 14233  00283C  C015  F027         	movff	?i2___ftmul,i2_fround$1512
 14234  002840  C016  F028         	movff	?i2___ftmul+1,i2_fround$1512+1
 14235  002844  C017  F029         	movff	?i2___ftmul+2,i2_fround$1512+2
 14236                           
 14237                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 14238  002848  C027  F015         	movff	i2_fround$1512,i2___ftmul@f1
 14239  00284C  C028  F016         	movff	i2_fround$1512+1,i2___ftmul@f1+1
 14240  002850  C029  F017         	movff	i2_fround$1512+2,i2___ftmul@f1+2
 14241  002854  0E00               	movlw	0
 14242  002856  6E18               	movwf	i2___ftmul@f2,c
 14243  002858  0E00               	movlw	0
 14244  00285A  6E19               	movwf	i2___ftmul@f2+1,c
 14245  00285C  0E3F               	movlw	63
 14246  00285E  6E1A               	movwf	i2___ftmul@f2+2,c
 14247  002860  EC85  F01C         	call	i2___ftmul	;wreg free
 14248  002864  C015  F024         	movff	?i2___ftmul,?i2_fround
 14249  002868  C016  F025         	movff	?i2___ftmul+1,?i2_fround+1
 14250  00286C  C017  F026         	movff	?i2___ftmul+2,?i2_fround+2
 14251  002870  0012               	return	
 14252  002872                     i2l4314:
 14253                           
 14254                           ;doprnt.c: 415: else if(prec > 10)
 14255  002872  0E0A               	movlw	10
 14256  002874  642D               	cpfsgt	i2fround@prec,c
 14257  002876  D05D               	goto	i2l4322
 14258                           
 14259                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 14260  002878  0E00               	movlw	0
 14261  00287A  6E12               	movwf	i2___wmul@multiplicand+1,c
 14262  00287C  0E03               	movlw	3
 14263  00287E  6E11               	movwf	i2___wmul@multiplicand,c
 14264  002880  0E00               	movlw	0
 14265  002882  6E04               	movwf	i2___awmod@divisor+1,c
 14266  002884  0E0A               	movlw	10
 14267  002886  6E03               	movwf	i2___awmod@divisor,c
 14268  002888  C02D  F001         	movff	i2fround@prec,i2___awmod@dividend
 14269  00288C  6A02               	clrf	i2___awmod@dividend+1,c
 14270  00288E  ECFB  F021         	call	i2___awmod	;wreg free
 14271  002892  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 14272  002896  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 14273  00289A  ECBA  F024         	call	i2___wmul	;wreg free
 14274  00289E  0EB5               	movlw	low __npowers_
 14275  0028A0  240F               	addwf	?i2___wmul,w,c
 14276  0028A2  6EF6               	movwf	tblptrl,c
 14277  0028A4  0EFE               	movlw	high __npowers_
 14278  0028A6  2010               	addwfc	?i2___wmul+1,w,c
 14279  0028A8  6EF7               	movwf	tblptrh,c
 14280  0028AA                     	if	0	;There are less than 3 active tblptr bytes
 14281  0028AA                     	endif
 14282  0028AA  0009               	tblrd		*+
 14283  0028AC  CFF5 F018          	movff	tablat,i2___ftmul@f2
 14284  0028B0  0009               	tblrd		*+
 14285  0028B2  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 14286  0028B6  000A               	tblrd		*-
 14287  0028B8  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 14288  0028BC  0E00               	movlw	0
 14289  0028BE  6E0A               	movwf	i2___awdiv@divisor+1,c
 14290  0028C0  0E0A               	movlw	10
 14291  0028C2  6E09               	movwf	i2___awdiv@divisor,c
 14292  0028C4  C02D  F007         	movff	i2fround@prec,i2___awdiv@dividend
 14293  0028C8  6A08               	clrf	i2___awdiv@dividend+1,c
 14294  0028CA  EC3A  F021         	call	i2___awdiv	;wreg free
 14295  0028CE  0E09               	movlw	9
 14296  0028D0  2407               	addwf	?i2___awdiv,w,c
 14297  0028D2  6E0F               	movwf	i2___wmul@multiplier,c
 14298  0028D4  0E00               	movlw	0
 14299  0028D6  2008               	addwfc	?i2___awdiv+1,w,c
 14300  0028D8  6E10               	movwf	i2___wmul@multiplier+1,c
 14301  0028DA  0E00               	movlw	0
 14302  0028DC  6E12               	movwf	i2___wmul@multiplicand+1,c
 14303  0028DE  0E03               	movlw	3
 14304  0028E0  6E11               	movwf	i2___wmul@multiplicand,c
 14305  0028E2  ECBA  F024         	call	i2___wmul	;wreg free
 14306  0028E6  0EB5               	movlw	low __npowers_
 14307  0028E8  240F               	addwf	?i2___wmul,w,c
 14308  0028EA  6EF6               	movwf	tblptrl,c
 14309  0028EC  0EFE               	movlw	high __npowers_
 14310  0028EE  2010               	addwfc	?i2___wmul+1,w,c
 14311  0028F0  6EF7               	movwf	tblptrh,c
 14312  0028F2                     	if	0	;There are less than 3 active tblptr bytes
 14313  0028F2                     	endif
 14314  0028F2  0009               	tblrd		*+
 14315  0028F4  CFF5 F015          	movff	tablat,i2___ftmul@f1
 14316  0028F8  0009               	tblrd		*+
 14317  0028FA  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 14318  0028FE  000A               	tblrd		*-
 14319  002900  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 14320  002904  EC85  F01C         	call	i2___ftmul	;wreg free
 14321  002908  C015  F02A         	movff	?i2___ftmul,i2_fround$1511
 14322  00290C  C016  F02B         	movff	?i2___ftmul+1,i2_fround$1511+1
 14323  002910  C017  F02C         	movff	?i2___ftmul+2,i2_fround$1511+2
 14324                           
 14325                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 14326  002914  C02A  F015         	movff	i2_fround$1511,i2___ftmul@f1
 14327  002918  C02B  F016         	movff	i2_fround$1511+1,i2___ftmul@f1+1
 14328  00291C  C02C  F017         	movff	i2_fround$1511+2,i2___ftmul@f1+2
 14329  002920  0E00               	movlw	0
 14330  002922  6E18               	movwf	i2___ftmul@f2,c
 14331  002924  0E00               	movlw	0
 14332  002926  6E19               	movwf	i2___ftmul@f2+1,c
 14333  002928  0E3F               	movlw	63
 14334  00292A  6E1A               	movwf	i2___ftmul@f2+2,c
 14335  00292C  EC85  F01C         	call	i2___ftmul	;wreg free
 14336  002930  D799               	goto	L8
 14337  002932                     i2l4322:
 14338                           
 14339                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 14340  002932  502D               	movf	i2fround@prec,w,c
 14341  002934  0D03               	mullw	3
 14342  002936  0EB5               	movlw	low __npowers_
 14343  002938  24F3               	addwf	prodl,w,c
 14344  00293A  6EF6               	movwf	tblptrl,c
 14345  00293C  0EFE               	movlw	high __npowers_
 14346  00293E  20F4               	addwfc	prodh,w,c
 14347  002940  6EF7               	movwf	tblptrh,c
 14348  002942                     	if	0	;There are less than 3 active tblptr bytes
 14349  002942                     	endif
 14350  002942  0009               	tblrd		*+
 14351  002944  CFF5 F015          	movff	tablat,i2___ftmul@f1
 14352  002948  0009               	tblrd		*+
 14353  00294A  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 14354  00294E  000A               	tblrd		*-
 14355  002950  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 14356  002954  0E00               	movlw	0
 14357  002956  6E18               	movwf	i2___ftmul@f2,c
 14358  002958  0E00               	movlw	0
 14359  00295A  6E19               	movwf	i2___ftmul@f2+1,c
 14360  00295C  0E3F               	movlw	63
 14361  00295E  6E1A               	movwf	i2___ftmul@f2+2,c
 14362  002960  EC85  F01C         	call	i2___ftmul	;wreg free
 14363  002964  C015  F024         	movff	?i2___ftmul,?i2_fround
 14364  002968  C016  F025         	movff	?i2___ftmul+1,?i2_fround+1
 14365  00296C  C017  F026         	movff	?i2___ftmul+2,?i2_fround+2
 14366  002970  0012               	return	
 14367  002972                     __end_ofi2_fround:
 14368                           	opt stack 0
 14369                           pclatu	equ	0xFFB
 14370                           pclath	equ	0xFFA
 14371                           tblptru	equ	0xFF8
 14372                           tblptrh	equ	0xFF7
 14373                           tblptrl	equ	0xFF6
 14374                           tablat	equ	0xFF5
 14375                           prodh	equ	0xFF4
 14376                           prodl	equ	0xFF3
 14377                           intcon	equ	0xFF2
 14378                           intcon2	equ	0xFF1
 14379                           intcon3	equ	0xFF0
 14380                           postinc0	equ	0xFEE
 14381                           fsr0h	equ	0xFEA
 14382                           fsr0l	equ	0xFE9
 14383                           wreg	equ	0xFE8
 14384                           fsr1h	equ	0xFE2
 14385                           fsr1l	equ	0xFE1
 14386                           indf2	equ	0xFDF
 14387                           postinc2	equ	0xFDE
 14388                           postdec2	equ	0xFDD
 14389                           fsr2h	equ	0xFDA
 14390                           fsr2l	equ	0xFD9
 14391                           status	equ	0xFD8
 14392                           
 14393 ;; *************** function i2___wmul *****************
 14394 ;; Defined at:
 14395 ;;		line 15 in file "/Applications/microchip/xc8/v1.40/sources/common/Umul16.c"
 14396 ;; Parameters:    Size  Location     Type
 14397 ;;  multiplier      2   14[COMRAM] unsigned int 
 14398 ;;  multiplicand    2   16[COMRAM] unsigned int 
 14399 ;; Auto vars:     Size  Location     Type
 14400 ;;  __wmul          2   18[COMRAM] unsigned int 
 14401 ;; Return value:  Size  Location     Type
 14402 ;;                  2   14[COMRAM] unsigned int 
 14403 ;; Registers used:
 14404 ;;		wreg, status,2, status,0, prodl, prodh
 14405 ;; Tracked objects:
 14406 ;;		On entry : 0/0
 14407 ;;		On exit  : 0/0
 14408 ;;		Unchanged: 0/0
 14409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14410 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14411 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14413 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14414 ;;Total ram usage:        6 bytes
 14415 ;; Hardware stack levels used:    1
 14416 ;; This function calls:
 14417 ;;		Nothing
 14418 ;; This function is called by:
 14419 ;;		i2_fround
 14420 ;;		i2_scale
 14421 ;;		i2_printf
 14422 ;; This function uses a non-reentrant model
 14423 ;;
 14424                           
 14425                           	psect	text53
 14426  004974                     __ptext53:
 14427                           	opt stack 0
 14428  004974                     i2___wmul:
 14429                           	opt stack 21
 14430                           
 14431                           ;incstack = 0
 14432  004974  500F               	movf	i2___wmul@multiplier,w,c
 14433  004976  0211               	mulwf	i2___wmul@multiplicand,c
 14434  004978  CFF3 F013          	movff	prodl,i2___wmul@product
 14435  00497C  CFF4 F014          	movff	prodh,i2___wmul@product+1
 14436  004980  500F               	movf	i2___wmul@multiplier,w,c
 14437  004982  0212               	mulwf	i2___wmul@multiplicand+1,c
 14438  004984  50F3               	movf	prodl,w,c
 14439  004986  2614               	addwf	i2___wmul@product+1,f,c
 14440  004988  5010               	movf	i2___wmul@multiplier+1,w,c
 14441  00498A  0211               	mulwf	i2___wmul@multiplicand,c
 14442  00498C  50F3               	movf	prodl,w,c
 14443  00498E  2614               	addwf	i2___wmul@product+1,f,c
 14444  004990  C013  F00F         	movff	i2___wmul@product,?i2___wmul
 14445  004994  C014  F010         	movff	i2___wmul@product+1,?i2___wmul+1
 14446  004998  0012               	return	
 14447  00499A                     __end_ofi2___wmul:
 14448                           	opt stack 0
 14449                           pclatu	equ	0xFFB
 14450                           pclath	equ	0xFFA
 14451                           tblptru	equ	0xFF8
 14452                           tblptrh	equ	0xFF7
 14453                           tblptrl	equ	0xFF6
 14454                           tablat	equ	0xFF5
 14455                           prodh	equ	0xFF4
 14456                           prodl	equ	0xFF3
 14457                           intcon	equ	0xFF2
 14458                           intcon2	equ	0xFF1
 14459                           intcon3	equ	0xFF0
 14460                           postinc0	equ	0xFEE
 14461                           fsr0h	equ	0xFEA
 14462                           fsr0l	equ	0xFE9
 14463                           wreg	equ	0xFE8
 14464                           fsr1h	equ	0xFE2
 14465                           fsr1l	equ	0xFE1
 14466                           indf2	equ	0xFDF
 14467                           postinc2	equ	0xFDE
 14468                           postdec2	equ	0xFDD
 14469                           fsr2h	equ	0xFDA
 14470                           fsr2l	equ	0xFD9
 14471                           status	equ	0xFD8
 14472                           
 14473 ;; *************** function i2___ftmul *****************
 14474 ;; Defined at:
 14475 ;;		line 62 in file "/Applications/microchip/xc8/v1.40/sources/common/ftmul.c"
 14476 ;; Parameters:    Size  Location     Type
 14477 ;;  f1              3   20[COMRAM] float 
 14478 ;;  f2              3   23[COMRAM] float 
 14479 ;; Auto vars:     Size  Location     Type
 14480 ;;  __ftmul         3   30[COMRAM] unsigned um
 14481 ;;  __ftmul         1   34[COMRAM] unsigned char 
 14482 ;;  __ftmul         1   33[COMRAM] unsigned char 
 14483 ;;  __ftmul         1   29[COMRAM] unsigned char 
 14484 ;; Return value:  Size  Location     Type
 14485 ;;                  3   20[COMRAM] float 
 14486 ;; Registers used:
 14487 ;;		wreg, status,2, status,0, cstack
 14488 ;; Tracked objects:
 14489 ;;		On entry : 0/0
 14490 ;;		On exit  : 0/0
 14491 ;;		Unchanged: 0/0
 14492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14493 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14494 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14495 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14496 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14497 ;;Total ram usage:       15 bytes
 14498 ;; Hardware stack levels used:    1
 14499 ;; Hardware stack levels required when called:    1
 14500 ;; This function calls:
 14501 ;;		i2___ftpack
 14502 ;; This function is called by:
 14503 ;;		i2_fround
 14504 ;;		i2_scale
 14505 ;;		i2_printf
 14506 ;; This function uses a non-reentrant model
 14507 ;;
 14508                           
 14509                           	psect	text54
 14510  00390A                     __ptext54:
 14511                           	opt stack 0
 14512  00390A                     i2___ftmul:
 14513                           	opt stack 20
 14514                           
 14515                           ;incstack = 0
 14516  00390A  C017  F01B         	movff	i2___ftmul@f1+2,??i2___ftmul
 14517  00390E  6A1C               	clrf	(??i2___ftmul+1)& (0+255),c
 14518  003910  6A1D               	clrf	(??i2___ftmul+2)& (0+255),c
 14519  003912  3416               	rlcf	i2___ftmul@f1+1,w,c
 14520  003914  361B               	rlcf	??i2___ftmul& (0+255),f,c
 14521  003916  E301               	bnc	u431_41
 14522  003918  801C               	bsf	(??i2___ftmul+1)& (0+255),0,c
 14523  00391A                     u431_41:
 14524  00391A  501B               	movf	??i2___ftmul,w,c
 14525  00391C  6E1E               	movwf	i2___ftmul@exp,c
 14526  00391E  501E               	movf	i2___ftmul@exp,w,c
 14527  003920  A4D8               	btfss	status,2,c
 14528  003922  D007               	goto	i2l3938
 14529  003924  0E00               	movlw	0
 14530  003926  6E15               	movwf	?i2___ftmul,c
 14531  003928  0E00               	movlw	0
 14532  00392A  6E16               	movwf	?i2___ftmul+1,c
 14533  00392C  0E00               	movlw	0
 14534  00392E  6E17               	movwf	?i2___ftmul+2,c
 14535  003930  0012               	return	
 14536  003932                     i2l3938:
 14537  003932  C01A  F01B         	movff	i2___ftmul@f2+2,??i2___ftmul
 14538  003936  6A1C               	clrf	(??i2___ftmul+1)& (0+255),c
 14539  003938  6A1D               	clrf	(??i2___ftmul+2)& (0+255),c
 14540  00393A  3419               	rlcf	i2___ftmul@f2+1,w,c
 14541  00393C  361B               	rlcf	??i2___ftmul& (0+255),f,c
 14542  00393E  E301               	bnc	u433_41
 14543  003940  801C               	bsf	(??i2___ftmul+1)& (0+255),0,c
 14544  003942                     u433_41:
 14545  003942  501B               	movf	??i2___ftmul,w,c
 14546  003944  6E23               	movwf	i2___ftmul@sign,c
 14547  003946  5023               	movf	i2___ftmul@sign,w,c
 14548  003948  A4D8               	btfss	status,2,c
 14549  00394A  D007               	goto	i2l3944
 14550  00394C  0E00               	movlw	0
 14551  00394E  6E15               	movwf	?i2___ftmul,c
 14552  003950  0E00               	movlw	0
 14553  003952  6E16               	movwf	?i2___ftmul+1,c
 14554  003954  0E00               	movlw	0
 14555  003956  6E17               	movwf	?i2___ftmul+2,c
 14556  003958  0012               	return	
 14557  00395A                     i2l3944:
 14558  00395A  5023               	movf	i2___ftmul@sign,w,c
 14559  00395C  0F7B               	addlw	123
 14560  00395E  261E               	addwf	i2___ftmul@exp,f,c
 14561  003960  C017  F023         	movff	i2___ftmul@f1+2,i2___ftmul@sign
 14562  003964  501A               	movf	i2___ftmul@f2+2,w,c
 14563  003966  1A23               	xorwf	i2___ftmul@sign,f,c
 14564  003968  0E80               	movlw	128
 14565  00396A  1623               	andwf	i2___ftmul@sign,f,c
 14566  00396C  8E16               	bsf	i2___ftmul@f1+1,7,c
 14567  00396E  8E19               	bsf	i2___ftmul@f2+1,7,c
 14568  003970  0EFF               	movlw	255
 14569  003972  1618               	andwf	i2___ftmul@f2,f,c
 14570  003974  0EFF               	movlw	255
 14571  003976  1619               	andwf	i2___ftmul@f2+1,f,c
 14572  003978  0E00               	movlw	0
 14573  00397A  161A               	andwf	i2___ftmul@f2+2,f,c
 14574  00397C  0E00               	movlw	0
 14575  00397E  6E1F               	movwf	i2___ftmul@f3_as_product,c
 14576  003980  0E00               	movlw	0
 14577  003982  6E20               	movwf	i2___ftmul@f3_as_product+1,c
 14578  003984  0E00               	movlw	0
 14579  003986  6E21               	movwf	i2___ftmul@f3_as_product+2,c
 14580  003988  0E07               	movlw	7
 14581  00398A  6E22               	movwf	i2___ftmul@cntr,c
 14582  00398C                     i2l3958:
 14583  00398C  A015               	btfss	i2___ftmul@f1,0,c
 14584  00398E  D006               	goto	i2l3962
 14585  003990  5018               	movf	i2___ftmul@f2,w,c
 14586  003992  261F               	addwf	i2___ftmul@f3_as_product,f,c
 14587  003994  5019               	movf	i2___ftmul@f2+1,w,c
 14588  003996  2220               	addwfc	i2___ftmul@f3_as_product+1,f,c
 14589  003998  501A               	movf	i2___ftmul@f2+2,w,c
 14590  00399A  2221               	addwfc	i2___ftmul@f3_as_product+2,f,c
 14591  00399C                     i2l3962:
 14592  00399C  90D8               	bcf	status,0,c
 14593  00399E  3217               	rrcf	i2___ftmul@f1+2,f,c
 14594  0039A0  3216               	rrcf	i2___ftmul@f1+1,f,c
 14595  0039A2  3215               	rrcf	i2___ftmul@f1,f,c
 14596  0039A4  90D8               	bcf	status,0,c
 14597  0039A6  3618               	rlcf	i2___ftmul@f2,f,c
 14598  0039A8  3619               	rlcf	i2___ftmul@f2+1,f,c
 14599  0039AA  361A               	rlcf	i2___ftmul@f2+2,f,c
 14600  0039AC  2E22               	decfsz	i2___ftmul@cntr,f,c
 14601  0039AE  D7EE               	goto	i2l3958
 14602  0039B0  0E09               	movlw	9
 14603  0039B2  6E22               	movwf	i2___ftmul@cntr,c
 14604  0039B4                     i2l3968:
 14605  0039B4  A015               	btfss	i2___ftmul@f1,0,c
 14606  0039B6  D006               	goto	i2l3972
 14607  0039B8  5018               	movf	i2___ftmul@f2,w,c
 14608  0039BA  261F               	addwf	i2___ftmul@f3_as_product,f,c
 14609  0039BC  5019               	movf	i2___ftmul@f2+1,w,c
 14610  0039BE  2220               	addwfc	i2___ftmul@f3_as_product+1,f,c
 14611  0039C0  501A               	movf	i2___ftmul@f2+2,w,c
 14612  0039C2  2221               	addwfc	i2___ftmul@f3_as_product+2,f,c
 14613  0039C4                     i2l3972:
 14614  0039C4  90D8               	bcf	status,0,c
 14615  0039C6  3217               	rrcf	i2___ftmul@f1+2,f,c
 14616  0039C8  3216               	rrcf	i2___ftmul@f1+1,f,c
 14617  0039CA  3215               	rrcf	i2___ftmul@f1,f,c
 14618  0039CC  90D8               	bcf	status,0,c
 14619  0039CE  3221               	rrcf	i2___ftmul@f3_as_product+2,f,c
 14620  0039D0  3220               	rrcf	i2___ftmul@f3_as_product+1,f,c
 14621  0039D2  321F               	rrcf	i2___ftmul@f3_as_product,f,c
 14622  0039D4  2E22               	decfsz	i2___ftmul@cntr,f,c
 14623  0039D6  D7EE               	goto	i2l3968
 14624  0039D8  C01F  F001         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
 14625  0039DC  C020  F002         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
 14626  0039E0  C021  F003         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
 14627  0039E4  C01E  F004         	movff	i2___ftmul@exp,i2___ftpack@exp
 14628  0039E8  C023  F005         	movff	i2___ftmul@sign,i2___ftpack@sign
 14629  0039EC  EC55  F01F         	call	i2___ftpack	;wreg free
 14630  0039F0  C001  F015         	movff	?i2___ftpack,?i2___ftmul
 14631  0039F4  C002  F016         	movff	?i2___ftpack+1,?i2___ftmul+1
 14632  0039F8  C003  F017         	movff	?i2___ftpack+2,?i2___ftmul+2
 14633  0039FC  0012               	return	
 14634  0039FE                     __end_ofi2___ftmul:
 14635                           	opt stack 0
 14636                           pclatu	equ	0xFFB
 14637                           pclath	equ	0xFFA
 14638                           tblptru	equ	0xFF8
 14639                           tblptrh	equ	0xFF7
 14640                           tblptrl	equ	0xFF6
 14641                           tablat	equ	0xFF5
 14642                           prodh	equ	0xFF4
 14643                           prodl	equ	0xFF3
 14644                           intcon	equ	0xFF2
 14645                           intcon2	equ	0xFF1
 14646                           intcon3	equ	0xFF0
 14647                           postinc0	equ	0xFEE
 14648                           fsr0h	equ	0xFEA
 14649                           fsr0l	equ	0xFE9
 14650                           wreg	equ	0xFE8
 14651                           fsr1h	equ	0xFE2
 14652                           fsr1l	equ	0xFE1
 14653                           indf2	equ	0xFDF
 14654                           postinc2	equ	0xFDE
 14655                           postdec2	equ	0xFDD
 14656                           fsr2h	equ	0xFDA
 14657                           fsr2l	equ	0xFD9
 14658                           status	equ	0xFD8
 14659                           
 14660 ;; *************** function i2___awmod *****************
 14661 ;; Defined at:
 14662 ;;		line 8 in file "/Applications/microchip/xc8/v1.40/sources/common/awmod.c"
 14663 ;; Parameters:    Size  Location     Type
 14664 ;;  dividend        2    0[COMRAM] int 
 14665 ;;  divisor         2    2[COMRAM] int 
 14666 ;; Auto vars:     Size  Location     Type
 14667 ;;  __awmod         1    5[COMRAM] unsigned char 
 14668 ;;  __awmod         1    4[COMRAM] unsigned char 
 14669 ;; Return value:  Size  Location     Type
 14670 ;;                  2    0[COMRAM] int 
 14671 ;; Registers used:
 14672 ;;		wreg, status,2, status,0
 14673 ;; Tracked objects:
 14674 ;;		On entry : 0/0
 14675 ;;		On exit  : 0/0
 14676 ;;		Unchanged: 0/0
 14677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14678 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14679 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14681 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14682 ;;Total ram usage:        6 bytes
 14683 ;; Hardware stack levels used:    1
 14684 ;; This function calls:
 14685 ;;		Nothing
 14686 ;; This function is called by:
 14687 ;;		i2_fround
 14688 ;;		i2_scale
 14689 ;; This function uses a non-reentrant model
 14690 ;;
 14691                           
 14692                           	psect	text55
 14693  0043F6                     __ptext55:
 14694                           	opt stack 0
 14695  0043F6                     i2___awmod:
 14696                           	opt stack 21
 14697                           
 14698                           ;incstack = 0
 14699  0043F6  0E00               	movlw	0
 14700  0043F8  6E06               	movwf	i2___awmod@sign,c
 14701  0043FA  AE02               	btfss	i2___awmod@dividend+1,7,c
 14702  0043FC  D006               	goto	i2l3834
 14703  0043FE  6C01               	negf	i2___awmod@dividend,c
 14704  004400  1E02               	comf	i2___awmod@dividend+1,f,c
 14705  004402  B0D8               	btfsc	status,0,c
 14706  004404  2A02               	incf	i2___awmod@dividend+1,f,c
 14707  004406  0E01               	movlw	1
 14708  004408  6E06               	movwf	i2___awmod@sign,c
 14709  00440A                     i2l3834:
 14710  00440A  AE04               	btfss	i2___awmod@divisor+1,7,c
 14711  00440C  D004               	goto	i2l3838
 14712  00440E  6C03               	negf	i2___awmod@divisor,c
 14713  004410  1E04               	comf	i2___awmod@divisor+1,f,c
 14714  004412  B0D8               	btfsc	status,0,c
 14715  004414  2A04               	incf	i2___awmod@divisor+1,f,c
 14716  004416                     i2l3838:
 14717  004416  5003               	movf	i2___awmod@divisor,w,c
 14718  004418  1004               	iorwf	i2___awmod@divisor+1,w,c
 14719  00441A  B4D8               	btfsc	status,2,c
 14720  00441C  D018               	goto	i2l3854
 14721  00441E  0E01               	movlw	1
 14722  004420  6E05               	movwf	i2___awmod@counter,c
 14723  004422  D004               	goto	i2l3844
 14724  004424                     i2l3842:
 14725  004424  90D8               	bcf	status,0,c
 14726  004426  3603               	rlcf	i2___awmod@divisor,f,c
 14727  004428  3604               	rlcf	i2___awmod@divisor+1,f,c
 14728  00442A  2A05               	incf	i2___awmod@counter,f,c
 14729  00442C                     i2l3844:
 14730  00442C  AE04               	btfss	i2___awmod@divisor+1,7,c
 14731  00442E  D7FA               	goto	i2l3842
 14732  004430                     i2l3846:
 14733  004430  5003               	movf	i2___awmod@divisor,w,c
 14734  004432  5C01               	subwf	i2___awmod@dividend,w,c
 14735  004434  5004               	movf	i2___awmod@divisor+1,w,c
 14736  004436  5802               	subwfb	i2___awmod@dividend+1,w,c
 14737  004438  A0D8               	btfss	status,0,c
 14738  00443A  D004               	goto	i2l3850
 14739  00443C  5003               	movf	i2___awmod@divisor,w,c
 14740  00443E  5E01               	subwf	i2___awmod@dividend,f,c
 14741  004440  5004               	movf	i2___awmod@divisor+1,w,c
 14742  004442  5A02               	subwfb	i2___awmod@dividend+1,f,c
 14743  004444                     i2l3850:
 14744  004444  90D8               	bcf	status,0,c
 14745  004446  3204               	rrcf	i2___awmod@divisor+1,f,c
 14746  004448  3203               	rrcf	i2___awmod@divisor,f,c
 14747  00444A  2E05               	decfsz	i2___awmod@counter,f,c
 14748  00444C  D7F1               	goto	i2l3846
 14749  00444E                     i2l3854:
 14750  00444E  5006               	movf	i2___awmod@sign,w,c
 14751  004450  B4D8               	btfsc	status,2,c
 14752  004452  D004               	goto	i2l3858
 14753  004454  6C01               	negf	i2___awmod@dividend,c
 14754  004456  1E02               	comf	i2___awmod@dividend+1,f,c
 14755  004458  B0D8               	btfsc	status,0,c
 14756  00445A  2A02               	incf	i2___awmod@dividend+1,f,c
 14757  00445C                     i2l3858:
 14758  00445C  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 14759  004460  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 14760  004464  0012               	return	
 14761  004466                     __end_ofi2___awmod:
 14762                           	opt stack 0
 14763                           pclatu	equ	0xFFB
 14764                           pclath	equ	0xFFA
 14765                           tblptru	equ	0xFF8
 14766                           tblptrh	equ	0xFF7
 14767                           tblptrl	equ	0xFF6
 14768                           tablat	equ	0xFF5
 14769                           prodh	equ	0xFF4
 14770                           prodl	equ	0xFF3
 14771                           intcon	equ	0xFF2
 14772                           intcon2	equ	0xFF1
 14773                           intcon3	equ	0xFF0
 14774                           postinc0	equ	0xFEE
 14775                           fsr0h	equ	0xFEA
 14776                           fsr0l	equ	0xFE9
 14777                           wreg	equ	0xFE8
 14778                           fsr1h	equ	0xFE2
 14779                           fsr1l	equ	0xFE1
 14780                           indf2	equ	0xFDF
 14781                           postinc2	equ	0xFDE
 14782                           postdec2	equ	0xFDD
 14783                           fsr2h	equ	0xFDA
 14784                           fsr2l	equ	0xFD9
 14785                           status	equ	0xFD8
 14786                           
 14787 ;; *************** function i2___awdiv *****************
 14788 ;; Defined at:
 14789 ;;		line 8 in file "/Applications/microchip/xc8/v1.40/sources/common/awdiv.c"
 14790 ;; Parameters:    Size  Location     Type
 14791 ;;  dividend        2    6[COMRAM] int 
 14792 ;;  divisor         2    8[COMRAM] int 
 14793 ;; Auto vars:     Size  Location     Type
 14794 ;;  __awdiv         2   12[COMRAM] int 
 14795 ;;  __awdiv         1   11[COMRAM] unsigned char 
 14796 ;;  __awdiv         1   10[COMRAM] unsigned char 
 14797 ;; Return value:  Size  Location     Type
 14798 ;;                  2    6[COMRAM] int 
 14799 ;; Registers used:
 14800 ;;		wreg, status,2, status,0
 14801 ;; Tracked objects:
 14802 ;;		On entry : 0/0
 14803 ;;		On exit  : 0/0
 14804 ;;		Unchanged: 0/0
 14805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14806 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14807 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14809 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14810 ;;Total ram usage:        8 bytes
 14811 ;; Hardware stack levels used:    1
 14812 ;; This function calls:
 14813 ;;		Nothing
 14814 ;; This function is called by:
 14815 ;;		i2_fround
 14816 ;;		i2_scale
 14817 ;;		i2_printf
 14818 ;; This function uses a non-reentrant model
 14819 ;;
 14820                           
 14821                           	psect	text56
 14822  004274                     __ptext56:
 14823                           	opt stack 0
 14824  004274                     i2___awdiv:
 14825                           	opt stack 21
 14826                           
 14827                           ;incstack = 0
 14828  004274  0E00               	movlw	0
 14829  004276  6E0C               	movwf	i2___awdiv@sign,c
 14830  004278  AE0A               	btfss	i2___awdiv@divisor+1,7,c
 14831  00427A  D006               	goto	i2l3790
 14832  00427C  6C09               	negf	i2___awdiv@divisor,c
 14833  00427E  1E0A               	comf	i2___awdiv@divisor+1,f,c
 14834  004280  B0D8               	btfsc	status,0,c
 14835  004282  2A0A               	incf	i2___awdiv@divisor+1,f,c
 14836  004284  0E01               	movlw	1
 14837  004286  6E0C               	movwf	i2___awdiv@sign,c
 14838  004288                     i2l3790:
 14839  004288  AE08               	btfss	i2___awdiv@dividend+1,7,c
 14840  00428A  D006               	goto	i2l3796
 14841  00428C  6C07               	negf	i2___awdiv@dividend,c
 14842  00428E  1E08               	comf	i2___awdiv@dividend+1,f,c
 14843  004290  B0D8               	btfsc	status,0,c
 14844  004292  2A08               	incf	i2___awdiv@dividend+1,f,c
 14845  004294  0E01               	movlw	1
 14846  004296  1A0C               	xorwf	i2___awdiv@sign,f,c
 14847  004298                     i2l3796:
 14848  004298  0E00               	movlw	0
 14849  00429A  6E0E               	movwf	i2___awdiv@quotient+1,c
 14850  00429C  0E00               	movlw	0
 14851  00429E  6E0D               	movwf	i2___awdiv@quotient,c
 14852  0042A0  5009               	movf	i2___awdiv@divisor,w,c
 14853  0042A2  100A               	iorwf	i2___awdiv@divisor+1,w,c
 14854  0042A4  B4D8               	btfsc	status,2,c
 14855  0042A6  D01C               	goto	i2l3818
 14856  0042A8  0E01               	movlw	1
 14857  0042AA  6E0B               	movwf	i2___awdiv@counter,c
 14858  0042AC  D004               	goto	i2l3804
 14859  0042AE                     i2l3802:
 14860  0042AE  90D8               	bcf	status,0,c
 14861  0042B0  3609               	rlcf	i2___awdiv@divisor,f,c
 14862  0042B2  360A               	rlcf	i2___awdiv@divisor+1,f,c
 14863  0042B4  2A0B               	incf	i2___awdiv@counter,f,c
 14864  0042B6                     i2l3804:
 14865  0042B6  AE0A               	btfss	i2___awdiv@divisor+1,7,c
 14866  0042B8  D7FA               	goto	i2l3802
 14867  0042BA                     i2l3806:
 14868  0042BA  90D8               	bcf	status,0,c
 14869  0042BC  360D               	rlcf	i2___awdiv@quotient,f,c
 14870  0042BE  360E               	rlcf	i2___awdiv@quotient+1,f,c
 14871  0042C0  5009               	movf	i2___awdiv@divisor,w,c
 14872  0042C2  5C07               	subwf	i2___awdiv@dividend,w,c
 14873  0042C4  500A               	movf	i2___awdiv@divisor+1,w,c
 14874  0042C6  5808               	subwfb	i2___awdiv@dividend+1,w,c
 14875  0042C8  A0D8               	btfss	status,0,c
 14876  0042CA  D005               	goto	i2l3814
 14877  0042CC  5009               	movf	i2___awdiv@divisor,w,c
 14878  0042CE  5E07               	subwf	i2___awdiv@dividend,f,c
 14879  0042D0  500A               	movf	i2___awdiv@divisor+1,w,c
 14880  0042D2  5A08               	subwfb	i2___awdiv@dividend+1,f,c
 14881  0042D4  800D               	bsf	i2___awdiv@quotient,0,c
 14882  0042D6                     i2l3814:
 14883  0042D6  90D8               	bcf	status,0,c
 14884  0042D8  320A               	rrcf	i2___awdiv@divisor+1,f,c
 14885  0042DA  3209               	rrcf	i2___awdiv@divisor,f,c
 14886  0042DC  2E0B               	decfsz	i2___awdiv@counter,f,c
 14887  0042DE  D7ED               	goto	i2l3806
 14888  0042E0                     i2l3818:
 14889  0042E0  500C               	movf	i2___awdiv@sign,w,c
 14890  0042E2  B4D8               	btfsc	status,2,c
 14891  0042E4  D004               	goto	i2l3822
 14892  0042E6  6C0D               	negf	i2___awdiv@quotient,c
 14893  0042E8  1E0E               	comf	i2___awdiv@quotient+1,f,c
 14894  0042EA  B0D8               	btfsc	status,0,c
 14895  0042EC  2A0E               	incf	i2___awdiv@quotient+1,f,c
 14896  0042EE                     i2l3822:
 14897  0042EE  C00D  F007         	movff	i2___awdiv@quotient,?i2___awdiv
 14898  0042F2  C00E  F008         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 14899  0042F6  0012               	return	
 14900  0042F8                     __end_ofi2___awdiv:
 14901                           	opt stack 0
 14902                           pclatu	equ	0xFFB
 14903                           pclath	equ	0xFFA
 14904                           tblptru	equ	0xFF8
 14905                           tblptrh	equ	0xFF7
 14906                           tblptrl	equ	0xFF6
 14907                           tablat	equ	0xFF5
 14908                           prodh	equ	0xFF4
 14909                           prodl	equ	0xFF3
 14910                           intcon	equ	0xFF2
 14911                           intcon2	equ	0xFF1
 14912                           intcon3	equ	0xFF0
 14913                           postinc0	equ	0xFEE
 14914                           fsr0h	equ	0xFEA
 14915                           fsr0l	equ	0xFE9
 14916                           wreg	equ	0xFE8
 14917                           fsr1h	equ	0xFE2
 14918                           fsr1l	equ	0xFE1
 14919                           indf2	equ	0xFDF
 14920                           postinc2	equ	0xFDE
 14921                           postdec2	equ	0xFDD
 14922                           fsr2h	equ	0xFDA
 14923                           fsr2l	equ	0xFD9
 14924                           status	equ	0xFD8
 14925                           
 14926 ;; *************** function i2__tdiv_to_l_ *****************
 14927 ;; Defined at:
 14928 ;;		line 60 in file "/Applications/microchip/xc8/v1.40/sources/common/ftdivl.c"
 14929 ;; Parameters:    Size  Location     Type
 14930 ;;  f1              3    0[COMRAM] float 
 14931 ;;  f2              3    3[COMRAM] float 
 14932 ;; Auto vars:     Size  Location     Type
 14933 ;;  _tdiv_to_l_     4    9[COMRAM] unsigned long 
 14934 ;;  _tdiv_to_l_     1   14[COMRAM] unsigned char 
 14935 ;;  _tdiv_to_l_     1   13[COMRAM] unsigned char 
 14936 ;; Return value:  Size  Location     Type
 14937 ;;                  4    0[COMRAM] unsigned long 
 14938 ;; Registers used:
 14939 ;;		wreg, status,2, status,0
 14940 ;; Tracked objects:
 14941 ;;		On entry : 0/0
 14942 ;;		On exit  : 0/0
 14943 ;;		Unchanged: 0/0
 14944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14945 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14946 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14947 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14948 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14949 ;;Total ram usage:       15 bytes
 14950 ;; Hardware stack levels used:    1
 14951 ;; This function calls:
 14952 ;;		Nothing
 14953 ;; This function is called by:
 14954 ;;		i2_printf
 14955 ;; This function uses a non-reentrant model
 14956 ;;
 14957                           
 14958                           	psect	text57
 14959  003474                     __ptext57:
 14960                           	opt stack 0
 14961  003474                     i2__tdiv_to_l_:
 14962                           	opt stack 22
 14963                           
 14964                           ;incstack = 0
 14965  003474  C003  F007         	movff	i2__tdiv_to_l_@f1+2,??i2__tdiv_to_l_
 14966  003478  6A08               	clrf	(??i2__tdiv_to_l_+1)& (0+255),c
 14967  00347A  6A09               	clrf	(??i2__tdiv_to_l_+2)& (0+255),c
 14968  00347C  3402               	rlcf	i2__tdiv_to_l_@f1+1,w,c
 14969  00347E  3607               	rlcf	??i2__tdiv_to_l_& (0+255),f,c
 14970  003480  E301               	bnc	u498_41
 14971  003482  8008               	bsf	(??i2__tdiv_to_l_+1)& (0+255),0,c
 14972  003484                     u498_41:
 14973  003484  5007               	movf	??i2__tdiv_to_l_,w,c
 14974  003486  6E0F               	movwf	i2__tdiv_to_l_@exp1,c
 14975  003488  500F               	movf	i2__tdiv_to_l_@exp1,w,c
 14976  00348A  A4D8               	btfss	status,2,c
 14977  00348C  D009               	goto	i2l4430
 14978  00348E  0E00               	movlw	0
 14979  003490  6E01               	movwf	?i2__tdiv_to_l_,c
 14980  003492  0E00               	movlw	0
 14981  003494  6E02               	movwf	?i2__tdiv_to_l_+1,c
 14982  003496  0E00               	movlw	0
 14983  003498  6E03               	movwf	?i2__tdiv_to_l_+2,c
 14984  00349A  0E00               	movlw	0
 14985  00349C  6E04               	movwf	?i2__tdiv_to_l_+3,c
 14986  00349E  0012               	return	
 14987  0034A0                     i2l4430:
 14988  0034A0  C006  F007         	movff	i2__tdiv_to_l_@f2+2,??i2__tdiv_to_l_
 14989  0034A4  6A08               	clrf	(??i2__tdiv_to_l_+1)& (0+255),c
 14990  0034A6  6A09               	clrf	(??i2__tdiv_to_l_+2)& (0+255),c
 14991  0034A8  3405               	rlcf	i2__tdiv_to_l_@f2+1,w,c
 14992  0034AA  3607               	rlcf	??i2__tdiv_to_l_& (0+255),f,c
 14993  0034AC  E301               	bnc	u500_41
 14994  0034AE  8008               	bsf	(??i2__tdiv_to_l_+1)& (0+255),0,c
 14995  0034B0                     u500_41:
 14996  0034B0  5007               	movf	??i2__tdiv_to_l_,w,c
 14997  0034B2  6E0E               	movwf	i2__tdiv_to_l_@cntr,c
 14998  0034B4  500E               	movf	i2__tdiv_to_l_@cntr,w,c
 14999  0034B6  A4D8               	btfss	status,2,c
 15000  0034B8  D009               	goto	i2l4436
 15001  0034BA  0E00               	movlw	0
 15002  0034BC  6E01               	movwf	?i2__tdiv_to_l_,c
 15003  0034BE  0E00               	movlw	0
 15004  0034C0  6E02               	movwf	?i2__tdiv_to_l_+1,c
 15005  0034C2  0E00               	movlw	0
 15006  0034C4  6E03               	movwf	?i2__tdiv_to_l_+2,c
 15007  0034C6  0E00               	movlw	0
 15008  0034C8  6E04               	movwf	?i2__tdiv_to_l_+3,c
 15009  0034CA  0012               	return	
 15010  0034CC                     i2l4436:
 15011  0034CC  8E02               	bsf	i2__tdiv_to_l_@f1+1,7,c
 15012  0034CE  0EFF               	movlw	255
 15013  0034D0  1601               	andwf	i2__tdiv_to_l_@f1,f,c
 15014  0034D2  0EFF               	movlw	255
 15015  0034D4  1602               	andwf	i2__tdiv_to_l_@f1+1,f,c
 15016  0034D6  0E00               	movlw	0
 15017  0034D8  1603               	andwf	i2__tdiv_to_l_@f1+2,f,c
 15018  0034DA  8E05               	bsf	i2__tdiv_to_l_@f2+1,7,c
 15019  0034DC  0EFF               	movlw	255
 15020  0034DE  1604               	andwf	i2__tdiv_to_l_@f2,f,c
 15021  0034E0  0EFF               	movlw	255
 15022  0034E2  1605               	andwf	i2__tdiv_to_l_@f2+1,f,c
 15023  0034E4  0E00               	movlw	0
 15024  0034E6  1606               	andwf	i2__tdiv_to_l_@f2+2,f,c
 15025  0034E8  0E00               	movlw	0
 15026  0034EA  6E0A               	movwf	i2__tdiv_to_l_@quot,c
 15027  0034EC  0E00               	movlw	0
 15028  0034EE  6E0B               	movwf	i2__tdiv_to_l_@quot+1,c
 15029  0034F0  0E00               	movlw	0
 15030  0034F2  6E0C               	movwf	i2__tdiv_to_l_@quot+2,c
 15031  0034F4  0E00               	movlw	0
 15032  0034F6  6E0D               	movwf	i2__tdiv_to_l_@quot+3,c
 15033  0034F8  0E7F               	movlw	127
 15034  0034FA  5E0F               	subwf	i2__tdiv_to_l_@exp1,f,c
 15035  0034FC  500E               	movf	i2__tdiv_to_l_@cntr,w,c
 15036  0034FE  0F98               	addlw	152
 15037  003500  5E0F               	subwf	i2__tdiv_to_l_@exp1,f,c
 15038  003502  0E18               	movlw	24
 15039  003504  6E0E               	movwf	i2__tdiv_to_l_@cntr,c
 15040  003506                     i2l830:
 15041  003506  90D8               	bcf	status,0,c
 15042  003508  360A               	rlcf	i2__tdiv_to_l_@quot,f,c
 15043  00350A  360B               	rlcf	i2__tdiv_to_l_@quot+1,f,c
 15044  00350C  360C               	rlcf	i2__tdiv_to_l_@quot+2,f,c
 15045  00350E  360D               	rlcf	i2__tdiv_to_l_@quot+3,f,c
 15046  003510  5004               	movf	i2__tdiv_to_l_@f2,w,c
 15047  003512  5C01               	subwf	i2__tdiv_to_l_@f1,w,c
 15048  003514  5005               	movf	i2__tdiv_to_l_@f2+1,w,c
 15049  003516  5802               	subwfb	i2__tdiv_to_l_@f1+1,w,c
 15050  003518  5006               	movf	i2__tdiv_to_l_@f2+2,w,c
 15051  00351A  5803               	subwfb	i2__tdiv_to_l_@f1+2,w,c
 15052  00351C  A0D8               	btfss	status,0,c
 15053  00351E  D007               	goto	i2l831
 15054  003520  5004               	movf	i2__tdiv_to_l_@f2,w,c
 15055  003522  5E01               	subwf	i2__tdiv_to_l_@f1,f,c
 15056  003524  5005               	movf	i2__tdiv_to_l_@f2+1,w,c
 15057  003526  5A02               	subwfb	i2__tdiv_to_l_@f1+1,f,c
 15058  003528  5006               	movf	i2__tdiv_to_l_@f2+2,w,c
 15059  00352A  5A03               	subwfb	i2__tdiv_to_l_@f1+2,f,c
 15060  00352C  800A               	bsf	i2__tdiv_to_l_@quot,0,c
 15061  00352E                     i2l831:
 15062  00352E  90D8               	bcf	status,0,c
 15063  003530  3601               	rlcf	i2__tdiv_to_l_@f1,f,c
 15064  003532  3602               	rlcf	i2__tdiv_to_l_@f1+1,f,c
 15065  003534  3603               	rlcf	i2__tdiv_to_l_@f1+2,f,c
 15066  003536  2E0E               	decfsz	i2__tdiv_to_l_@cntr,f,c
 15067  003538  D7E6               	goto	i2l830
 15068  00353A  AE0F               	btfss	i2__tdiv_to_l_@exp1,7,c
 15069  00353C  D016               	goto	i2l4470
 15070  00353E  500F               	movf	i2__tdiv_to_l_@exp1,w,c
 15071  003540  0A80               	xorlw	128
 15072  003542  0F97               	addlw	151
 15073  003544  B0D8               	btfsc	status,0,c
 15074  003546  D009               	goto	i2l4466
 15075  003548  0E00               	movlw	0
 15076  00354A  6E01               	movwf	?i2__tdiv_to_l_,c
 15077  00354C  0E00               	movlw	0
 15078  00354E  6E02               	movwf	?i2__tdiv_to_l_+1,c
 15079  003550  0E00               	movlw	0
 15080  003552  6E03               	movwf	?i2__tdiv_to_l_+2,c
 15081  003554  0E00               	movlw	0
 15082  003556  6E04               	movwf	?i2__tdiv_to_l_+3,c
 15083  003558  0012               	return	
 15084  00355A                     i2l4466:
 15085  00355A  90D8               	bcf	status,0,c
 15086  00355C  320D               	rrcf	i2__tdiv_to_l_@quot+3,f,c
 15087  00355E  320C               	rrcf	i2__tdiv_to_l_@quot+2,f,c
 15088  003560  320B               	rrcf	i2__tdiv_to_l_@quot+1,f,c
 15089  003562  320A               	rrcf	i2__tdiv_to_l_@quot,f,c
 15090  003564  3E0F               	incfsz	i2__tdiv_to_l_@exp1,f,c
 15091  003566  D7F9               	goto	i2l4466
 15092  003568  D015               	goto	i2l837
 15093  00356A                     i2l4470:
 15094  00356A  0E17               	movlw	23
 15095  00356C  640F               	cpfsgt	i2__tdiv_to_l_@exp1,c
 15096  00356E  D00F               	goto	i2l4478
 15097  003570  0E00               	movlw	0
 15098  003572  6E01               	movwf	?i2__tdiv_to_l_,c
 15099  003574  0E00               	movlw	0
 15100  003576  6E02               	movwf	?i2__tdiv_to_l_+1,c
 15101  003578  0E00               	movlw	0
 15102  00357A  6E03               	movwf	?i2__tdiv_to_l_+2,c
 15103  00357C  0E00               	movlw	0
 15104  00357E  6E04               	movwf	?i2__tdiv_to_l_+3,c
 15105  003580  0012               	return	
 15106  003582                     i2l4476:
 15107  003582  90D8               	bcf	status,0,c
 15108  003584  360A               	rlcf	i2__tdiv_to_l_@quot,f,c
 15109  003586  360B               	rlcf	i2__tdiv_to_l_@quot+1,f,c
 15110  003588  360C               	rlcf	i2__tdiv_to_l_@quot+2,f,c
 15111  00358A  360D               	rlcf	i2__tdiv_to_l_@quot+3,f,c
 15112  00358C  060F               	decf	i2__tdiv_to_l_@exp1,f,c
 15113  00358E                     i2l4478:
 15114  00358E  500F               	movf	i2__tdiv_to_l_@exp1,w,c
 15115  003590  A4D8               	btfss	status,2,c
 15116  003592  D7F7               	goto	i2l4476
 15117  003594                     i2l837:
 15118  003594  C00A  F001         	movff	i2__tdiv_to_l_@quot,?i2__tdiv_to_l_
 15119  003598  C00B  F002         	movff	i2__tdiv_to_l_@quot+1,?i2__tdiv_to_l_+1
 15120  00359C  C00C  F003         	movff	i2__tdiv_to_l_@quot+2,?i2__tdiv_to_l_+2
 15121  0035A0  C00D  F004         	movff	i2__tdiv_to_l_@quot+3,?i2__tdiv_to_l_+3
 15122  0035A4  0012               	return		;funcret
 15123  0035A6                     __end_ofi2__tdiv_to_l_:
 15124                           	opt stack 0
 15125                           pclatu	equ	0xFFB
 15126                           pclath	equ	0xFFA
 15127                           tblptru	equ	0xFF8
 15128                           tblptrh	equ	0xFF7
 15129                           tblptrl	equ	0xFF6
 15130                           tablat	equ	0xFF5
 15131                           prodh	equ	0xFF4
 15132                           prodl	equ	0xFF3
 15133                           intcon	equ	0xFF2
 15134                           intcon2	equ	0xFF1
 15135                           intcon3	equ	0xFF0
 15136                           postinc0	equ	0xFEE
 15137                           fsr0h	equ	0xFEA
 15138                           fsr0l	equ	0xFE9
 15139                           wreg	equ	0xFE8
 15140                           fsr1h	equ	0xFE2
 15141                           fsr1l	equ	0xFE1
 15142                           indf2	equ	0xFDF
 15143                           postinc2	equ	0xFDE
 15144                           postdec2	equ	0xFDD
 15145                           fsr2h	equ	0xFDA
 15146                           fsr2l	equ	0xFD9
 15147                           status	equ	0xFD8
 15148                           
 15149 ;; *************** function i2__div_to_l_ *****************
 15150 ;; Defined at:
 15151 ;;		line 60 in file "/Applications/microchip/xc8/v1.40/sources/common/fldivl.c"
 15152 ;; Parameters:    Size  Location     Type
 15153 ;;  f1              3    0[COMRAM] unsigned long 
 15154 ;;  f2              3    3[COMRAM] unsigned long 
 15155 ;; Auto vars:     Size  Location     Type
 15156 ;;  _div_to_l_      4    6[COMRAM] unsigned long 
 15157 ;;  _div_to_l_      1   11[COMRAM] unsigned char 
 15158 ;;  _div_to_l_      1   10[COMRAM] unsigned char 
 15159 ;; Return value:  Size  Location     Type
 15160 ;;                  4    0[COMRAM] unsigned long 
 15161 ;; Registers used:
 15162 ;;		wreg, status,2, status,0
 15163 ;; Tracked objects:
 15164 ;;		On entry : 0/0
 15165 ;;		On exit  : 0/0
 15166 ;;		Unchanged: 0/0
 15167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15168 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15169 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15171 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15172 ;;Total ram usage:       12 bytes
 15173 ;; Hardware stack levels used:    1
 15174 ;; This function calls:
 15175 ;;		Nothing
 15176 ;; This function is called by:
 15177 ;;		i2_printf
 15178 ;; This function uses a non-reentrant model
 15179 ;;
 15180                           
 15181                           	psect	text58
 15182  0036D6                     __ptext58:
 15183                           	opt stack 0
 15184  0036D6                     i2__div_to_l_:
 15185                           	opt stack 22
 15186                           
 15187                           ;incstack = 0
 15188  0036D6  3403               	rlcf	i2__div_to_l_@f1+2,w,c
 15189  0036D8  3404               	rlcf	i2__div_to_l_@f1+3,w,c
 15190  0036DA  6E0C               	movwf	i2__div_to_l_@exp1,c
 15191  0036DC  500C               	movf	i2__div_to_l_@exp1,w,c
 15192  0036DE  A4D8               	btfss	status,2,c
 15193  0036E0  D009               	goto	i2l4370
 15194  0036E2  0E00               	movlw	0
 15195  0036E4  6E01               	movwf	?i2__div_to_l_,c
 15196  0036E6  0E00               	movlw	0
 15197  0036E8  6E02               	movwf	?i2__div_to_l_+1,c
 15198  0036EA  0E00               	movlw	0
 15199  0036EC  6E03               	movwf	?i2__div_to_l_+2,c
 15200  0036EE  0E00               	movlw	0
 15201  0036F0  6E04               	movwf	?i2__div_to_l_+3,c
 15202  0036F2  0012               	return	
 15203  0036F4                     i2l4370:
 15204  0036F4  3406               	rlcf	i2__div_to_l_@f2+2,w,c
 15205  0036F6  3407               	rlcf	i2__div_to_l_@f2+3,w,c
 15206  0036F8  6E0B               	movwf	i2__div_to_l_@cntr,c
 15207  0036FA  500B               	movf	i2__div_to_l_@cntr,w,c
 15208  0036FC  A4D8               	btfss	status,2,c
 15209  0036FE  D009               	goto	i2l4376
 15210  003700  0E00               	movlw	0
 15211  003702  6E01               	movwf	?i2__div_to_l_,c
 15212  003704  0E00               	movlw	0
 15213  003706  6E02               	movwf	?i2__div_to_l_+1,c
 15214  003708  0E00               	movlw	0
 15215  00370A  6E03               	movwf	?i2__div_to_l_+2,c
 15216  00370C  0E00               	movlw	0
 15217  00370E  6E04               	movwf	?i2__div_to_l_+3,c
 15218  003710  0012               	return	
 15219  003712                     i2l4376:
 15220  003712  8E03               	bsf	i2__div_to_l_@f1+2,7,c
 15221  003714  0EFF               	movlw	255
 15222  003716  1601               	andwf	i2__div_to_l_@f1,f,c
 15223  003718  0EFF               	movlw	255
 15224  00371A  1602               	andwf	i2__div_to_l_@f1+1,f,c
 15225  00371C  0EFF               	movlw	255
 15226  00371E  1603               	andwf	i2__div_to_l_@f1+2,f,c
 15227  003720  0E00               	movlw	0
 15228  003722  1604               	andwf	i2__div_to_l_@f1+3,f,c
 15229  003724  8E06               	bsf	i2__div_to_l_@f2+2,7,c
 15230  003726  0EFF               	movlw	255
 15231  003728  1604               	andwf	i2__div_to_l_@f2,f,c
 15232  00372A  0EFF               	movlw	255
 15233  00372C  1605               	andwf	i2__div_to_l_@f2+1,f,c
 15234  00372E  0EFF               	movlw	255
 15235  003730  1606               	andwf	i2__div_to_l_@f2+2,f,c
 15236  003732  0E00               	movlw	0
 15237  003734  1607               	andwf	i2__div_to_l_@f2+3,f,c
 15238  003736  0E00               	movlw	0
 15239  003738  6E07               	movwf	i2__div_to_l_@quot,c
 15240  00373A  0E00               	movlw	0
 15241  00373C  6E08               	movwf	i2__div_to_l_@quot+1,c
 15242  00373E  0E00               	movlw	0
 15243  003740  6E09               	movwf	i2__div_to_l_@quot+2,c
 15244  003742  0E00               	movlw	0
 15245  003744  6E0A               	movwf	i2__div_to_l_@quot+3,c
 15246  003746  0E7F               	movlw	127
 15247  003748  5E0C               	subwf	i2__div_to_l_@exp1,f,c
 15248  00374A  500B               	movf	i2__div_to_l_@cntr,w,c
 15249  00374C  0FA0               	addlw	160
 15250  00374E  5E0C               	subwf	i2__div_to_l_@exp1,f,c
 15251  003750  0E20               	movlw	32
 15252  003752  6E0B               	movwf	i2__div_to_l_@cntr,c
 15253  003754                     i2l4390:
 15254  003754  90D8               	bcf	status,0,c
 15255  003756  3607               	rlcf	i2__div_to_l_@quot,f,c
 15256  003758  3608               	rlcf	i2__div_to_l_@quot+1,f,c
 15257  00375A  3609               	rlcf	i2__div_to_l_@quot+2,f,c
 15258  00375C  360A               	rlcf	i2__div_to_l_@quot+3,f,c
 15259  00375E  5004               	movf	i2__div_to_l_@f2,w,c
 15260  003760  5C01               	subwf	i2__div_to_l_@f1,w,c
 15261  003762  5005               	movf	i2__div_to_l_@f2+1,w,c
 15262  003764  5802               	subwfb	i2__div_to_l_@f1+1,w,c
 15263  003766  5006               	movf	i2__div_to_l_@f2+2,w,c
 15264  003768  5803               	subwfb	i2__div_to_l_@f1+2,w,c
 15265  00376A  5007               	movf	i2__div_to_l_@f2+3,w,c
 15266  00376C  5804               	subwfb	i2__div_to_l_@f1+3,w,c
 15267  00376E  A0D8               	btfss	status,0,c
 15268  003770  D009               	goto	i2l4398
 15269  003772  5004               	movf	i2__div_to_l_@f2,w,c
 15270  003774  5E01               	subwf	i2__div_to_l_@f1,f,c
 15271  003776  5005               	movf	i2__div_to_l_@f2+1,w,c
 15272  003778  5A02               	subwfb	i2__div_to_l_@f1+1,f,c
 15273  00377A  5006               	movf	i2__div_to_l_@f2+2,w,c
 15274  00377C  5A03               	subwfb	i2__div_to_l_@f1+2,f,c
 15275  00377E  5007               	movf	i2__div_to_l_@f2+3,w,c
 15276  003780  5A04               	subwfb	i2__div_to_l_@f1+3,f,c
 15277  003782  8007               	bsf	i2__div_to_l_@quot,0,c
 15278  003784                     i2l4398:
 15279  003784  90D8               	bcf	status,0,c
 15280  003786  3601               	rlcf	i2__div_to_l_@f1,f,c
 15281  003788  3602               	rlcf	i2__div_to_l_@f1+1,f,c
 15282  00378A  3603               	rlcf	i2__div_to_l_@f1+2,f,c
 15283  00378C  3604               	rlcf	i2__div_to_l_@f1+3,f,c
 15284  00378E  2E0B               	decfsz	i2__div_to_l_@cntr,f,c
 15285  003790  D7E1               	goto	i2l4390
 15286  003792  AE0C               	btfss	i2__div_to_l_@exp1,7,c
 15287  003794  D016               	goto	i2l4414
 15288  003796  500C               	movf	i2__div_to_l_@exp1,w,c
 15289  003798  0A80               	xorlw	128
 15290  00379A  0F9F               	addlw	159
 15291  00379C  B0D8               	btfsc	status,0,c
 15292  00379E  D009               	goto	i2l4410
 15293  0037A0  0E00               	movlw	0
 15294  0037A2  6E01               	movwf	?i2__div_to_l_,c
 15295  0037A4  0E00               	movlw	0
 15296  0037A6  6E02               	movwf	?i2__div_to_l_+1,c
 15297  0037A8  0E00               	movlw	0
 15298  0037AA  6E03               	movwf	?i2__div_to_l_+2,c
 15299  0037AC  0E00               	movlw	0
 15300  0037AE  6E04               	movwf	?i2__div_to_l_+3,c
 15301  0037B0  0012               	return	
 15302  0037B2                     i2l4410:
 15303  0037B2  90D8               	bcf	status,0,c
 15304  0037B4  320A               	rrcf	i2__div_to_l_@quot+3,f,c
 15305  0037B6  3209               	rrcf	i2__div_to_l_@quot+2,f,c
 15306  0037B8  3208               	rrcf	i2__div_to_l_@quot+1,f,c
 15307  0037BA  3207               	rrcf	i2__div_to_l_@quot,f,c
 15308  0037BC  3E0C               	incfsz	i2__div_to_l_@exp1,f,c
 15309  0037BE  D7F9               	goto	i2l4410
 15310  0037C0  D015               	goto	i2l733
 15311  0037C2                     i2l4414:
 15312  0037C2  0E1F               	movlw	31
 15313  0037C4  640C               	cpfsgt	i2__div_to_l_@exp1,c
 15314  0037C6  D00F               	goto	i2l4422
 15315  0037C8  0E00               	movlw	0
 15316  0037CA  6E01               	movwf	?i2__div_to_l_,c
 15317  0037CC  0E00               	movlw	0
 15318  0037CE  6E02               	movwf	?i2__div_to_l_+1,c
 15319  0037D0  0E00               	movlw	0
 15320  0037D2  6E03               	movwf	?i2__div_to_l_+2,c
 15321  0037D4  0E00               	movlw	0
 15322  0037D6  6E04               	movwf	?i2__div_to_l_+3,c
 15323  0037D8  0012               	return	
 15324  0037DA                     i2l4420:
 15325  0037DA  90D8               	bcf	status,0,c
 15326  0037DC  3607               	rlcf	i2__div_to_l_@quot,f,c
 15327  0037DE  3608               	rlcf	i2__div_to_l_@quot+1,f,c
 15328  0037E0  3609               	rlcf	i2__div_to_l_@quot+2,f,c
 15329  0037E2  360A               	rlcf	i2__div_to_l_@quot+3,f,c
 15330  0037E4  060C               	decf	i2__div_to_l_@exp1,f,c
 15331  0037E6                     i2l4422:
 15332  0037E6  500C               	movf	i2__div_to_l_@exp1,w,c
 15333  0037E8  A4D8               	btfss	status,2,c
 15334  0037EA  D7F7               	goto	i2l4420
 15335  0037EC                     i2l733:
 15336  0037EC  C007  F001         	movff	i2__div_to_l_@quot,?i2__div_to_l_
 15337  0037F0  C008  F002         	movff	i2__div_to_l_@quot+1,?i2__div_to_l_+1
 15338  0037F4  C009  F003         	movff	i2__div_to_l_@quot+2,?i2__div_to_l_+2
 15339  0037F8  C00A  F004         	movff	i2__div_to_l_@quot+3,?i2__div_to_l_+3
 15340  0037FC  0012               	return		;funcret
 15341  0037FE                     __end_ofi2__div_to_l_:
 15342                           	opt stack 0
 15343                           pclatu	equ	0xFFB
 15344                           pclath	equ	0xFFA
 15345                           tblptru	equ	0xFF8
 15346                           tblptrh	equ	0xFF7
 15347                           tblptrl	equ	0xFF6
 15348                           tablat	equ	0xFF5
 15349                           prodh	equ	0xFF4
 15350                           prodl	equ	0xFF3
 15351                           intcon	equ	0xFF2
 15352                           intcon2	equ	0xFF1
 15353                           intcon3	equ	0xFF0
 15354                           postinc0	equ	0xFEE
 15355                           fsr0h	equ	0xFEA
 15356                           fsr0l	equ	0xFE9
 15357                           wreg	equ	0xFE8
 15358                           fsr1h	equ	0xFE2
 15359                           fsr1l	equ	0xFE1
 15360                           indf2	equ	0xFDF
 15361                           postinc2	equ	0xFDE
 15362                           postdec2	equ	0xFDD
 15363                           fsr2h	equ	0xFDA
 15364                           fsr2l	equ	0xFD9
 15365                           status	equ	0xFD8
 15366                           
 15367 ;; *************** function i2___lltoft *****************
 15368 ;; Defined at:
 15369 ;;		line 35 in file "/Applications/microchip/xc8/v1.40/sources/common/lltoft.c"
 15370 ;; Parameters:    Size  Location     Type
 15371 ;;  c               4    8[COMRAM] unsigned long 
 15372 ;; Auto vars:     Size  Location     Type
 15373 ;;  __lltoft        1   16[COMRAM] unsigned char 
 15374 ;; Return value:  Size  Location     Type
 15375 ;;                  3    8[COMRAM] float 
 15376 ;; Registers used:
 15377 ;;		wreg, status,2, status,0, cstack
 15378 ;; Tracked objects:
 15379 ;;		On entry : 0/0
 15380 ;;		On exit  : 0/0
 15381 ;;		Unchanged: 0/0
 15382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15383 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15384 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15385 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15386 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15387 ;;Total ram usage:        9 bytes
 15388 ;; Hardware stack levels used:    1
 15389 ;; Hardware stack levels required when called:    1
 15390 ;; This function calls:
 15391 ;;		i2___ftpack
 15392 ;; This function is called by:
 15393 ;;		i2_printf
 15394 ;; This function uses a non-reentrant model
 15395 ;;
 15396                           
 15397                           	psect	text59
 15398  0045F0                     __ptext59:
 15399                           	opt stack 0
 15400  0045F0                     i2___lltoft:
 15401                           	opt stack 21
 15402                           
 15403                           ;incstack = 0
 15404  0045F0  0E8E               	movlw	142
 15405  0045F2  6E11               	movwf	i2___lltoft@exp,c
 15406  0045F4  D006               	goto	i2l4610
 15407  0045F6                     i2l4608:
 15408  0045F6  90D8               	bcf	status,0,c
 15409  0045F8  320C               	rrcf	i2___lltoft@c+3,f,c
 15410  0045FA  320B               	rrcf	i2___lltoft@c+2,f,c
 15411  0045FC  320A               	rrcf	i2___lltoft@c+1,f,c
 15412  0045FE  3209               	rrcf	i2___lltoft@c,f,c
 15413  004600  2A11               	incf	i2___lltoft@exp,f,c
 15414  004602                     i2l4610:
 15415  004602  0E00               	movlw	0
 15416  004604  1409               	andwf	i2___lltoft@c,w,c
 15417  004606  6E0D               	movwf	??i2___lltoft& (0+255),c
 15418  004608  0E00               	movlw	0
 15419  00460A  140A               	andwf	i2___lltoft@c+1,w,c
 15420  00460C  6E0E               	movwf	(??i2___lltoft+1)& (0+255),c
 15421  00460E  0E00               	movlw	0
 15422  004610  140B               	andwf	i2___lltoft@c+2,w,c
 15423  004612  6E0F               	movwf	(??i2___lltoft+2)& (0+255),c
 15424  004614  0EFF               	movlw	255
 15425  004616  140C               	andwf	i2___lltoft@c+3,w,c
 15426  004618  6E10               	movwf	(??i2___lltoft+3)& (0+255),c
 15427  00461A  500D               	movf	??i2___lltoft,w,c
 15428  00461C  100E               	iorwf	??i2___lltoft+1,w,c
 15429  00461E  100F               	iorwf	??i2___lltoft+2,w,c
 15430  004620  1010               	iorwf	??i2___lltoft+3,w,c
 15431  004622  A4D8               	btfss	status,2,c
 15432  004624  D7E8               	goto	i2l4608
 15433  004626  C009  F001         	movff	i2___lltoft@c,i2___ftpack@arg
 15434  00462A  C00A  F002         	movff	i2___lltoft@c+1,i2___ftpack@arg+1
 15435  00462E  C00B  F003         	movff	i2___lltoft@c+2,i2___ftpack@arg+2
 15436  004632  C011  F004         	movff	i2___lltoft@exp,i2___ftpack@exp
 15437  004636  0E00               	movlw	0
 15438  004638  6E05               	movwf	i2___ftpack@sign,c
 15439  00463A  EC55  F01F         	call	i2___ftpack	;wreg free
 15440  00463E  C001  F009         	movff	?i2___ftpack,?i2___lltoft
 15441  004642  C002  F00A         	movff	?i2___ftpack+1,?i2___lltoft+1
 15442  004646  C003  F00B         	movff	?i2___ftpack+2,?i2___lltoft+2
 15443  00464A  0012               	return	
 15444  00464C                     __end_ofi2___lltoft:
 15445                           	opt stack 0
 15446                           pclatu	equ	0xFFB
 15447                           pclath	equ	0xFFA
 15448                           tblptru	equ	0xFF8
 15449                           tblptrh	equ	0xFF7
 15450                           tblptrl	equ	0xFF6
 15451                           tablat	equ	0xFF5
 15452                           prodh	equ	0xFF4
 15453                           prodl	equ	0xFF3
 15454                           intcon	equ	0xFF2
 15455                           intcon2	equ	0xFF1
 15456                           intcon3	equ	0xFF0
 15457                           postinc0	equ	0xFEE
 15458                           fsr0h	equ	0xFEA
 15459                           fsr0l	equ	0xFE9
 15460                           wreg	equ	0xFE8
 15461                           fsr1h	equ	0xFE2
 15462                           fsr1l	equ	0xFE1
 15463                           indf2	equ	0xFDF
 15464                           postinc2	equ	0xFDE
 15465                           postdec2	equ	0xFDD
 15466                           fsr2h	equ	0xFDA
 15467                           fsr2l	equ	0xFD9
 15468                           status	equ	0xFD8
 15469                           
 15470 ;; *************** function i2___llmod *****************
 15471 ;; Defined at:
 15472 ;;		line 8 in file "/Applications/microchip/xc8/v1.40/sources/common/llmod.c"
 15473 ;; Parameters:    Size  Location     Type
 15474 ;;  dividend        4   13[COMRAM] unsigned long 
 15475 ;;  divisor         4   17[COMRAM] unsigned long 
 15476 ;; Auto vars:     Size  Location     Type
 15477 ;;  __llmod         1   21[COMRAM] unsigned char 
 15478 ;; Return value:  Size  Location     Type
 15479 ;;                  4   13[COMRAM] unsigned long 
 15480 ;; Registers used:
 15481 ;;		wreg, status,2, status,0
 15482 ;; Tracked objects:
 15483 ;;		On entry : 0/0
 15484 ;;		On exit  : 0/0
 15485 ;;		Unchanged: 0/0
 15486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15487 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15488 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15490 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15491 ;;Total ram usage:        9 bytes
 15492 ;; Hardware stack levels used:    1
 15493 ;; This function calls:
 15494 ;;		Nothing
 15495 ;; This function is called by:
 15496 ;;		i2_printf
 15497 ;; This function uses a non-reentrant model
 15498 ;;
 15499                           
 15500                           	psect	text60
 15501  0044CE                     __ptext60:
 15502                           	opt stack 0
 15503  0044CE                     i2___llmod:
 15504                           	opt stack 22
 15505                           
 15506                           ;incstack = 0
 15507  0044CE  5012               	movf	i2___llmod@divisor,w,c
 15508  0044D0  1013               	iorwf	i2___llmod@divisor+1,w,c
 15509  0044D2  1014               	iorwf	i2___llmod@divisor+2,w,c
 15510  0044D4  1015               	iorwf	i2___llmod@divisor+3,w,c
 15511  0044D6  B4D8               	btfsc	status,2,c
 15512  0044D8  D024               	goto	i2l922
 15513  0044DA  0E01               	movlw	1
 15514  0044DC  6E16               	movwf	i2___llmod@counter,c
 15515  0044DE  D006               	goto	i2l4596
 15516  0044E0                     i2l4594:
 15517  0044E0  90D8               	bcf	status,0,c
 15518  0044E2  3612               	rlcf	i2___llmod@divisor,f,c
 15519  0044E4  3613               	rlcf	i2___llmod@divisor+1,f,c
 15520  0044E6  3614               	rlcf	i2___llmod@divisor+2,f,c
 15521  0044E8  3615               	rlcf	i2___llmod@divisor+3,f,c
 15522  0044EA  2A16               	incf	i2___llmod@counter,f,c
 15523  0044EC                     i2l4596:
 15524  0044EC  AE15               	btfss	i2___llmod@divisor+3,7,c
 15525  0044EE  D7F8               	goto	i2l4594
 15526  0044F0                     i2l4598:
 15527  0044F0  5012               	movf	i2___llmod@divisor,w,c
 15528  0044F2  5C0E               	subwf	i2___llmod@dividend,w,c
 15529  0044F4  5013               	movf	i2___llmod@divisor+1,w,c
 15530  0044F6  580F               	subwfb	i2___llmod@dividend+1,w,c
 15531  0044F8  5014               	movf	i2___llmod@divisor+2,w,c
 15532  0044FA  5810               	subwfb	i2___llmod@dividend+2,w,c
 15533  0044FC  5015               	movf	i2___llmod@divisor+3,w,c
 15534  0044FE  5811               	subwfb	i2___llmod@dividend+3,w,c
 15535  004500  A0D8               	btfss	status,0,c
 15536  004502  D008               	goto	i2l4602
 15537  004504  5012               	movf	i2___llmod@divisor,w,c
 15538  004506  5E0E               	subwf	i2___llmod@dividend,f,c
 15539  004508  5013               	movf	i2___llmod@divisor+1,w,c
 15540  00450A  5A0F               	subwfb	i2___llmod@dividend+1,f,c
 15541  00450C  5014               	movf	i2___llmod@divisor+2,w,c
 15542  00450E  5A10               	subwfb	i2___llmod@dividend+2,f,c
 15543  004510  5015               	movf	i2___llmod@divisor+3,w,c
 15544  004512  5A11               	subwfb	i2___llmod@dividend+3,f,c
 15545  004514                     i2l4602:
 15546  004514  90D8               	bcf	status,0,c
 15547  004516  3215               	rrcf	i2___llmod@divisor+3,f,c
 15548  004518  3214               	rrcf	i2___llmod@divisor+2,f,c
 15549  00451A  3213               	rrcf	i2___llmod@divisor+1,f,c
 15550  00451C  3212               	rrcf	i2___llmod@divisor,f,c
 15551  00451E  2E16               	decfsz	i2___llmod@counter,f,c
 15552  004520  D7E7               	goto	i2l4598
 15553  004522                     i2l922:
 15554  004522  C00E  F00E         	movff	i2___llmod@dividend,?i2___llmod
 15555  004526  C00F  F00F         	movff	i2___llmod@dividend+1,?i2___llmod+1
 15556  00452A  C010  F010         	movff	i2___llmod@dividend+2,?i2___llmod+2
 15557  00452E  C011  F011         	movff	i2___llmod@dividend+3,?i2___llmod+3
 15558  004532  0012               	return		;funcret
 15559  004534                     __end_ofi2___llmod:
 15560                           	opt stack 0
 15561                           pclatu	equ	0xFFB
 15562                           pclath	equ	0xFFA
 15563                           tblptru	equ	0xFF8
 15564                           tblptrh	equ	0xFF7
 15565                           tblptrl	equ	0xFF6
 15566                           tablat	equ	0xFF5
 15567                           prodh	equ	0xFF4
 15568                           prodl	equ	0xFF3
 15569                           intcon	equ	0xFF2
 15570                           intcon2	equ	0xFF1
 15571                           intcon3	equ	0xFF0
 15572                           postinc0	equ	0xFEE
 15573                           fsr0h	equ	0xFEA
 15574                           fsr0l	equ	0xFE9
 15575                           wreg	equ	0xFE8
 15576                           fsr1h	equ	0xFE2
 15577                           fsr1l	equ	0xFE1
 15578                           indf2	equ	0xFDF
 15579                           postinc2	equ	0xFDE
 15580                           postdec2	equ	0xFDD
 15581                           fsr2h	equ	0xFDA
 15582                           fsr2l	equ	0xFD9
 15583                           status	equ	0xFD8
 15584                           
 15585 ;; *************** function i2___lldiv *****************
 15586 ;; Defined at:
 15587 ;;		line 8 in file "/Applications/microchip/xc8/v1.40/sources/common/lldiv.c"
 15588 ;; Parameters:    Size  Location     Type
 15589 ;;  dividend        4    0[COMRAM] unsigned long 
 15590 ;;  divisor         4    4[COMRAM] unsigned long 
 15591 ;; Auto vars:     Size  Location     Type
 15592 ;;  __lldiv         4    8[COMRAM] unsigned long 
 15593 ;;  __lldiv         1   12[COMRAM] unsigned char 
 15594 ;; Return value:  Size  Location     Type
 15595 ;;                  4    0[COMRAM] unsigned long 
 15596 ;; Registers used:
 15597 ;;		wreg, status,2, status,0
 15598 ;; Tracked objects:
 15599 ;;		On entry : 0/0
 15600 ;;		On exit  : 0/0
 15601 ;;		Unchanged: 0/0
 15602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15603 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15604 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15606 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15607 ;;Total ram usage:       13 bytes
 15608 ;; Hardware stack levels used:    1
 15609 ;; This function calls:
 15610 ;;		Nothing
 15611 ;; This function is called by:
 15612 ;;		i2_printf
 15613 ;; This function uses a non-reentrant model
 15614 ;;
 15615                           
 15616                           	psect	text61
 15617  0042F8                     __ptext61:
 15618                           	opt stack 0
 15619  0042F8                     i2___lldiv:
 15620                           	opt stack 22
 15621                           
 15622                           ;incstack = 0
 15623  0042F8  0E00               	movlw	0
 15624  0042FA  6E09               	movwf	i2___lldiv@quotient,c
 15625  0042FC  0E00               	movlw	0
 15626  0042FE  6E0A               	movwf	i2___lldiv@quotient+1,c
 15627  004300  0E00               	movlw	0
 15628  004302  6E0B               	movwf	i2___lldiv@quotient+2,c
 15629  004304  0E00               	movlw	0
 15630  004306  6E0C               	movwf	i2___lldiv@quotient+3,c
 15631  004308  5005               	movf	i2___lldiv@divisor,w,c
 15632  00430A  1006               	iorwf	i2___lldiv@divisor+1,w,c
 15633  00430C  1007               	iorwf	i2___lldiv@divisor+2,w,c
 15634  00430E  1008               	iorwf	i2___lldiv@divisor+3,w,c
 15635  004310  B4D8               	btfsc	status,2,c
 15636  004312  D02A               	goto	i2l912
 15637  004314  0E01               	movlw	1
 15638  004316  6E0D               	movwf	i2___lldiv@counter,c
 15639  004318  D006               	goto	i2l4576
 15640  00431A                     i2l4574:
 15641  00431A  90D8               	bcf	status,0,c
 15642  00431C  3605               	rlcf	i2___lldiv@divisor,f,c
 15643  00431E  3606               	rlcf	i2___lldiv@divisor+1,f,c
 15644  004320  3607               	rlcf	i2___lldiv@divisor+2,f,c
 15645  004322  3608               	rlcf	i2___lldiv@divisor+3,f,c
 15646  004324  2A0D               	incf	i2___lldiv@counter,f,c
 15647  004326                     i2l4576:
 15648  004326  AE08               	btfss	i2___lldiv@divisor+3,7,c
 15649  004328  D7F8               	goto	i2l4574
 15650  00432A                     i2l4578:
 15651  00432A  90D8               	bcf	status,0,c
 15652  00432C  3609               	rlcf	i2___lldiv@quotient,f,c
 15653  00432E  360A               	rlcf	i2___lldiv@quotient+1,f,c
 15654  004330  360B               	rlcf	i2___lldiv@quotient+2,f,c
 15655  004332  360C               	rlcf	i2___lldiv@quotient+3,f,c
 15656  004334  5005               	movf	i2___lldiv@divisor,w,c
 15657  004336  5C01               	subwf	i2___lldiv@dividend,w,c
 15658  004338  5006               	movf	i2___lldiv@divisor+1,w,c
 15659  00433A  5802               	subwfb	i2___lldiv@dividend+1,w,c
 15660  00433C  5007               	movf	i2___lldiv@divisor+2,w,c
 15661  00433E  5803               	subwfb	i2___lldiv@dividend+2,w,c
 15662  004340  5008               	movf	i2___lldiv@divisor+3,w,c
 15663  004342  5804               	subwfb	i2___lldiv@dividend+3,w,c
 15664  004344  A0D8               	btfss	status,0,c
 15665  004346  D009               	goto	i2l4586
 15666  004348  5005               	movf	i2___lldiv@divisor,w,c
 15667  00434A  5E01               	subwf	i2___lldiv@dividend,f,c
 15668  00434C  5006               	movf	i2___lldiv@divisor+1,w,c
 15669  00434E  5A02               	subwfb	i2___lldiv@dividend+1,f,c
 15670  004350  5007               	movf	i2___lldiv@divisor+2,w,c
 15671  004352  5A03               	subwfb	i2___lldiv@dividend+2,f,c
 15672  004354  5008               	movf	i2___lldiv@divisor+3,w,c
 15673  004356  5A04               	subwfb	i2___lldiv@dividend+3,f,c
 15674  004358  8009               	bsf	i2___lldiv@quotient,0,c
 15675  00435A                     i2l4586:
 15676  00435A  90D8               	bcf	status,0,c
 15677  00435C  3208               	rrcf	i2___lldiv@divisor+3,f,c
 15678  00435E  3207               	rrcf	i2___lldiv@divisor+2,f,c
 15679  004360  3206               	rrcf	i2___lldiv@divisor+1,f,c
 15680  004362  3205               	rrcf	i2___lldiv@divisor,f,c
 15681  004364  2E0D               	decfsz	i2___lldiv@counter,f,c
 15682  004366  D7E1               	goto	i2l4578
 15683  004368                     i2l912:
 15684  004368  C009  F001         	movff	i2___lldiv@quotient,?i2___lldiv
 15685  00436C  C00A  F002         	movff	i2___lldiv@quotient+1,?i2___lldiv+1
 15686  004370  C00B  F003         	movff	i2___lldiv@quotient+2,?i2___lldiv+2
 15687  004374  C00C  F004         	movff	i2___lldiv@quotient+3,?i2___lldiv+3
 15688  004378  0012               	return		;funcret
 15689  00437A                     __end_ofi2___lldiv:
 15690                           	opt stack 0
 15691                           pclatu	equ	0xFFB
 15692                           pclath	equ	0xFFA
 15693                           tblptru	equ	0xFF8
 15694                           tblptrh	equ	0xFF7
 15695                           tblptrl	equ	0xFF6
 15696                           tablat	equ	0xFF5
 15697                           prodh	equ	0xFF4
 15698                           prodl	equ	0xFF3
 15699                           intcon	equ	0xFF2
 15700                           intcon2	equ	0xFF1
 15701                           intcon3	equ	0xFF0
 15702                           postinc0	equ	0xFEE
 15703                           fsr0h	equ	0xFEA
 15704                           fsr0l	equ	0xFE9
 15705                           wreg	equ	0xFE8
 15706                           fsr1h	equ	0xFE2
 15707                           fsr1l	equ	0xFE1
 15708                           indf2	equ	0xFDF
 15709                           postinc2	equ	0xFDE
 15710                           postdec2	equ	0xFDD
 15711                           fsr2h	equ	0xFDA
 15712                           fsr2l	equ	0xFD9
 15713                           status	equ	0xFD8
 15714                           
 15715 ;; *************** function i2___fttol *****************
 15716 ;; Defined at:
 15717 ;;		line 44 in file "/Applications/microchip/xc8/v1.40/sources/common/fttol.c"
 15718 ;; Parameters:    Size  Location     Type
 15719 ;;  f1              3   42[COMRAM] float 
 15720 ;; Auto vars:     Size  Location     Type
 15721 ;;  __fttol         4   52[COMRAM] unsigned long 
 15722 ;;  __fttol         1   56[COMRAM] unsigned char 
 15723 ;;  __fttol         1   51[COMRAM] unsigned char 
 15724 ;; Return value:  Size  Location     Type
 15725 ;;                  4   42[COMRAM] long 
 15726 ;; Registers used:
 15727 ;;		wreg, status,2, status,0
 15728 ;; Tracked objects:
 15729 ;;		On entry : 0/0
 15730 ;;		On exit  : 0/0
 15731 ;;		Unchanged: 0/0
 15732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15733 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15734 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15735 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15736 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15737 ;;Total ram usage:       15 bytes
 15738 ;; Hardware stack levels used:    1
 15739 ;; This function calls:
 15740 ;;		Nothing
 15741 ;; This function is called by:
 15742 ;;		i2_printf
 15743 ;; This function uses a non-reentrant model
 15744 ;;
 15745                           
 15746                           	psect	text62
 15747  0039FE                     __ptext62:
 15748                           	opt stack 0
 15749  0039FE                     i2___fttol:
 15750                           	opt stack 22
 15751                           
 15752                           ;incstack = 0
 15753  0039FE  C02D  F02F         	movff	i2___fttol@f1+2,??i2___fttol
 15754  003A02  6A30               	clrf	(??i2___fttol+1)& (0+255),c
 15755  003A04  6A31               	clrf	(??i2___fttol+2)& (0+255),c
 15756  003A06  342C               	rlcf	i2___fttol@f1+1,w,c
 15757  003A08  362F               	rlcf	??i2___fttol& (0+255),f,c
 15758  003A0A  E301               	bnc	u512_41
 15759  003A0C  8030               	bsf	(??i2___fttol+1)& (0+255),0,c
 15760  003A0E                     u512_41:
 15761  003A0E  502F               	movf	??i2___fttol,w,c
 15762  003A10  6E39               	movwf	i2___fttol@exp1,c
 15763  003A12  5039               	movf	i2___fttol@exp1,w,c
 15764  003A14  A4D8               	btfss	status,2,c
 15765  003A16  D009               	goto	i2l4516
 15766  003A18  0E00               	movlw	0
 15767  003A1A  6E2B               	movwf	?i2___fttol,c
 15768  003A1C  0E00               	movlw	0
 15769  003A1E  6E2C               	movwf	?i2___fttol+1,c
 15770  003A20  0E00               	movlw	0
 15771  003A22  6E2D               	movwf	?i2___fttol+2,c
 15772  003A24  0E00               	movlw	0
 15773  003A26  6E2E               	movwf	?i2___fttol+3,c
 15774  003A28  0012               	return	
 15775  003A2A                     i2l4516:
 15776  003A2A  0E17               	movlw	23
 15777  003A2C  6E2F               	movwf	??i2___fttol& (0+255),c
 15778  003A2E  C02B  F030         	movff	i2___fttol@f1,??i2___fttol+1
 15779  003A32  C02C  F031         	movff	i2___fttol@f1+1,??i2___fttol+2
 15780  003A36  C02D  F032         	movff	i2___fttol@f1+2,??i2___fttol+3
 15781  003A3A  282F               	incf	??i2___fttol,w,c
 15782  003A3C  6E33               	movwf	(??i2___fttol+4)& (0+255),c
 15783  003A3E  D004               	goto	i2u514_40
 15784  003A40                     i2u514_45:
 15785  003A40  90D8               	bcf	status,0,c
 15786  003A42  3232               	rrcf	??i2___fttol+3,f,c
 15787  003A44  3231               	rrcf	??i2___fttol+2,f,c
 15788  003A46  3230               	rrcf	??i2___fttol+1,f,c
 15789  003A48                     i2u514_40:
 15790  003A48  2E33               	decfsz	(??i2___fttol+4)& (0+255),f,c
 15791  003A4A  D7FA               	goto	i2u514_45
 15792  003A4C  5030               	movf	??i2___fttol+1,w,c
 15793  003A4E  6E34               	movwf	i2___fttol@sign1,c
 15794  003A50  8E2C               	bsf	i2___fttol@f1+1,7,c
 15795  003A52  0EFF               	movlw	255
 15796  003A54  162B               	andwf	i2___fttol@f1,f,c
 15797  003A56  0EFF               	movlw	255
 15798  003A58  162C               	andwf	i2___fttol@f1+1,f,c
 15799  003A5A  0E00               	movlw	0
 15800  003A5C  162D               	andwf	i2___fttol@f1+2,f,c
 15801  003A5E  502B               	movf	i2___fttol@f1,w,c
 15802  003A60  6E35               	movwf	i2___fttol@lval,c
 15803  003A62  502C               	movf	i2___fttol@f1+1,w,c
 15804  003A64  6E36               	movwf	i2___fttol@lval+1,c
 15805  003A66  502D               	movf	i2___fttol@f1+2,w,c
 15806  003A68  6E37               	movwf	i2___fttol@lval+2,c
 15807  003A6A  6A38               	clrf	i2___fttol@lval+3,c
 15808  003A6C  0E8E               	movlw	142
 15809  003A6E  5E39               	subwf	i2___fttol@exp1,f,c
 15810  003A70  AE39               	btfss	i2___fttol@exp1,7,c
 15811  003A72  D016               	goto	i2l4538
 15812  003A74  5039               	movf	i2___fttol@exp1,w,c
 15813  003A76  0A80               	xorlw	128
 15814  003A78  0F8F               	addlw	143
 15815  003A7A  B0D8               	btfsc	status,0,c
 15816  003A7C  D009               	goto	i2l4534
 15817  003A7E  0E00               	movlw	0
 15818  003A80  6E2B               	movwf	?i2___fttol,c
 15819  003A82  0E00               	movlw	0
 15820  003A84  6E2C               	movwf	?i2___fttol+1,c
 15821  003A86  0E00               	movlw	0
 15822  003A88  6E2D               	movwf	?i2___fttol+2,c
 15823  003A8A  0E00               	movlw	0
 15824  003A8C  6E2E               	movwf	?i2___fttol+3,c
 15825  003A8E  0012               	return	
 15826  003A90                     i2l4534:
 15827  003A90  90D8               	bcf	status,0,c
 15828  003A92  3238               	rrcf	i2___fttol@lval+3,f,c
 15829  003A94  3237               	rrcf	i2___fttol@lval+2,f,c
 15830  003A96  3236               	rrcf	i2___fttol@lval+1,f,c
 15831  003A98  3235               	rrcf	i2___fttol@lval,f,c
 15832  003A9A  3E39               	incfsz	i2___fttol@exp1,f,c
 15833  003A9C  D7F9               	goto	i2l4534
 15834  003A9E  D015               	goto	i2l4548
 15835  003AA0                     i2l4538:
 15836  003AA0  0E17               	movlw	23
 15837  003AA2  6439               	cpfsgt	i2___fttol@exp1,c
 15838  003AA4  D00F               	goto	i2l4546
 15839  003AA6  0E00               	movlw	0
 15840  003AA8  6E2B               	movwf	?i2___fttol,c
 15841  003AAA  0E00               	movlw	0
 15842  003AAC  6E2C               	movwf	?i2___fttol+1,c
 15843  003AAE  0E00               	movlw	0
 15844  003AB0  6E2D               	movwf	?i2___fttol+2,c
 15845  003AB2  0E00               	movlw	0
 15846  003AB4  6E2E               	movwf	?i2___fttol+3,c
 15847  003AB6  0012               	return	
 15848  003AB8                     i2l4544:
 15849  003AB8  90D8               	bcf	status,0,c
 15850  003ABA  3635               	rlcf	i2___fttol@lval,f,c
 15851  003ABC  3636               	rlcf	i2___fttol@lval+1,f,c
 15852  003ABE  3637               	rlcf	i2___fttol@lval+2,f,c
 15853  003AC0  3638               	rlcf	i2___fttol@lval+3,f,c
 15854  003AC2  0639               	decf	i2___fttol@exp1,f,c
 15855  003AC4                     i2l4546:
 15856  003AC4  5039               	movf	i2___fttol@exp1,w,c
 15857  003AC6  A4D8               	btfss	status,2,c
 15858  003AC8  D7F7               	goto	i2l4544
 15859  003ACA                     i2l4548:
 15860  003ACA  5034               	movf	i2___fttol@sign1,w,c
 15861  003ACC  B4D8               	btfsc	status,2,c
 15862  003ACE  D008               	goto	i2l4552
 15863  003AD0  1E38               	comf	i2___fttol@lval+3,f,c
 15864  003AD2  1E37               	comf	i2___fttol@lval+2,f,c
 15865  003AD4  1E36               	comf	i2___fttol@lval+1,f,c
 15866  003AD6  6C35               	negf	i2___fttol@lval,c
 15867  003AD8  0E00               	movlw	0
 15868  003ADA  2236               	addwfc	i2___fttol@lval+1,f,c
 15869  003ADC  2237               	addwfc	i2___fttol@lval+2,f,c
 15870  003ADE  2238               	addwfc	i2___fttol@lval+3,f,c
 15871  003AE0                     i2l4552:
 15872  003AE0  C035  F02B         	movff	i2___fttol@lval,?i2___fttol
 15873  003AE4  C036  F02C         	movff	i2___fttol@lval+1,?i2___fttol+1
 15874  003AE8  C037  F02D         	movff	i2___fttol@lval+2,?i2___fttol+2
 15875  003AEC  C038  F02E         	movff	i2___fttol@lval+3,?i2___fttol+3
 15876  003AF0  0012               	return	
 15877  003AF2                     __end_ofi2___fttol:
 15878                           	opt stack 0
 15879                           pclatu	equ	0xFFB
 15880                           pclath	equ	0xFFA
 15881                           tblptru	equ	0xFF8
 15882                           tblptrh	equ	0xFF7
 15883                           tblptrl	equ	0xFF6
 15884                           tablat	equ	0xFF5
 15885                           prodh	equ	0xFF4
 15886                           prodl	equ	0xFF3
 15887                           intcon	equ	0xFF2
 15888                           intcon2	equ	0xFF1
 15889                           intcon3	equ	0xFF0
 15890                           postinc0	equ	0xFEE
 15891                           fsr0h	equ	0xFEA
 15892                           fsr0l	equ	0xFE9
 15893                           wreg	equ	0xFE8
 15894                           fsr1h	equ	0xFE2
 15895                           fsr1l	equ	0xFE1
 15896                           indf2	equ	0xFDF
 15897                           postinc2	equ	0xFDE
 15898                           postdec2	equ	0xFDD
 15899                           fsr2h	equ	0xFDA
 15900                           fsr2l	equ	0xFD9
 15901                           status	equ	0xFD8
 15902                           
 15903 ;; *************** function i2___ftsub *****************
 15904 ;; Defined at:
 15905 ;;		line 20 in file "/Applications/microchip/xc8/v1.40/sources/common/ftsub.c"
 15906 ;; Parameters:    Size  Location     Type
 15907 ;;  f1              3   57[COMRAM] float 
 15908 ;;  f2              3   60[COMRAM] float 
 15909 ;; Auto vars:     Size  Location     Type
 15910 ;;		None
 15911 ;; Return value:  Size  Location     Type
 15912 ;;                  3   57[COMRAM] float 
 15913 ;; Registers used:
 15914 ;;		wreg, status,2, status,0, cstack
 15915 ;; Tracked objects:
 15916 ;;		On entry : 0/0
 15917 ;;		On exit  : 0/0
 15918 ;;		Unchanged: 0/0
 15919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15920 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15923 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15924 ;;Total ram usage:        6 bytes
 15925 ;; Hardware stack levels used:    1
 15926 ;; Hardware stack levels required when called:    2
 15927 ;; This function calls:
 15928 ;;		i2___ftadd
 15929 ;; This function is called by:
 15930 ;;		i2_printf
 15931 ;; This function uses a non-reentrant model
 15932 ;;
 15933                           
 15934                           	psect	text63
 15935  0047C8                     __ptext63:
 15936                           	opt stack 0
 15937  0047C8                     i2___ftsub:
 15938                           	opt stack 20
 15939                           
 15940                           ;incstack = 0
 15941  0047C8  503D               	movf	i2___ftsub@f2,w,c
 15942  0047CA  103E               	iorwf	i2___ftsub@f2+1,w,c
 15943  0047CC  103F               	iorwf	i2___ftsub@f2+2,w,c
 15944  0047CE  B4D8               	btfsc	status,2,c
 15945  0047D0  D006               	goto	i2l4506
 15946  0047D2  0E00               	movlw	0
 15947  0047D4  1A3D               	xorwf	i2___ftsub@f2,f,c
 15948  0047D6  0E00               	movlw	0
 15949  0047D8  1A3E               	xorwf	i2___ftsub@f2+1,f,c
 15950  0047DA  0E80               	movlw	128
 15951  0047DC  1A3F               	xorwf	i2___ftsub@f2+2,f,c
 15952  0047DE                     i2l4506:
 15953  0047DE  C03A  F02E         	movff	i2___ftsub@f1,i2___ftadd@f1
 15954  0047E2  C03B  F02F         	movff	i2___ftsub@f1+1,i2___ftadd@f1+1
 15955  0047E6  C03C  F030         	movff	i2___ftsub@f1+2,i2___ftadd@f1+2
 15956  0047EA  C03D  F031         	movff	i2___ftsub@f2,i2___ftadd@f2
 15957  0047EE  C03E  F032         	movff	i2___ftsub@f2+1,i2___ftadd@f2+1
 15958  0047F2  C03F  F033         	movff	i2___ftsub@f2+2,i2___ftadd@f2+2
 15959  0047F6  ECDA  F015         	call	i2___ftadd	;wreg free
 15960  0047FA  C02E  F03A         	movff	?i2___ftadd,?i2___ftsub
 15961  0047FE  C02F  F03B         	movff	?i2___ftadd+1,?i2___ftsub+1
 15962  004802  C030  F03C         	movff	?i2___ftadd+2,?i2___ftsub+2
 15963  004806  0012               	return	
 15964  004808                     __end_ofi2___ftsub:
 15965                           	opt stack 0
 15966                           pclatu	equ	0xFFB
 15967                           pclath	equ	0xFFA
 15968                           tblptru	equ	0xFF8
 15969                           tblptrh	equ	0xFF7
 15970                           tblptrl	equ	0xFF6
 15971                           tablat	equ	0xFF5
 15972                           prodh	equ	0xFF4
 15973                           prodl	equ	0xFF3
 15974                           intcon	equ	0xFF2
 15975                           intcon2	equ	0xFF1
 15976                           intcon3	equ	0xFF0
 15977                           postinc0	equ	0xFEE
 15978                           fsr0h	equ	0xFEA
 15979                           fsr0l	equ	0xFE9
 15980                           wreg	equ	0xFE8
 15981                           fsr1h	equ	0xFE2
 15982                           fsr1l	equ	0xFE1
 15983                           indf2	equ	0xFDF
 15984                           postinc2	equ	0xFDE
 15985                           postdec2	equ	0xFDD
 15986                           fsr2h	equ	0xFDA
 15987                           fsr2l	equ	0xFD9
 15988                           status	equ	0xFD8
 15989                           
 15990 ;; *************** function i2___ftadd *****************
 15991 ;; Defined at:
 15992 ;;		line 86 in file "/Applications/microchip/xc8/v1.40/sources/common/ftadd.c"
 15993 ;; Parameters:    Size  Location     Type
 15994 ;;  f1              3   45[COMRAM] float 
 15995 ;;  f2              3   48[COMRAM] float 
 15996 ;; Auto vars:     Size  Location     Type
 15997 ;;  __ftadd         1   56[COMRAM] unsigned char 
 15998 ;;  __ftadd         1   55[COMRAM] unsigned char 
 15999 ;;  __ftadd         1   54[COMRAM] unsigned char 
 16000 ;; Return value:  Size  Location     Type
 16001 ;;                  3   45[COMRAM] float 
 16002 ;; Registers used:
 16003 ;;		wreg, status,2, status,0, cstack
 16004 ;; Tracked objects:
 16005 ;;		On entry : 0/0
 16006 ;;		On exit  : 0/0
 16007 ;;		Unchanged: 0/0
 16008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16009 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16010 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16011 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16012 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16013 ;;Total ram usage:       12 bytes
 16014 ;; Hardware stack levels used:    1
 16015 ;; Hardware stack levels required when called:    1
 16016 ;; This function calls:
 16017 ;;		i2___ftpack
 16018 ;; This function is called by:
 16019 ;;		i2_printf
 16020 ;;		i2___ftsub
 16021 ;; This function uses a non-reentrant model
 16022 ;;
 16023                           
 16024                           	psect	text64
 16025  002BB4                     __ptext64:
 16026                           	opt stack 0
 16027  002BB4                     i2___ftadd:
 16028                           	opt stack 20
 16029                           
 16030                           ;incstack = 0
 16031  002BB4  C030  F034         	movff	i2___ftadd@f1+2,??i2___ftadd
 16032  002BB8  6A35               	clrf	(??i2___ftadd+1)& (0+255),c
 16033  002BBA  6A36               	clrf	(??i2___ftadd+2)& (0+255),c
 16034  002BBC  342F               	rlcf	i2___ftadd@f1+1,w,c
 16035  002BBE  3634               	rlcf	??i2___ftadd& (0+255),f,c
 16036  002BC0  E301               	bnc	u410_41
 16037  002BC2  8035               	bsf	(??i2___ftadd+1)& (0+255),0,c
 16038  002BC4                     u410_41:
 16039  002BC4  5034               	movf	??i2___ftadd,w,c
 16040  002BC6  6E39               	movwf	i2___ftadd@exp1,c
 16041  002BC8  C033  F034         	movff	i2___ftadd@f2+2,??i2___ftadd
 16042  002BCC  6A35               	clrf	(??i2___ftadd+1)& (0+255),c
 16043  002BCE  6A36               	clrf	(??i2___ftadd+2)& (0+255),c
 16044  002BD0  3432               	rlcf	i2___ftadd@f2+1,w,c
 16045  002BD2  3634               	rlcf	??i2___ftadd& (0+255),f,c
 16046  002BD4  E301               	bnc	u411_41
 16047  002BD6  8035               	bsf	(??i2___ftadd+1)& (0+255),0,c
 16048  002BD8                     u411_41:
 16049  002BD8  5034               	movf	??i2___ftadd,w,c
 16050  002BDA  6E38               	movwf	i2___ftadd@exp2,c
 16051  002BDC  5039               	movf	i2___ftadd@exp1,w,c
 16052  002BDE  B4D8               	btfsc	status,2,c
 16053  002BE0  D00B               	goto	i2l788
 16054  002BE2  5038               	movf	i2___ftadd@exp2,w,c
 16055  002BE4  5C39               	subwf	i2___ftadd@exp1,w,c
 16056  002BE6  B0D8               	btfsc	status,0,c
 16057  002BE8  D00E               	goto	i2l3870
 16058  002BEA  5039               	movf	i2___ftadd@exp1,w,c
 16059  002BEC  0800               	sublw	0
 16060  002BEE  2438               	addwf	i2___ftadd@exp2,w,c
 16061  002BF0  6E34               	movwf	??i2___ftadd& (0+255),c
 16062  002BF2  0E18               	movlw	24
 16063  002BF4  6434               	cpfsgt	??i2___ftadd,c
 16064  002BF6  D007               	goto	i2l3870
 16065  002BF8                     i2l788:
 16066  002BF8  C031  F02E         	movff	i2___ftadd@f2,?i2___ftadd
 16067  002BFC  C032  F02F         	movff	i2___ftadd@f2+1,?i2___ftadd+1
 16068  002C00  C033  F030         	movff	i2___ftadd@f2+2,?i2___ftadd+2
 16069  002C04  0012               	return	
 16070  002C06                     i2l3870:
 16071  002C06  5038               	movf	i2___ftadd@exp2,w,c
 16072  002C08  B4D8               	btfsc	status,2,c
 16073  002C0A  D00B               	goto	i2l792
 16074  002C0C  5039               	movf	i2___ftadd@exp1,w,c
 16075  002C0E  5C38               	subwf	i2___ftadd@exp2,w,c
 16076  002C10  B0D8               	btfsc	status,0,c
 16077  002C12  D00E               	goto	i2l3876
 16078  002C14  5038               	movf	i2___ftadd@exp2,w,c
 16079  002C16  0800               	sublw	0
 16080  002C18  2439               	addwf	i2___ftadd@exp1,w,c
 16081  002C1A  6E34               	movwf	??i2___ftadd& (0+255),c
 16082  002C1C  0E18               	movlw	24
 16083  002C1E  6434               	cpfsgt	??i2___ftadd,c
 16084  002C20  D007               	goto	i2l3876
 16085  002C22                     i2l792:
 16086  002C22  C02E  F02E         	movff	i2___ftadd@f1,?i2___ftadd
 16087  002C26  C02F  F02F         	movff	i2___ftadd@f1+1,?i2___ftadd+1
 16088  002C2A  C030  F030         	movff	i2___ftadd@f1+2,?i2___ftadd+2
 16089  002C2E  0012               	return	
 16090  002C30                     i2l3876:
 16091  002C30  0E06               	movlw	6
 16092  002C32  6E37               	movwf	i2___ftadd@sign,c
 16093  002C34  BE30               	btfsc	i2___ftadd@f1+2,7,c
 16094  002C36  8E37               	bsf	i2___ftadd@sign,7,c
 16095  002C38  BE33               	btfsc	i2___ftadd@f2+2,7,c
 16096  002C3A  8C37               	bsf	i2___ftadd@sign,6,c
 16097  002C3C  8E2F               	bsf	i2___ftadd@f1+1,7,c
 16098  002C3E  0EFF               	movlw	255
 16099  002C40  162E               	andwf	i2___ftadd@f1,f,c
 16100  002C42  0EFF               	movlw	255
 16101  002C44  162F               	andwf	i2___ftadd@f1+1,f,c
 16102  002C46  0E00               	movlw	0
 16103  002C48  1630               	andwf	i2___ftadd@f1+2,f,c
 16104  002C4A  8E32               	bsf	i2___ftadd@f2+1,7,c
 16105  002C4C  0EFF               	movlw	255
 16106  002C4E  1631               	andwf	i2___ftadd@f2,f,c
 16107  002C50  0EFF               	movlw	255
 16108  002C52  1632               	andwf	i2___ftadd@f2+1,f,c
 16109  002C54  0E00               	movlw	0
 16110  002C56  1633               	andwf	i2___ftadd@f2+2,f,c
 16111  002C58  5038               	movf	i2___ftadd@exp2,w,c
 16112  002C5A  5C39               	subwf	i2___ftadd@exp1,w,c
 16113  002C5C  B0D8               	btfsc	status,0,c
 16114  002C5E  D01B               	goto	i2l3902
 16115  002C60                     i2l3892:
 16116  002C60  90D8               	bcf	status,0,c
 16117  002C62  3631               	rlcf	i2___ftadd@f2,f,c
 16118  002C64  3632               	rlcf	i2___ftadd@f2+1,f,c
 16119  002C66  3633               	rlcf	i2___ftadd@f2+2,f,c
 16120  002C68  0638               	decf	i2___ftadd@exp2,f,c
 16121  002C6A  5039               	movf	i2___ftadd@exp1,w,c
 16122  002C6C  1838               	xorwf	i2___ftadd@exp2,w,c
 16123  002C6E  B4D8               	btfsc	status,2,c
 16124  002C70  D00D               	goto	i2l3900
 16125  002C72  0637               	decf	i2___ftadd@sign,f,c
 16126  002C74  C037  F034         	movff	i2___ftadd@sign,??i2___ftadd
 16127  002C78  0E07               	movlw	7
 16128  002C7A  1634               	andwf	??i2___ftadd,f,c
 16129  002C7C  B4D8               	btfsc	status,2,c
 16130  002C7E  D006               	goto	i2l3900
 16131  002C80  D7EF               	goto	i2l3892
 16132  002C82                     i2l3898:
 16133  002C82  90D8               	bcf	status,0,c
 16134  002C84  3230               	rrcf	i2___ftadd@f1+2,f,c
 16135  002C86  322F               	rrcf	i2___ftadd@f1+1,f,c
 16136  002C88  322E               	rrcf	i2___ftadd@f1,f,c
 16137  002C8A  2A39               	incf	i2___ftadd@exp1,f,c
 16138  002C8C                     i2l3900:
 16139  002C8C  5038               	movf	i2___ftadd@exp2,w,c
 16140  002C8E  1839               	xorwf	i2___ftadd@exp1,w,c
 16141  002C90  B4D8               	btfsc	status,2,c
 16142  002C92  D01F               	goto	i2l803
 16143  002C94  D7F6               	goto	i2l3898
 16144  002C96                     i2l3902:
 16145  002C96  5039               	movf	i2___ftadd@exp1,w,c
 16146  002C98  5C38               	subwf	i2___ftadd@exp2,w,c
 16147  002C9A  B0D8               	btfsc	status,0,c
 16148  002C9C  D01A               	goto	i2l803
 16149  002C9E                     i2l3904:
 16150  002C9E  90D8               	bcf	status,0,c
 16151  002CA0  362E               	rlcf	i2___ftadd@f1,f,c
 16152  002CA2  362F               	rlcf	i2___ftadd@f1+1,f,c
 16153  002CA4  3630               	rlcf	i2___ftadd@f1+2,f,c
 16154  002CA6  0639               	decf	i2___ftadd@exp1,f,c
 16155  002CA8  5039               	movf	i2___ftadd@exp1,w,c
 16156  002CAA  1838               	xorwf	i2___ftadd@exp2,w,c
 16157  002CAC  B4D8               	btfsc	status,2,c
 16158  002CAE  D00D               	goto	i2l3912
 16159  002CB0  0637               	decf	i2___ftadd@sign,f,c
 16160  002CB2  C037  F034         	movff	i2___ftadd@sign,??i2___ftadd
 16161  002CB6  0E07               	movlw	7
 16162  002CB8  1634               	andwf	??i2___ftadd,f,c
 16163  002CBA  B4D8               	btfsc	status,2,c
 16164  002CBC  D006               	goto	i2l3912
 16165  002CBE  D7EF               	goto	i2l3904
 16166  002CC0                     i2l3910:
 16167  002CC0  90D8               	bcf	status,0,c
 16168  002CC2  3233               	rrcf	i2___ftadd@f2+2,f,c
 16169  002CC4  3232               	rrcf	i2___ftadd@f2+1,f,c
 16170  002CC6  3231               	rrcf	i2___ftadd@f2,f,c
 16171  002CC8  2A38               	incf	i2___ftadd@exp2,f,c
 16172  002CCA                     i2l3912:
 16173  002CCA  5038               	movf	i2___ftadd@exp2,w,c
 16174  002CCC  1839               	xorwf	i2___ftadd@exp1,w,c
 16175  002CCE  A4D8               	btfss	status,2,c
 16176  002CD0  D7F7               	goto	i2l3910
 16177  002CD2                     i2l803:
 16178  002CD2  AE37               	btfss	i2___ftadd@sign,7,c
 16179  002CD4  D00C               	goto	i2l812
 16180  002CD6  0EFF               	movlw	255
 16181  002CD8  1A2E               	xorwf	i2___ftadd@f1,f,c
 16182  002CDA  0EFF               	movlw	255
 16183  002CDC  1A2F               	xorwf	i2___ftadd@f1+1,f,c
 16184  002CDE  0EFF               	movlw	255
 16185  002CE0  1A30               	xorwf	i2___ftadd@f1+2,f,c
 16186  002CE2  0E01               	movlw	1
 16187  002CE4  262E               	addwf	i2___ftadd@f1,f,c
 16188  002CE6  0E00               	movlw	0
 16189  002CE8  222F               	addwfc	i2___ftadd@f1+1,f,c
 16190  002CEA  0E00               	movlw	0
 16191  002CEC  2230               	addwfc	i2___ftadd@f1+2,f,c
 16192  002CEE                     i2l812:
 16193  002CEE  AC37               	btfss	i2___ftadd@sign,6,c
 16194  002CF0  D00C               	goto	i2l3918
 16195  002CF2  0EFF               	movlw	255
 16196  002CF4  1A31               	xorwf	i2___ftadd@f2,f,c
 16197  002CF6  0EFF               	movlw	255
 16198  002CF8  1A32               	xorwf	i2___ftadd@f2+1,f,c
 16199  002CFA  0EFF               	movlw	255
 16200  002CFC  1A33               	xorwf	i2___ftadd@f2+2,f,c
 16201  002CFE  0E01               	movlw	1
 16202  002D00  2631               	addwf	i2___ftadd@f2,f,c
 16203  002D02  0E00               	movlw	0
 16204  002D04  2232               	addwfc	i2___ftadd@f2+1,f,c
 16205  002D06  0E00               	movlw	0
 16206  002D08  2233               	addwfc	i2___ftadd@f2+2,f,c
 16207  002D0A                     i2l3918:
 16208  002D0A  0E00               	movlw	0
 16209  002D0C  6E37               	movwf	i2___ftadd@sign,c
 16210  002D0E  502E               	movf	i2___ftadd@f1,w,c
 16211  002D10  2631               	addwf	i2___ftadd@f2,f,c
 16212  002D12  502F               	movf	i2___ftadd@f1+1,w,c
 16213  002D14  2232               	addwfc	i2___ftadd@f2+1,f,c
 16214  002D16  5030               	movf	i2___ftadd@f1+2,w,c
 16215  002D18  2233               	addwfc	i2___ftadd@f2+2,f,c
 16216  002D1A  AE33               	btfss	i2___ftadd@f2+2,7,c
 16217  002D1C  D00E               	goto	i2l3928
 16218  002D1E  0EFF               	movlw	255
 16219  002D20  1A31               	xorwf	i2___ftadd@f2,f,c
 16220  002D22  0EFF               	movlw	255
 16221  002D24  1A32               	xorwf	i2___ftadd@f2+1,f,c
 16222  002D26  0EFF               	movlw	255
 16223  002D28  1A33               	xorwf	i2___ftadd@f2+2,f,c
 16224  002D2A  0E01               	movlw	1
 16225  002D2C  2631               	addwf	i2___ftadd@f2,f,c
 16226  002D2E  0E00               	movlw	0
 16227  002D30  2232               	addwfc	i2___ftadd@f2+1,f,c
 16228  002D32  0E00               	movlw	0
 16229  002D34  2233               	addwfc	i2___ftadd@f2+2,f,c
 16230  002D36  0E01               	movlw	1
 16231  002D38  6E37               	movwf	i2___ftadd@sign,c
 16232  002D3A                     i2l3928:
 16233  002D3A  C031  F001         	movff	i2___ftadd@f2,i2___ftpack@arg
 16234  002D3E  C032  F002         	movff	i2___ftadd@f2+1,i2___ftpack@arg+1
 16235  002D42  C033  F003         	movff	i2___ftadd@f2+2,i2___ftpack@arg+2
 16236  002D46  C039  F004         	movff	i2___ftadd@exp1,i2___ftpack@exp
 16237  002D4A  C037  F005         	movff	i2___ftadd@sign,i2___ftpack@sign
 16238  002D4E  EC55  F01F         	call	i2___ftpack	;wreg free
 16239  002D52  C001  F02E         	movff	?i2___ftpack,?i2___ftadd
 16240  002D56  C002  F02F         	movff	?i2___ftpack+1,?i2___ftadd+1
 16241  002D5A  C003  F030         	movff	?i2___ftpack+2,?i2___ftadd+2
 16242  002D5E  0012               	return	
 16243  002D60                     __end_ofi2___ftadd:
 16244                           	opt stack 0
 16245                           pclatu	equ	0xFFB
 16246                           pclath	equ	0xFFA
 16247                           tblptru	equ	0xFF8
 16248                           tblptrh	equ	0xFF7
 16249                           tblptrl	equ	0xFF6
 16250                           tablat	equ	0xFF5
 16251                           prodh	equ	0xFF4
 16252                           prodl	equ	0xFF3
 16253                           intcon	equ	0xFF2
 16254                           intcon2	equ	0xFF1
 16255                           intcon3	equ	0xFF0
 16256                           postinc0	equ	0xFEE
 16257                           fsr0h	equ	0xFEA
 16258                           fsr0l	equ	0xFE9
 16259                           wreg	equ	0xFE8
 16260                           fsr1h	equ	0xFE2
 16261                           fsr1l	equ	0xFE1
 16262                           indf2	equ	0xFDF
 16263                           postinc2	equ	0xFDE
 16264                           postdec2	equ	0xFDD
 16265                           fsr2h	equ	0xFDA
 16266                           fsr2l	equ	0xFD9
 16267                           status	equ	0xFD8
 16268                           
 16269 ;; *************** function i2___ftpack *****************
 16270 ;; Defined at:
 16271 ;;		line 62 in file "/Applications/microchip/xc8/v1.40/sources/common/float.c"
 16272 ;; Parameters:    Size  Location     Type
 16273 ;;  arg             3    0[COMRAM] unsigned um
 16274 ;;  exp             1    3[COMRAM] unsigned char 
 16275 ;;  sign            1    4[COMRAM] unsigned char 
 16276 ;; Auto vars:     Size  Location     Type
 16277 ;;		None
 16278 ;; Return value:  Size  Location     Type
 16279 ;;                  3    0[COMRAM] float 
 16280 ;; Registers used:
 16281 ;;		wreg, status,2, status,0
 16282 ;; Tracked objects:
 16283 ;;		On entry : 0/0
 16284 ;;		On exit  : 0/0
 16285 ;;		Unchanged: 0/0
 16286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16287 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16288 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16289 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16290 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16291 ;;Total ram usage:        8 bytes
 16292 ;; Hardware stack levels used:    1
 16293 ;; This function calls:
 16294 ;;		Nothing
 16295 ;; This function is called by:
 16296 ;;		i2___ftadd
 16297 ;;		i2___ftmul
 16298 ;;		i2___lltoft
 16299 ;; This function uses a non-reentrant model
 16300 ;;
 16301                           
 16302                           	psect	text65
 16303  003EAA                     __ptext65:
 16304                           	opt stack 0
 16305  003EAA                     i2___ftpack:
 16306                           	opt stack 20
 16307                           
 16308                           ;incstack = 0
 16309  003EAA  5004               	movf	i2___ftpack@exp,w,c
 16310  003EAC  B4D8               	btfsc	status,2,c
 16311  003EAE  D005               	goto	i2l3504
 16312  003EB0  5001               	movf	i2___ftpack@arg,w,c
 16313  003EB2  1002               	iorwf	i2___ftpack@arg+1,w,c
 16314  003EB4  1003               	iorwf	i2___ftpack@arg+2,w,c
 16315  003EB6  A4D8               	btfss	status,2,c
 16316  003EB8  D00C               	goto	i2l3510
 16317  003EBA                     i2l3504:
 16318  003EBA  0E00               	movlw	0
 16319  003EBC  6E01               	movwf	?i2___ftpack,c
 16320  003EBE  0E00               	movlw	0
 16321  003EC0  6E02               	movwf	?i2___ftpack+1,c
 16322  003EC2  0E00               	movlw	0
 16323  003EC4  6E03               	movwf	?i2___ftpack+2,c
 16324  003EC6  0012               	return	
 16325  003EC8                     i2l3508:
 16326  003EC8  2A04               	incf	i2___ftpack@exp,f,c
 16327  003ECA  90D8               	bcf	status,0,c
 16328  003ECC  3203               	rrcf	i2___ftpack@arg+2,f,c
 16329  003ECE  3202               	rrcf	i2___ftpack@arg+1,f,c
 16330  003ED0  3201               	rrcf	i2___ftpack@arg,f,c
 16331  003ED2                     i2l3510:
 16332  003ED2  0E00               	movlw	0
 16333  003ED4  1401               	andwf	i2___ftpack@arg,w,c
 16334  003ED6  6E06               	movwf	??i2___ftpack& (0+255),c
 16335  003ED8  0E00               	movlw	0
 16336  003EDA  1402               	andwf	i2___ftpack@arg+1,w,c
 16337  003EDC  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 16338  003EDE  0EFE               	movlw	254
 16339  003EE0  1403               	andwf	i2___ftpack@arg+2,w,c
 16340  003EE2  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 16341  003EE4  5006               	movf	??i2___ftpack,w,c
 16342  003EE6  1007               	iorwf	??i2___ftpack+1,w,c
 16343  003EE8  1008               	iorwf	??i2___ftpack+2,w,c
 16344  003EEA  B4D8               	btfsc	status,2,c
 16345  003EEC  D00C               	goto	i2l3516
 16346  003EEE  D7EC               	goto	i2l3508
 16347  003EF0                     i2l3512:
 16348  003EF0  2A04               	incf	i2___ftpack@exp,f,c
 16349  003EF2  0E01               	movlw	1
 16350  003EF4  2601               	addwf	i2___ftpack@arg,f,c
 16351  003EF6  0E00               	movlw	0
 16352  003EF8  2202               	addwfc	i2___ftpack@arg+1,f,c
 16353  003EFA  0E00               	movlw	0
 16354  003EFC  2203               	addwfc	i2___ftpack@arg+2,f,c
 16355  003EFE  90D8               	bcf	status,0,c
 16356  003F00  3203               	rrcf	i2___ftpack@arg+2,f,c
 16357  003F02  3202               	rrcf	i2___ftpack@arg+1,f,c
 16358  003F04  3201               	rrcf	i2___ftpack@arg,f,c
 16359  003F06                     i2l3516:
 16360  003F06  0E00               	movlw	0
 16361  003F08  1401               	andwf	i2___ftpack@arg,w,c
 16362  003F0A  6E06               	movwf	??i2___ftpack& (0+255),c
 16363  003F0C  0E00               	movlw	0
 16364  003F0E  1402               	andwf	i2___ftpack@arg+1,w,c
 16365  003F10  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 16366  003F12  0EFF               	movlw	255
 16367  003F14  1403               	andwf	i2___ftpack@arg+2,w,c
 16368  003F16  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 16369  003F18  5006               	movf	??i2___ftpack,w,c
 16370  003F1A  1007               	iorwf	??i2___ftpack+1,w,c
 16371  003F1C  1008               	iorwf	??i2___ftpack+2,w,c
 16372  003F1E  B4D8               	btfsc	status,2,c
 16373  003F20  D006               	goto	i2l3520
 16374  003F22  D7E6               	goto	i2l3512
 16375  003F24                     i2l3518:
 16376  003F24  0604               	decf	i2___ftpack@exp,f,c
 16377  003F26  90D8               	bcf	status,0,c
 16378  003F28  3601               	rlcf	i2___ftpack@arg,f,c
 16379  003F2A  3602               	rlcf	i2___ftpack@arg+1,f,c
 16380  003F2C  3603               	rlcf	i2___ftpack@arg+2,f,c
 16381  003F2E                     i2l3520:
 16382  003F2E  BE02               	btfsc	i2___ftpack@arg+1,7,c
 16383  003F30  D003               	goto	i2l765
 16384  003F32  0E02               	movlw	2
 16385  003F34  6004               	cpfslt	i2___ftpack@exp,c
 16386  003F36  D7F6               	goto	i2l3518
 16387  003F38                     i2l765:
 16388  003F38  A004               	btfss	i2___ftpack@exp,0,c
 16389  003F3A  9E02               	bcf	i2___ftpack@arg+1,7,c
 16390  003F3C  90D8               	bcf	status,0,c
 16391  003F3E  3204               	rrcf	i2___ftpack@exp,f,c
 16392  003F40  5004               	movf	i2___ftpack@exp,w,c
 16393  003F42  1203               	iorwf	i2___ftpack@arg+2,f,c
 16394  003F44  5005               	movf	i2___ftpack@sign,w,c
 16395  003F46  A4D8               	btfss	status,2,c
 16396  003F48  8E03               	bsf	i2___ftpack@arg+2,7,c
 16397  003F4A  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 16398  003F4E  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 16399  003F52  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 16400  003F56  0012               	return	
 16401  003F58                     __end_ofi2___ftpack:
 16402                           	opt stack 0
 16403                           pclatu	equ	0xFFB
 16404                           pclath	equ	0xFFA
 16405                           tblptru	equ	0xFF8
 16406                           tblptrh	equ	0xFF7
 16407                           tblptrl	equ	0xFF6
 16408                           tablat	equ	0xFF5
 16409                           prodh	equ	0xFF4
 16410                           prodl	equ	0xFF3
 16411                           intcon	equ	0xFF2
 16412                           intcon2	equ	0xFF1
 16413                           intcon3	equ	0xFF0
 16414                           postinc0	equ	0xFEE
 16415                           fsr0h	equ	0xFEA
 16416                           fsr0l	equ	0xFE9
 16417                           wreg	equ	0xFE8
 16418                           fsr1h	equ	0xFE2
 16419                           fsr1l	equ	0xFE1
 16420                           indf2	equ	0xFDF
 16421                           postinc2	equ	0xFDE
 16422                           postdec2	equ	0xFDD
 16423                           fsr2h	equ	0xFDA
 16424                           fsr2l	equ	0xFD9
 16425                           status	equ	0xFD8
 16426                           
 16427 ;; *************** function i2___ftneg *****************
 16428 ;; Defined at:
 16429 ;;		line 15 in file "/Applications/microchip/xc8/v1.40/sources/common/ftneg.c"
 16430 ;; Parameters:    Size  Location     Type
 16431 ;;  f1              3    0[COMRAM] float 
 16432 ;; Auto vars:     Size  Location     Type
 16433 ;;		None
 16434 ;; Return value:  Size  Location     Type
 16435 ;;                  3    0[COMRAM] float 
 16436 ;; Registers used:
 16437 ;;		wreg, status,2, status,0
 16438 ;; Tracked objects:
 16439 ;;		On entry : 0/0
 16440 ;;		On exit  : 0/0
 16441 ;;		Unchanged: 0/0
 16442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16443 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16446 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16447 ;;Total ram usage:        3 bytes
 16448 ;; Hardware stack levels used:    1
 16449 ;; This function calls:
 16450 ;;		Nothing
 16451 ;; This function is called by:
 16452 ;;		i2_printf
 16453 ;; This function uses a non-reentrant model
 16454 ;;
 16455                           
 16456                           	psect	text66
 16457  00499A                     __ptext66:
 16458                           	opt stack 0
 16459  00499A                     i2___ftneg:
 16460                           	opt stack 22
 16461                           
 16462                           ;incstack = 0
 16463  00499A  5001               	movf	i2___ftneg@f1,w,c
 16464  00499C  1002               	iorwf	i2___ftneg@f1+1,w,c
 16465  00499E  1003               	iorwf	i2___ftneg@f1+2,w,c
 16466  0049A0  B4D8               	btfsc	status,2,c
 16467  0049A2  D006               	goto	i2l862
 16468  0049A4  0E00               	movlw	0
 16469  0049A6  1A01               	xorwf	i2___ftneg@f1,f,c
 16470  0049A8  0E00               	movlw	0
 16471  0049AA  1A02               	xorwf	i2___ftneg@f1+1,f,c
 16472  0049AC  0E80               	movlw	128
 16473  0049AE  1A03               	xorwf	i2___ftneg@f1+2,f,c
 16474  0049B0                     i2l862:
 16475  0049B0  C001  F001         	movff	i2___ftneg@f1,?i2___ftneg
 16476  0049B4  C002  F002         	movff	i2___ftneg@f1+1,?i2___ftneg+1
 16477  0049B8  C003  F003         	movff	i2___ftneg@f1+2,?i2___ftneg+2
 16478  0049BC  0012               	return		;funcret
 16479  0049BE                     __end_ofi2___ftneg:
 16480                           	opt stack 0
 16481                           pclatu	equ	0xFFB
 16482                           pclath	equ	0xFFA
 16483                           tblptru	equ	0xFF8
 16484                           tblptrh	equ	0xFF7
 16485                           tblptrl	equ	0xFF6
 16486                           tablat	equ	0xFF5
 16487                           prodh	equ	0xFF4
 16488                           prodl	equ	0xFF3
 16489                           intcon	equ	0xFF2
 16490                           intcon2	equ	0xFF1
 16491                           intcon3	equ	0xFF0
 16492                           postinc0	equ	0xFEE
 16493                           fsr0h	equ	0xFEA
 16494                           fsr0l	equ	0xFE9
 16495                           wreg	equ	0xFE8
 16496                           fsr1h	equ	0xFE2
 16497                           fsr1l	equ	0xFE1
 16498                           indf2	equ	0xFDF
 16499                           postinc2	equ	0xFDE
 16500                           postdec2	equ	0xFDD
 16501                           fsr2h	equ	0xFDA
 16502                           fsr2l	equ	0xFD9
 16503                           status	equ	0xFD8
 16504                           
 16505 ;; *************** function i2___ftge *****************
 16506 ;; Defined at:
 16507 ;;		line 4 in file "/Applications/microchip/xc8/v1.40/sources/common/ftge.c"
 16508 ;; Parameters:    Size  Location     Type
 16509 ;;  ff1             3    0[COMRAM] float 
 16510 ;;  ff2             3    3[COMRAM] float 
 16511 ;; Auto vars:     Size  Location     Type
 16512 ;;		None
 16513 ;; Return value:  Size  Location     Type
 16514 ;;		None               void
 16515 ;; Registers used:
 16516 ;;		wreg, status,2, status,0
 16517 ;; Tracked objects:
 16518 ;;		On entry : 0/0
 16519 ;;		On exit  : 0/0
 16520 ;;		Unchanged: 0/0
 16521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16522 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16524 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16525 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16526 ;;Total ram usage:        9 bytes
 16527 ;; Hardware stack levels used:    1
 16528 ;; This function calls:
 16529 ;;		Nothing
 16530 ;; This function is called by:
 16531 ;;		i2_printf
 16532 ;; This function uses a non-reentrant model
 16533 ;;
 16534                           
 16535                           	psect	text67
 16536  0041E4                     __ptext67:
 16537                           	opt stack 0
 16538  0041E4                     i2___ftge:
 16539                           	opt stack 22
 16540                           
 16541                           ;incstack = 0
 16542  0041E4  AE03               	btfss	i2___ftge@ff1+2,7,c
 16543  0041E6  D016               	goto	i2l4484
 16544  0041E8  C001  F007         	movff	i2___ftge@ff1,??i2___ftge
 16545  0041EC  C002  F008         	movff	i2___ftge@ff1+1,??i2___ftge+1
 16546  0041F0  C003  F009         	movff	i2___ftge@ff1+2,??i2___ftge+2
 16547  0041F4  1E07               	comf	??i2___ftge,f,c
 16548  0041F6  1E08               	comf	??i2___ftge+1,f,c
 16549  0041F8  1E09               	comf	??i2___ftge+2,f,c
 16550  0041FA  2A07               	incf	??i2___ftge,f,c
 16551  0041FC  0E00               	movlw	0
 16552  0041FE  2208               	addwfc	??i2___ftge+1,f,c
 16553  004200  2209               	addwfc	??i2___ftge+2,f,c
 16554  004202  0E00               	movlw	0
 16555  004204  2407               	addwf	??i2___ftge,w,c
 16556  004206  6E01               	movwf	i2___ftge@ff1,c
 16557  004208  0E00               	movlw	0
 16558  00420A  2008               	addwfc	??i2___ftge+1,w,c
 16559  00420C  6E02               	movwf	i2___ftge@ff1+1,c
 16560  00420E  0E80               	movlw	128
 16561  004210  2009               	addwfc	??i2___ftge+2,w,c
 16562  004212  6E03               	movwf	i2___ftge@ff1+2,c
 16563  004214                     i2l4484:
 16564  004214  AE06               	btfss	i2___ftge@ff2+2,7,c
 16565  004216  D016               	goto	i2l4488
 16566  004218  C004  F007         	movff	i2___ftge@ff2,??i2___ftge
 16567  00421C  C005  F008         	movff	i2___ftge@ff2+1,??i2___ftge+1
 16568  004220  C006  F009         	movff	i2___ftge@ff2+2,??i2___ftge+2
 16569  004224  1E07               	comf	??i2___ftge,f,c
 16570  004226  1E08               	comf	??i2___ftge+1,f,c
 16571  004228  1E09               	comf	??i2___ftge+2,f,c
 16572  00422A  2A07               	incf	??i2___ftge,f,c
 16573  00422C  0E00               	movlw	0
 16574  00422E  2208               	addwfc	??i2___ftge+1,f,c
 16575  004230  2209               	addwfc	??i2___ftge+2,f,c
 16576  004232  0E00               	movlw	0
 16577  004234  2407               	addwf	??i2___ftge,w,c
 16578  004236  6E04               	movwf	i2___ftge@ff2,c
 16579  004238  0E00               	movlw	0
 16580  00423A  2008               	addwfc	??i2___ftge+1,w,c
 16581  00423C  6E05               	movwf	i2___ftge@ff2+1,c
 16582  00423E  0E80               	movlw	128
 16583  004240  2009               	addwfc	??i2___ftge+2,w,c
 16584  004242  6E06               	movwf	i2___ftge@ff2+2,c
 16585  004244                     i2l4488:
 16586  004244  0E00               	movlw	0
 16587  004246  1A01               	xorwf	i2___ftge@ff1,f,c
 16588  004248  0E00               	movlw	0
 16589  00424A  1A02               	xorwf	i2___ftge@ff1+1,f,c
 16590  00424C  0E80               	movlw	128
 16591  00424E  1A03               	xorwf	i2___ftge@ff1+2,f,c
 16592  004250  0E00               	movlw	0
 16593  004252  1A04               	xorwf	i2___ftge@ff2,f,c
 16594  004254  0E00               	movlw	0
 16595  004256  1A05               	xorwf	i2___ftge@ff2+1,f,c
 16596  004258  0E80               	movlw	128
 16597  00425A  1A06               	xorwf	i2___ftge@ff2+2,f,c
 16598  00425C  5004               	movf	i2___ftge@ff2,w,c
 16599  00425E  5C01               	subwf	i2___ftge@ff1,w,c
 16600  004260  5005               	movf	i2___ftge@ff2+1,w,c
 16601  004262  5802               	subwfb	i2___ftge@ff1+1,w,c
 16602  004264  5006               	movf	i2___ftge@ff2+2,w,c
 16603  004266  5803               	subwfb	i2___ftge@ff1+2,w,c
 16604  004268  B0D8               	btfsc	status,0,c
 16605  00426A  D002               	goto	i2l4494
 16606  00426C  90D8               	bcf	status,0,c
 16607  00426E  0012               	return	
 16608  004270                     i2l4494:
 16609  004270  80D8               	bsf	status,0,c
 16610  004272  0012               	return	
 16611  004274                     __end_ofi2___ftge:
 16612                           	opt stack 0
 16613                           pclatu	equ	0xFFB
 16614                           pclath	equ	0xFFA
 16615                           tblptru	equ	0xFF8
 16616                           tblptrh	equ	0xFF7
 16617                           tblptrl	equ	0xFF6
 16618                           tablat	equ	0xFF5
 16619                           prodh	equ	0xFF4
 16620                           prodl	equ	0xFF3
 16621                           intcon	equ	0xFF2
 16622                           intcon2	equ	0xFF1
 16623                           intcon3	equ	0xFF0
 16624                           postinc0	equ	0xFEE
 16625                           fsr0h	equ	0xFEA
 16626                           fsr0l	equ	0xFE9
 16627                           wreg	equ	0xFE8
 16628                           fsr1h	equ	0xFE2
 16629                           fsr1l	equ	0xFE1
 16630                           indf2	equ	0xFDF
 16631                           postinc2	equ	0xFDE
 16632                           postdec2	equ	0xFDD
 16633                           fsr2h	equ	0xFDA
 16634                           fsr2l	equ	0xFD9
 16635                           status	equ	0xFD8
 16636                           pclatu	equ	0xFFB
 16637                           pclath	equ	0xFFA
 16638                           tblptru	equ	0xFF8
 16639                           tblptrh	equ	0xFF7
 16640                           tblptrl	equ	0xFF6
 16641                           tablat	equ	0xFF5
 16642                           prodh	equ	0xFF4
 16643                           prodl	equ	0xFF3
 16644                           intcon	equ	0xFF2
 16645                           intcon2	equ	0xFF1
 16646                           intcon3	equ	0xFF0
 16647                           postinc0	equ	0xFEE
 16648                           fsr0h	equ	0xFEA
 16649                           fsr0l	equ	0xFE9
 16650                           wreg	equ	0xFE8
 16651                           fsr1h	equ	0xFE2
 16652                           fsr1l	equ	0xFE1
 16653                           indf2	equ	0xFDF
 16654                           postinc2	equ	0xFDE
 16655                           postdec2	equ	0xFDD
 16656                           fsr2h	equ	0xFDA
 16657                           fsr2l	equ	0xFD9
 16658                           status	equ	0xFD8
 16659                           
 16660                           	psect	rparam
 16661  0000                     pclatu	equ	0xFFB
 16662                           pclath	equ	0xFFA
 16663                           tblptru	equ	0xFF8
 16664                           tblptrh	equ	0xFF7
 16665                           tblptrl	equ	0xFF6
 16666                           tablat	equ	0xFF5
 16667                           prodh	equ	0xFF4
 16668                           prodl	equ	0xFF3
 16669                           intcon	equ	0xFF2
 16670                           intcon2	equ	0xFF1
 16671                           intcon3	equ	0xFF0
 16672                           postinc0	equ	0xFEE
 16673                           fsr0h	equ	0xFEA
 16674                           fsr0l	equ	0xFE9
 16675                           wreg	equ	0xFE8
 16676                           fsr1h	equ	0xFE2
 16677                           fsr1l	equ	0xFE1
 16678                           indf2	equ	0xFDF
 16679                           postinc2	equ	0xFDE
 16680                           postdec2	equ	0xFDD
 16681                           fsr2h	equ	0xFDA
 16682                           fsr2l	equ	0xFD9
 16683                           status	equ	0xFD8
 16684                           
 16685                           	psect	temp
 16686  00007B                     btemp:
 16687                           	opt stack 0
 16688  00007B                     	ds	1
 16689  0000                     int$flags	set	btemp
 16690                           pclatu	equ	0xFFB
 16691                           pclath	equ	0xFFA
 16692                           tblptru	equ	0xFF8
 16693                           tblptrh	equ	0xFF7
 16694                           tblptrl	equ	0xFF6
 16695                           tablat	equ	0xFF5
 16696                           prodh	equ	0xFF4
 16697                           prodl	equ	0xFF3
 16698                           intcon	equ	0xFF2
 16699                           intcon2	equ	0xFF1
 16700                           intcon3	equ	0xFF0
 16701                           postinc0	equ	0xFEE
 16702                           fsr0h	equ	0xFEA
 16703                           fsr0l	equ	0xFE9
 16704                           wreg	equ	0xFE8
 16705                           fsr1h	equ	0xFE2
 16706                           fsr1l	equ	0xFE1
 16707                           indf2	equ	0xFDF
 16708                           postinc2	equ	0xFDE
 16709                           postdec2	equ	0xFDD
 16710                           fsr2h	equ	0xFDA
 16711                           fsr2l	equ	0xFD9
 16712                           status	equ	0xFD8


Data Sizes:
    Strings     196
    Constant    174
    Data        0
    BSS         26
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    116     122
    BANK0           128    125     125
    BANK1           256     11      31
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_20(CODE[17]), STR_19(CODE[17]), STR_18(CODE[6]), STR_17(CODE[15]), 
		 -> STR_16(CODE[12]), STR_15(CODE[15]), STR_14(CODE[12]), STR_13(CODE[15]), 
		 -> STR_12(CODE[14]), STR_11(CODE[15]), STR_10(CODE[13]), STR_9(CODE[15]), 
		 -> STR_8(CODE[14]), STR_7(CODE[15]), STR_6(CODE[10]), STR_5(CODE[15]), 
		 -> STR_4(CODE[17]), STR_3(CODE[15]), STR_2(CODE[15]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    calculate_elapsed_time@time	PTR unsigned char  size(2) Largest target is 7
		 -> main@time(BANK1[7]), 

    current_time@time	PTR unsigned char  size(2) Largest target is 7
		 -> main@time(BANK1[7]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _keypressed in COMRAM

    _keypressed->_select_menu
    i2_lcdInst->i2_lcdNibble
    _select_menu->i2_printf
    i2_printf->i2___ftsub
    i2_scale->i2___ftmul
    i2_putch->i2_lcdNibble
    i2_fround->i2___ftmul
    i2___wmul->i2___awdiv
    i2___ftmul->i2___wmul
    i2___awdiv->i2___awmod
    i2___lltoft->i2___ftpack
    i2___llmod->i2___lldiv
    i2___fttol->i2_scale
    i2___ftsub->i2___ftadd
    i2___ftadd->i2_fround

Critical Paths under _main in BANK0

    _main->_show_log
    _show_log->_printf
    _printf->___ftsub
    _scale->___ftmul
    _putch->_lcdNibble
    _fround->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _set_time->_I2C_Master_Write
    _initLCD->_lcdInst
    _current_time->_I2C_Master_Read
    _current_time->_I2C_Master_Write
    _current_time->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _convert_voltage->___ftdiv
    ___ftmul->___wmul
    ___ftdiv->___ftmul
    ___awtoft->___ftpack
    _I2C_Master_Init->___lldiv

Critical Paths under _keypressed in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _keypressed in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _keypressed in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _keypressed in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _keypressed in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _keypressed in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _keypressed in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _keypressed in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _keypressed in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _keypressed in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _keypressed in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _keypressed in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _keypressed in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _keypressed in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _keypressed in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _keypressed in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                13    13      0  106162
                                            123 BANK0      2     2      0
                                              0 BANK1     11    11      0
                   _Eeprom_WriteByte
                    _I2C_Master_Init
             _calculate_elapsed_time
                        _clean_count
                    _convert_voltage
                       _current_time
                            _initLCD
                            _lcdInst
                       _move_stepper
                       _next_address
                             _printf
                            _readADC
                           _set_time
                           _show_log
                        _termination
 ---------------------------------------------------------------------------------
 (1) _termination                                          2     0      2      86
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _show_log                                            15    13      2   46900
                                            108 BANK0     15    13      2
                    _Eeprom_ReadByte
                            _lcdInst
                       _next_address
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              51    38     13   45271
                                             63 BANK0     45    32     13
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                    _convert_voltage (ARG)
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   10311
                                             35 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   10113
                                             35 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2337
                                             14 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1448
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1580
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     431
                                              0 BANK0     15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     591
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2242
                                              8 BANK0      9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     671
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     444
                                             42 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    3604
                                             57 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    3307
                                             45 BANK0     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     109
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     520
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (2) _next_address                                         2     0      2     598
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _Eeprom_ReadByte                                      2     0      2     364
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _set_time                                             1     1      0     474
                                              3 BANK0      1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _move_stepper                                         7     3      4     174
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _current_time                                         5     3      2     762
                                              3 BANK0      5     3      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _convert_voltage                                      8     4      4    9535
                                             50 BANK0      8     4      4
                           ___awtoft
                            ___ftdiv
                            ___ftmul
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    4457
                                             20 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2619
                                             35 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    2264
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2109
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _clean_count                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calculate_elapsed_time                               7     5      2     152
                                              0 BANK0      7     5      2
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     888
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     802
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _Eeprom_WriteByte                                     3     0      3     706
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _keypressed                                          16    16      0   21353
                                            100 COMRAM    16    16      0
                        _select_menu
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (7) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) _select_menu                                          3     3      0   21195
                                             97 COMRAM     3     3      0
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) i2_printf                                            40    38      2   20733
                                             63 COMRAM    34    32      2
                          i2___awdiv
                          i2___ftadd
                           i2___ftge
                          i2___ftmul
                          i2___ftneg
                          i2___ftsub
                          i2___fttol
                          i2___lldiv
                          i2___llmod
                         i2___lltoft
                           i2___wmul
                       i2__div_to_l_
                      i2__tdiv_to_l_
                           i2_fround
                          i2_isdigit
                            i2_putch
                            i2_scale
 ---------------------------------------------------------------------------------
 (9) i2_scale                                             13    10      3    4633
                                             35 COMRAM     7     4      3
                          i2___awdiv
                          i2___awmod
                          i2___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (9) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (9) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (9) i2_fround                                            16    13      3    4435
                                             35 COMRAM    10     7      3
                          i2___awdiv
                          i2___awmod
                          i2___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4    1041
                                             14 COMRAM     6     2      4
                          i2___awdiv (ARG)
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___ftmul                                          15     9      6    1519
                                             20 COMRAM    15     9      6
                          i2___awdiv (ARG)
                          i2___awmod (ARG)
                         i2___ftpack
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___awmod                                           6     2      4     764
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i2___awdiv                                           8     4      4     820
                                              6 COMRAM     8     4      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (9) i2__tdiv_to_l_                                       15     9      6     355
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (9) i2__div_to_l_                                        12     6      6     481
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (9) i2___lltoft                                           9     5      4     560
                                              8 COMRAM     9     5      4
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (9) i2___llmod                                            9     1      8     367
                                             13 COMRAM     9     1      8
                          i2___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (9) i2___lldiv                                           13     5      8     370
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (9) i2___fttol                                           15    11      4     330
                                             42 COMRAM    15    11      4
                          i2___ftmul (ARG)
                            i2_scale (ARG)
 ---------------------------------------------------------------------------------
 (9) i2___ftsub                                            6     0      6    1528
                                             57 COMRAM     6     0      6
                          i2___ftadd
                         i2___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___ftadd                                          12     6      6    1409
                                             45 COMRAM    12     6      6
                         i2___ftpack
                           i2_fround (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___ftpack                                          8     3      5     465
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (9) i2___ftneg                                            3     0      3      71
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (9) i2___ftge                                             9     3      6     292
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Eeprom_WriteByte
   _I2C_Master_Init
     ___lldiv
   _calculate_elapsed_time
   _clean_count
   _convert_voltage
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _current_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _lcdInst
       _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _move_stepper
   _next_address
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _convert_voltage (ARG)
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _lcdNibble
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _readADC
   _set_time
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _show_log
     _Eeprom_ReadByte
     _lcdInst
       _lcdNibble
     _next_address
     _printf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _convert_voltage (ARG)
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _termination

 _keypressed (ROOT)
   _select_menu
     i2_printf
       i2___awdiv
         i2___awmod (ARG)
       i2___ftadd
         i2___ftpack
         i2_fround (ARG)
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
       i2___ftge
       i2___ftmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2___ftneg
       i2___ftsub
         i2___ftadd
           i2___ftpack
           i2_fround (ARG)
             i2___awdiv
               i2___awmod (ARG)
             i2___awmod
             i2___ftmul
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___wmul
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___lltoft (ARG)
           i2___ftpack
       i2___fttol
         i2___ftmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2_scale (ARG)
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
       i2___lldiv
       i2___llmod
         i2___lldiv (ARG)
       i2___lltoft
         i2___ftpack
       i2___wmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
       i2__div_to_l_
       i2__tdiv_to_l_
       i2_fround
         i2___awdiv
           i2___awmod (ARG)
         i2___awmod
         i2___ftmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2_isdigit
       i2_putch
         i2_lcdNibble
       i2_scale
         i2___awdiv
           i2___awmod (ARG)
         i2___awmod
         i2___ftmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
   i2_lcdInst
     i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      B      1F       7       12.1%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     7D      7D       5       97.7%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     74      7A       1       96.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     116      34        0.0%
DATA                 0      0     116       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Feb 27 15:44:56 2017

       __end_of_Eeprom_WriteByte 494E                     ___awdiv@sign 008B  
            ___wmul@multiplicand 0090                      __CFG_BORV$3 000000  
                     i2___ftpack 3EAA                     __CFG_CP0$OFF 000000  
                   __CFG_CP1$OFF 000000                     __CFG_CP2$OFF 000000  
                   __CFG_CP3$OFF 000000                      __CFG_OSC$HS 000000  
                   ___ftadd@exp1 00B8                     ___ftadd@exp2 00B7  
                     i2___lltoft 45F0                     ___ftadd@sign 00B6  
                            l151 16FE                              l154 1720  
                            l307 46DC                              l163 178C  
                            l308 46AE                              l172 1862  
                            l148 16DC                              l181 193A  
                            l166 17D2                              l158 1742  
                            l175 18AA                              l169 181A  
                            l178 18F2                              l453 07CE  
                            l295 4944                              l375 4A26  
                            l289 4A08                              l803 2664  
                            l812 268E                              l733 3074  
                            l830 2E28                              l486 064E  
                            l823 32FA                              l831 2E6C  
                            l912 3DE6                              l922 41D2  
                            l765 38D6                              l837 2EEC  
                            l862 4894                              l792 2566  
                            l794 258E                              l788 252C  
                   __CFG_CPB$OFF 000000                              _PEN 007E2A  
                   __CFG_CPD$OFF 000000                              _SEN 007E28  
                            _log 010E                     ___awmod@sign 0085  
                            wreg 000FE8                      main@address 011D  
                   __CFG_LVP$OFF 000000                     ___ftdiv@cntr 00AC  
                   ___ftdiv@sign 00B1                     __CFG_WDT$OFF 000000  
                           l4020 1AEC                             l4102 2EA2  
                           l4006 247C                             l4030 1BD8  
                           l4112 2ED2                             l4122 2F24  
                           l4114 2EE2                             l4106 2EB6  
                           l4026 1BB2                             l4212 336A  
                           l4044 1E02                             l4230 33FC  
                           l4150 2FF2                             l4142 2F9E  
                           l4038 1D3C                             l3600 2610  
                           l4240 342C                             l4128 2F4A  
                           l4072 2DD4                             l4056 491C  
                           l3610 2658                             l3602 261C  
                           l4242 343C                             l4234 3410  
                           l4162 302A                             l4066 2D9A  
                           l4260 3D7A                             l4180 4714  
                           l4244 3446                             l4172 305A  
                           l3700 3CDA                             l4270 3DD4  
                           l4262 3D80                             l4174 306A  
                           l4166 303E                             l3710 3D10  
                           l3702 3CE0                             l3480 388A  
                           l3472 382C                             l5304 3BF6  
                           l4192 3B72                             l3616 26B8  
                           l3608 264A                             l4248 3462  
                           l4280 4176                             l4258 3D6A  
                           l3490 38E0                             l3482 38BA  
                           l3474 383A                             l3642 30FA  
                           l5314 3C24                             l3626 2706  
                           l4282 417C                             l3714 3D1E  
                           l3730 40C4                             l3484 38C8  
                           l3476 386A                             l3468 3818  
                           l3660 3166                             l3636 30C0  
                           l5308 3C00                             l4188 3B32  
                           l3580 2584                             l4292 4382  
                           l3740 40F4                             l3670 31A4  
                           l5270 45BA                             l4198 3BB6  
                           l3590 25C6                             l3574 2574  
                           l4286 41C0                             l4278 4166  
                           l4294 4392                             l3718 3D32  
                           l3742 40FA                             l3750 412C  
                           l3734 40D4                             l4702 03A6  
                           l4622 0038                             l3496 38FC  
                           l3656 3148                             l5280 45EA  
                           l3568 253A                             l4800 081A  
                           l4712 0404                             l5600 180A  
                           l3666 3186                             l5274 45C4  
                           l3754 4140                             l3746 411E  
                           l3738 40E8                             l4730 04B6  
                           l4642 00EE                             l4618 0022  
                           l5610 1852                             l5514 152A  
                           l3596 25F4                             l3692 3CB0  
                           l4820 0896                             l4804 0844  
                           l4740 052E                             l4716 046A  
                           l4644 0128                             l4636 00E2  
                           l4628 006A                             l5620 189A  
                           l5524 15CA                             l3598 2602  
                           l3686 3C9A                             l4806 084A  
                           l4742 0536                             l4734 0506  
                           l4718 0470                             l4638 00E8  
                           l5630 18E2                             l4904 48C8  
                           l5296 48E4                             l4760 061C  
                           l4744 054A                             l5640 192A  
                           l5528 15E6                             l4930 321E  
                           l5298 48F6                             l3698 3CCE  
                           l4850 0970                             l4842 0922  
                           l4818 0890                             l4834 08DC  
                           l4762 0630                             l4754 0600  
                           l4738 0528                             l4690 0318  
                           l4682 02A4                             l4674 0234  
                           l4658 0182                             l5650 196A  
                           l5562 1710                             l4860 09C0  
                           l4836 08EE                             l4772 0676  
                           l4756 060E                             l4748 0572  
                           l4692 032E                             l5556 16EE  
                           l5548 16CE                             l4862 0A44  
                           l4870 0ACC                             l4854 098A  
                           l4846 095A                             l4782 07A4  
                           l4766 0652                             l4686 02D2  
                           l5590 17C4                             l5486 1496  
                           l4936 3258                             l4872 0AD4  
                           l4848 0964                             l4784 07B2  
                           l4776 06C8                             l4688 02E8  
                           l5568 1732                             _ADFM 007E07  
                           l4858 09B0                             l4698 0378  
                           l4874 0AEA                             l5578 1772  
                           l5498 14C2                             l4956 32B8  
                           l4868 0ABA                             l4788 07C0  
                           l3998 2398                             l4978 47A0  
                           _ADON 007E10            __size_ofi2__div_to_l_ 0128  
                           STR_1 FF7F                             STR_2 FF9F  
                           STR_3 FF90                             STR_4 FF5D  
                           STR_5 FF90                             STR_6 FFEF  
                           STR_7 FF90                             STR_8 FFAE  
                           STR_9 FF90                             _LATA 000F89  
                           _LATB 000F8A                             _LATC 000F8B  
                           _LATD 000F8C                             _LATE 000F8D  
                           u3601 24F8                     printf@tmpval 00DE  
                           u4501 2DB0                             u3801 309C  
                           u3821 30D6                             u4710 3390  
                           u5350 01C8                             u3591 24DA  
                           u4481 2D76                             u4715 3386  
                           u5355 01BC                             u5540 0646  
                           _RCEN 007E2B                             u6350 49EC  
                           u6610 14CE                             u4691 3346  
                           u5740 48C6                             u6285 4564  
                           u6650 16AC                             u6618 14D2  
                           u5771 31FA                             u6660 16AE  
                           u6670 16C4                             u5791 3234  
                           u6680 16C6                             u6907 3C4C  
                           u6917 3C6E                             u6837 15B0  
                           u6927 4486                             u6847 48EC  
                           u6937 4490                             u6857 46B4  
                           u6947 44BC                             u6867 46BE  
                           u6957 44C6                             u6877 46CC  
                           u6887 4746                             u6897 477A  
                           _RSEN 007E29                             _main 1432  
                   ___ftpack@arg 0080                             _menu 0110  
                           _keys FF23                     ___ftpack@exp 0083  
                           fsr0h 000FEA                             fsr1h 000FE2  
                           fsr2h 000FDA                             fsr0l 000FE9  
                           indf2 000FDF                             fsr1l 000FE1  
                           fsr2l 000FD9                             _quit 0077  
                           btemp 007B                     i2___ftadd@f1 002E  
                   i2___ftadd@f2 0031                     i2___ftge@ff1 0001  
                   i2___ftge@ff2 0004                             prodh 000FF4  
                           prodl 000FF3                             start 000E  
                  __CFG_IESO$OFF 000000                  __end_ofi2_scale 2218  
                   i2___ftneg@f1 0001                  __end_ofi2_putch 4A72  
                  __CFG_MCLRE$ON 000000                     ___ftmul@cntr 00A1  
                   i2___ftmul@f1 0015                     i2___ftmul@f2 0018  
                   ___param_bank 000000                     ___ftmul@sign 00A2  
                   i2___ftsub@f1 003A                     i2___ftsub@f2 003D  
                   i2___fttol@f1 002B                    show_log@C_num 00F1  
                    i2_lcdNibble 464C                     ___fttol@exp1 00B8  
                   i2___lltoft@c 0009                     ___fttol@lval 00B4  
               ?_I2C_Master_Init 008D                 ?_I2C_Master_Read 0001  
               ?_I2C_Master_Wait 0001                 ?_I2C_Master_Stop 0001  
         convert_voltage@reading 00B8                            ?_main 0001  
                          _ACKEN 007E2C                            _ACKDT 007E2D  
                __end_of___awdiv 3D3C                            _EEADR 000FA9  
                __end_of___ftadd 272C                            STR_10 FFCA  
                          STR_11 FF90                            STR_12 FFBC  
                          STR_20 FF4C                            STR_13 FF90  
                          STR_21 FF3B                            STR_14 FFE3  
                          STR_15 FF90                            STR_16 FFD7  
                          STR_17 FF90                            STR_18 FFF9  
                          STR_19 FF6E                  __end_of___awmod 414A  
                __end_of___ftdiv 3330                  __end_of___ftneg 48A2  
                __end_of___lldiv 3DF8                  __end_of___ftmul 31E4  
                ___awdiv@divisor 0088                  __end_of___llmod 41E4  
                __end_of___ftsub 473E                  __end_of___fttol 3474  
                          i2l194 3E6E                            i2l453 1190  
                          i2l803 2CD2                            i2l812 2CEE  
                          i2l733 37EC                            i2l830 3506  
                          i2l486 1030                            i2l831 352E  
                          i2l912 4368                            i2l922 4522  
                          i2l765 3F38                            i2l837 3594  
                          i2l862 49B0                            i2l792 2C22  
                          i2l788 2BF8                  ___awdiv@counter 008A  
                          _PORTB 000F81                     i2__div_to_l_ 36D6  
                          _TRISA 000F92                            _TRISB 000F93  
                          _TRISC 000F94                            _TRISD 000F95  
                          _TRISE 000F96                            _C_num 0102  
                  __CFG_PWRT$OFF 000000                    __CFG_WRT0$OFF 000000  
                  __CFG_WRT1$OFF 000000                    __CFG_WRT2$OFF 000000  
                  __CFG_WRT3$OFF 000000                     ___lltoft@exp 0090  
                __end_of_lcdInst 4A5A                   __CFG_EBTR0$OFF 000000  
                 __CFG_FCMEN$OFF 000000                   __CFG_EBTR1$OFF 000000  
                 __CFG_EBTR2$OFF 000000                   __CFG_EBTR3$OFF 000000  
                          _nRBPU 007F8F                    __CFG_WRTB$OFF 000000  
                  __CFG_WRTC$OFF 000000                    __CFG_WRTD$OFF 000000  
     calculate_elapsed_time@time 0080                  __end_of_readADC 48FC  
                __end_of_initLCD 4784                   __CFG_EBTRB$OFF 000000  
                     i2isdigit@c 0003                    ___awtoft@sign 008B  
                          _ended 0075                  __end_of_dpowers FEB5  
               ?_Eeprom_ReadByte 0080                       i2scale@scl 002A  
                          _scale 197A                  __end_of_isdigit 4926  
                  ___ftpack@sign 0084                            _putch 4A3A  
              ??_convert_voltage 00B6                            pclath 000FFA  
                          tablat 000FF5                 __end_ofi2___ftge 4274  
               __end_ofi2___wmul 499A                            status 000FD8  
               __end_ofi2_fround 2972               __size_ofi2___awdiv 0084  
             __size_ofi2___ftadd 01AC               __size_ofi2___awmod 0070  
                 __CFG_PBADEN$ON 000000                    i2printf@width 004E  
             __size_ofi2___ftneg 0024               __size_ofi2___lldiv 0082  
             __size_ofi2___ftmul 00F4               __size_ofi2___llmod 0066  
             __size_ofi2___ftsub 0040               __size_ofi2___fttol 00F4  
               __end_ofi2_printf 1432                  select_menu@temp 0064  
                 show_log@AA_num 00EF                  __initialization 494E  
              i2___lldiv@divisor 0005             __size_of_clean_count 0034  
             __size_ofi2_lcdInst 000C                     __end_of_main 197A  
              i2___lldiv@counter 000D                     __end_of_keys FF34  
                  i2___ftmul@exp 001E              next_address@address 0080  
                     i2printf@ap 004C               __size_ofi2_isdigit 001E  
                    ?i2___ftpack 0001                      ?i2___lltoft 0009  
                         ??_main 00FB                    ___fttol@sign1 00B3  
                  __activetblptr 000002             __size_of__tdiv_to_l_ 019E  
              ?_I2C_Master_Start 0001                ?_I2C_Master_Write 0081  
              show_log@Drain_num 00F5               ??_I2C_Master_Start 0081  
                         _ADCON0 000FC2                           _ADCON1 000FC1  
             ??_I2C_Master_Write 0083                 ___llmod@dividend 008D  
                         ?_scale 00A3                     ?_select_menu 0001  
                         _ADRESH 000FC4                           _EEADRH 000FAA  
                         _ADRESL 000FC3                           _EEDATA 000FA8  
                         _EECON2 000FA7                 ___awdiv@dividend 0086  
                i2lcdNibble@data 0002                 __end_of___awtoft 47C8  
                         ?_putch 0001                 __end_of___ftpack 390A  
                i2lcdNibble@temp 0001                 __end_of___lltoft 43F6  
                         _AA_num 0100                           _INT1IE 007F83  
                         _INT1IF 007F80                           i2l5010 0BF0  
                         i2l5002 0BB2                           i2l5100 0F22  
                         i2l5004 0BB6                           i2l3510 3ED2  
                         i2l5110 0F52                           i2l3520 3F2E  
                         i2l3512 3EF0                           i2l3504 3EBA  
                         i2l5200 126E                           i2l5120 0FF6  
                         i2l5104 0F38                           i2l5040 0CD0  
                         i2l5024 0C40                           i2l5008 0BBA  
                         i2l4410 37B2                           i2l4322 2932  
                         i2l4314 2872                           i2l5202 127E  
                         i2l5122 1000                           i2l5114 0F6E  
                         i2l5106 0F3E                           i2l3516 3F06  
                         i2l3508 3EC8                           i2l4420 37DA  
                         i2l5220 12E8                           i2l5212 12C4  
                         i2l5132 1034                           i2l5108 0F44  
                         i2l5052 0D58                           i2l3518 3F24  
                         i2l4422 37E6                           i2l4414 37C2  
                         i2l4430 34A0                           i2l4342 2000  
                         i2l5214 12CC                           i2l5150 117A  
                         i2l5142 109C                           i2l5126 100C  
                         i2l5054 0D68                           i2l4360 21F4  
                         i2l4336 1F5C                           i2l5224 1302  
                         i2l5216 12D4                           i2l5208 12A0  
                         i2l5128 101A                           i2l5064 0DDA  
                         i2l5056 0D96                           i2l5048 0D34  
                         i2l5240 1416                           i2l4506 47DE  
                         i2l4602 4514                           i2l4610 4602  
                         i2l4370 36F4                           i2l3802 42AE  
                         i2l4354 2150                           i2l4346 2024  
                         i2l5226 130E                           i2l5234 13F0  
                         i2l5170 11F6                           i2l5154 1186  
                         i2l5138 104C                           i2l5082 0EB6  
                         i2l5058 0DA6                           i2l5410 2A60  
                         i2l5402 2A38                           i2l3900 2C8C  
                         i2l4516 3A2A                           i2l4436 34CC  
                         i2l3804 42B6                           i2l5228 1386  
                         i2l5236 1400                           i2l5172 11FA  
                         i2l5148 1170                           i2l5084 0EBA  
                         i2l5068 0DFE                           i2l3910 2CC0  
                         i2l3902 2C96                           i2l4534 3A90  
                         i2l4390 3754                           i2l4470 356A  
                         i2l3822 42EE                           i2l3814 42D6  
                         i2l3806 42BA                           i2l5238 1406  
                         i2l5166 11D0                           i2l5078 0E52  
                         i2l5430 2ACE                           i2l5422 2A9C  
                         i2l5414 2A74                           i2l5406 2A4C  
                         i2l3912 2CCA                           i2l3904 2C9E  
                         i2l4552 3AE0                           i2l4544 3AB8  
                         i2l4608 45F6                           i2l4376 3712  
                         i2l5184 1232                           i2l5096 0EF2  
                         i2l4546 3AC4                           i2l4538 3AA0  
                         i2l4466 355A                           i2l3818 42E0  
                         i2l3850 4444                           i2l3842 4424  
                         i2l3834 440A                           i2l5186 1236  
                         i2l5450 2B50                           i2l5442 2B1E  
                         i2l5434 2AEC                           i2l5426 2AB0  
                         i2l5418 2A88                           i2l5370 2998  
                         i2l4484 4214                           i2l4548 3ACA  
                         i2l4476 3582                           i2l3844 442C  
                         i2l4564 49D4                           i2l5452 2B5E  
                         i2l4494 4270                           i2l3918 2D0A  
                         i2l3870 2C06                           i2l4574 431A  
                         i2l4398 3784                           i2l4478 358E  
                         i2l3790 4288                           i2l3846 4430  
                         i2l3854 444E                           i2l3838 4416  
                         i2l5446 2B32                           i2l5438 2B0A  
                         i2l5390 29FC                           i2l5382 29D4  
                         i2l5374 29AC                           i2l5366 2976  
                         i2l4488 4244                           i2l3928 2D3A  
                         i2l4576 4326                           i2l3944 395A  
                         i2l4586 435A                           i2l4578 432A  
                         i2l4594 44E0                           i2l3858 445C  
                         i2l3962 399C                           i2l3938 3932  
                         i2l5394 2A10                           i2l5386 29E8  
                         i2l5378 29C0                           i2l3892 2C60  
                         i2l3876 2C30                           i2l4596 44EC  
                         i2l3796 4298                           i2l3972 39C4  
                         i2l4598 44F0                           i2l3958 398C  
                         i2l5398 2A24                           i2l3968 39B4  
                         i2l3898 2C82                           u410_41 2BC4  
                         i2l4984 0B16                           i2l4994 0B54  
                         i2l4988 0B28                           u411_41 2BD8  
                         u500_41 34B0                           u431_41 391A  
                         u512_41 3A0E                        ??i2_scale 0027  
                         u433_41 3942                           u498_41 3484  
                      ??i2_putch 0003                           _SSPADD 000FC8  
                         _TRISC3 007CA3                           _TRISC4 007CA4  
                         _SSPBUF 000FC9                    ?_current_time 0083  
         __size_ofi2__tdiv_to_l_ 0132                   __CFG_XINST$OFF 000000  
                   i2_scale$1513 0027                 __end_of__powers_ FF03  
               current_time@time 0083                           ___ftge 3AF2  
                         ___wmul 4808                        ??___awdiv 008A  
                      ??___ftadd 00B3                   __CFG_STVREN$ON 000000  
                      ??___awmod 0084                        ??___ftdiv 00A9  
                      ??___ftneg 0083                        ??___lldiv 0088  
                      ??___ftmul 009A                        ??___llmod 0095  
                      ??___ftsub 00BF                        ??___fttol 00AE  
                         _fround 2218                           clear_0 4954  
               ___awdiv@quotient 008C                  ___awmod@divisor 0082  
                ___awmod@counter 0084                        ??_lcdInst 0082  
                         _printf 0012          ?_calculate_elapsed_time 0080  
                 i2___awdiv@sign 000C            ___ftmul@f3_as_product 009E  
                      ??_readADC 0080                        ??_initLCD 0083  
                      ??_isdigit 0080                __end_ofi2___awdiv 42F8  
              __end_ofi2___ftadd 2D60                 __end_of_set_time 45F0  
              __end_ofi2___awmod 4466                   i2___ftadd@exp1 0039  
                 i2___ftadd@exp2 0038                __end_ofi2___ftneg 49BE  
              __end_ofi2___lldiv 437A                __end_ofi2___ftmul 39FE  
              __end_ofi2___llmod 4534                __end_ofi2___ftsub 4808  
              __end_ofi2___fttol 3AF2                   i2___ftadd@sign 0037  
                   __mediumconst FE8C                 __end_of_show_log 36D6  
                         tblptrh 000FF7          Eeprom_WriteByte@address 0080  
                         tblptrl 000FF6                           tblptru 000FF8  
                 i2___awmod@sign 0006                     ?_termination 0080  
              __end_ofi2_lcdInst 4A66                __end_ofi2_isdigit 49DC  
                     __accesstop 0080          __end_of__initialization 4966  
                 ??_current_time 0085                       ___ftadd@f1 00AD  
                     ___ftadd@f2 00B0              __size_ofi2___ftpack 00AE  
                 i2printf@tmpval 0054                       ___ftge@ff1 0080  
                     ___ftge@ff2 0083              __size_ofi2___lltoft 005C  
                  ___rparam_used 000001                       ___ftdiv@f1 00A3  
                     ___ftdiv@f2 00A6                       ___ftdiv@f3 00AD  
                     ___ftneg@f1 0080                       ___awtoft@c 0088  
                 i2___ftpack@arg 0001               i2__tdiv_to_l_@exp1 000F  
              i2___llmod@divisor 0012                   i2___ftpack@exp 0004  
             i2__tdiv_to_l_@cntr 000E                i2___llmod@counter 0016  
             i2__tdiv_to_l_@quot 000A                       ___ftmul@f1 0094  
                     ___ftmul@f2 0097                       ___ftsub@f1 00B9  
                     ___ftsub@f2 00BC                       ___fttol@f1 00AA  
           __end_of_happynewyear FF3B                   __pcstackCOMRAM 0001  
             i2___lldiv@dividend 0001                       ___lltoft@c 0088  
                 i2___ftmul@cntr 0022                    __end_of_scale 1E28  
                 i2___ftmul@sign 0023   __end_of_calculate_elapsed_time 4002  
                  __end_of_putch 4A4A                ?_Eeprom_WriteByte 0080  
                    i2printf@idx 004B                      i2printf@exp 0058  
                    i2printf@val 005A                   i2___fttol@exp1 0039  
                 i2___fttol@lval 0035                        ?i2___ftge 0001  
             ??_Eeprom_WriteByte 0083                        ?i2___wmul 000F  
                  i2__tdiv_to_l_ 3474               __size_of_lcdNibble 0068  
                     __div_to_l_ 2EFE                      i2putch@data 0003  
                      ?i2_fround 0024                        ?i2_printf 0040  
            show_log@log_address 00EC                  __div_to_l_@exp1 008B  
                __div_to_l_@cntr 008A                          ??_scale 00A6  
                 i2___lltoft@exp 0011                  __div_to_l_@quot 0086  
                        ??_putch 0082               i2___lldiv@quotient 0009  
                     __pbssBANK1 0100                 i2__tdiv_to_l_@f1 0001  
               i2__tdiv_to_l_@f2 0004                    ?_next_address 0080  
                show_log@address 00F9               convert_voltage@low 00B4  
                  __div_to_l_@f1 0080                    __div_to_l_@f2 0083  
                        ?___ftge 0080                     ?i2_lcdNibble 0001  
                        ?___wmul 008E                          ?_fround 00A3  
                      ?___awtoft 0088                        ?___ftpack 0080  
                        ?_printf 00BF                        ?___lltoft 0088  
                 ?i2__tdiv_to_l_ 0001                       ??i2___ftge 0007  
                _convert_voltage 4002                       ??i2___wmul 0013  
                     ??i2_fround 0027                   main@is_battery 011B  
                     ??i2_printf 0042             show_log@elapsed_time 00F7  
                        _SSPCON1 000FC6                          _SSPCON2 000FC5  
                        _SSPSTAT 000FC7                   ??_next_address 0082  
                        i2_scale 1E28             __size_of_select_menu 0242  
                        i2_putch 4A66                __end_of_lcdNibble 44CE  
              __end_of__npowers_ FEDC                          __Hparam 0000  
                     _scale$1339 00A6                          __Lparam 0000  
                  ?_move_stepper 0080                        ?_set_time 0001  
           Eeprom_WriteByte@data 0082                        ?_show_log 00EC  
                __size_of___ftge 00C8                          ___awdiv 3C7E  
                        ___ftadd 24C4                          ___awmod 40A8  
                        ___ftdiv 31E4                          ___ftneg 4872  
                        ___lldiv 3D3C                  __size_of___wmul 0036  
                        ___ftmul 3086                          ___llmod 414A  
                        ___ftsub 46F2                          ___fttol 3330  
                      _CMCONbits 000FB4                          __pcinit 494E  
                   ??i2___ftpack 0006                       ??___awtoft 008B  
                     ??___ftpack 0085                  __size_of_fround 02AC  
        i2___ftmul@f3_as_product 001F                          __ramtop 1000  
                   ??i2___lltoft 000D                          _lcdInst 4A4A  
                     ??___lltoft 008C                          __ptext0 1432  
                        __ptext1 49DC                          __ptext2 35A6  
                        __ptext3 0012                          __ptext4 197A  
                        __ptext5 4A3A                          __ptext6 48FC  
                        __ptext7 2218                          __ptext8 4808  
                        __ptext9 40A8                  __size_of_printf 0AF8  
           __end_of_current_time 3C7E                    i2_fround$1511 002A  
                  i2_fround$1512 0027                          _readADC 48D0  
                        _initLCD 473E                __end_of_hexpowers FF23  
                    ?__div_to_l_ 0080                          _dpowers FE8D  
                  i2_isdigit$999 0002                     i2fround@prec 002D  
                        _isdigit 48FC                          _is_wait 010C  
               ___awmod@dividend 0080                       _keypressed 0008  
                   _elapsed_time 0108         __size_of_I2C_Master_Init 0060  
       __size_of_I2C_Master_Read 002E         __size_of_I2C_Master_Wait 0014  
       __size_of_I2C_Master_Stop 0008                          _started 0079  
                 __pintcode_body 3DF8             end_of_initialization 4966  
           __size_of_termination 001C                    __Lmediumconst FE8C  
                        int_func 3DF8              i2___wmul@multiplier 000F  
             __end_ofi2___ftpack 3F58                    ??_clean_count 0080  
       __size_of_Eeprom_ReadByte 0018        __size_of_I2C_Master_Start 0008  
             __end_ofi2___lltoft 464C        __size_of_I2C_Master_Write 000A  
                ___lldiv@divisor 0084                   ??_move_stepper 0084  
                ___lldiv@counter 008C                       ??_set_time 0083  
                        printf@c 00EB                          printf@f 00BF  
               I2C_Master_Init@c 008D                 I2C_Master_Read@a 0081  
                        postdec2 000FDD                       ??_show_log 00EE  
        __end_of_convert_voltage 40A8                          postinc0 000FEE  
                        postinc2 000FDE                   __tdiv_to_l_@f1 0080  
                 __tdiv_to_l_@f2 0083                  ??i2__tdiv_to_l_ 0007  
                  ??__tdiv_to_l_ 0086                        _PORTAbits 000F80  
                   _happynewyear FF34                        i2___awdiv 4274  
                      i2___ftadd 2BB4                        i2___awmod 43F6  
                      i2___ftneg 499A                        i2___lldiv 42F8  
                      i2___ftmul 390A                        i2___llmod 44CE  
                      i2___ftsub 47C8                        i2___fttol 39FE  
                      i2_lcdInst 4A5A                      ___ftdiv@exp 00B0  
                    printf@width 00D8               i2___llmod@dividend 000E  
             i2___awdiv@dividend 0007                  i2___ftpack@sign 0005  
                      i2_isdigit 49BE              __size_of__div_to_l_ 0188  
                    ___ftmul@exp 009D              __end_of_clean_count 4872  
                 __end_of___ftge 3BBA                   __end_of___wmul 483E  
                      _Drain_num 0104             __size_ofi2_lcdNibble 0056  
           __end_of_next_address 4A26                    i2lcdInst@data 0003  
                 __end_of_fround 24C4                 i2___wmul@product 0013  
                 __end_of_printf 0B0A                    i2_printf$1514 0048  
                   i2printf@flag 0050                     i2printf@fval 005E  
                   i2printf@prec 0052              start_initialization 494E  
              __size_ofi2___ftge 0090                      ?_keypressed 0001  
             i2___awdiv@quotient 000D                __size_ofi2___wmul 0026  
            __end_of__tdiv_to_l_ 2EFE                        i2printf@c 0061  
                      i2printf@f 0040                  i2___fttol@sign1 0034  
              __size_ofi2_fround 0246                       ?i2___awdiv 0007  
                     ?i2___ftadd 002E                       ?i2___awmod 0001  
                     ?i2___ftneg 0001                       ?i2___lldiv 0001  
                     ?i2___ftmul 0015                       ?i2___llmod 000E  
                     ?i2___ftsub 003A                       ?i2___fttol 002B  
      __size_of_Eeprom_WriteByte 0028                __size_ofi2_printf 0928  
              ??_I2C_Master_Init 0091                ??_I2C_Master_Read 0081  
              ??_I2C_Master_Wait 0080                       ?i2_lcdInst 0001  
              ??_I2C_Master_Stop 0081                  ___llmod@divisor 0091  
                ___llmod@counter 0095                       ?i2_isdigit 0001  
               show_log@Nine_num 00F3                         ??___ftge 0086  
                       ??___wmul 0092                 ?_convert_voltage 00B2  
          __size_of_current_time 00C4                ??_Eeprom_ReadByte 0082  
               __CFG_LPT1OSC$OFF 000000                         ??_fround 00A6  
                       ??_printf 00CC                       fround@prec 00AC  
                  ?i2__div_to_l_ 0001                __size_of___awtoft 0044  
              __size_of___ftpack 010C                __size_of___lltoft 007C  
                    __pbssCOMRAM 0075                    __pcstackBANK0 0080  
                  __pcstackBANK1 0114             __end_of_move_stepper 46F2  
            convert_voltage@high 00B2                         ?i2_scale 0024  
                       ?i2_putch 0001                     _current_time 3BBA  
               _I2C_Master_Start 4A84                 _I2C_Master_Write 4A72  
                    _clean_count 483E                __CFG_CCP2MX$PORTC 000000  
            __size_of_keypressed 3EA2                        __pintcode 0008  
                  __pmediumconst FE8C                        _lcdNibble 4466  
                       ?___awdiv 0086                         ?___ftadd 00AD  
                       ?___awmod 0080                         ?___ftdiv 00A3  
                       ?___ftneg 0080                         ?___lldiv 0080  
                       ?___ftmul 0094                         ?___llmod 008D  
                       ?___ftsub 00B9                        __npowers_ FEB5  
                       ?___fttol 00AA                __size_of_set_time 005C  
              __size_of_show_log 0130                         ?_lcdInst 0001  
                    __tdiv_to_l_ 2D60                   ??i2__div_to_l_ 0007  
                   ??__div_to_l_ 0086                         ?_readADC 0001  
                       ?_initLCD 0001                         ?_isdigit 0001  
                      _is_active 010A                        _hexpowers FF03  
                  ??_select_menu 0062                      ??i2___awdiv 000B  
                    ??i2___ftadd 0034                      ??i2___awmod 0005  
                    ??i2___ftneg 0004                      ??i2___lldiv 0009  
                    ??i2___ftmul 001B                   __size_of_scale 04AE  
                    ??i2___llmod 0016                      ??i2___ftsub 0040  
                    ??i2___fttol 002F                   __size_of_putch 0010  
                    ??i2_lcdInst 0003                   ___wmul@product 0092  
                       _LATCbits 000F8B                         _LATDbits 000F8C  
                    ??i2_isdigit 0001         ??_calculate_elapsed_time 0082  
             __end_of__div_to_l_ 3086                         i2u514_40 3A48  
                       i2u514_45 3A40                         _PIR2bits 000FA1  
                       i2u700_47 469A                         i2u608_40 102A  
                       i2u638_40 298E                         i2u639_40 2990  
                       i2u589_40 0C78                         i2u589_45 0C6E  
                       i2u696_47 3E42                         i2u697_47 4664  
                       i2u698_47 466E            __size_of_next_address 0016  
                       i2u699_47 4690                 __CFG_WDTPS$32768 000000  
                     ?_lcdNibble 0001                    move_stepper@i 0085  
                i2__div_to_l_@f1 0001                  i2__div_to_l_@f2 0004  
                     _ADCON0bits 000FC2                ___wmul@multiplier 008E  
                       i2___ftge 41E4                         i2___wmul 4974  
                  lcdNibble@data 0081                       printf@flag 00DA  
                  lcdNibble@temp 0080                       printf@fval 00E8  
                      _total_num 0112                       printf@prec 00DC  
              i2___awdiv@divisor 0009                         i2_fround 272C  
              i2___awdiv@counter 000B                         i2_printf 0B0A  
                  ??_termination 0082              I2C_Master_Read@temp 0082  
               _Eeprom_WriteByte 4926               i2___awmod@dividend 0001  
                   _next_address 4A10                 __size_ofi2_scale 03F0  
               __size_ofi2_putch 000C                         _Nine_num 0106  
            __end_of_select_menu 2BB4                       _EECON1bits 000FA6  
             keypressed@keypress 0074                         __Hrparam 0000  
                       __Lrparam 0000               __CFG_BOREN$SBORDIS 000000  
               __size_of___awdiv 00BE                 __size_of___ftadd 0268  
               __size_of___awmod 00A2                 __size_of___ftdiv 014C  
               __size_of___ftneg 0030            i2___wmul@multiplicand 0011  
               __size_of___lldiv 00BC                 __size_of___ftmul 015E  
               __size_of___llmod 009A                 __size_of___ftsub 004C  
               __size_of___fttol 0144                   readADC@channel 0081  
                       ___awtoft 4784                         ___ftpack 37FE  
                    _fround$1337 00A9                      _fround$1338 00A6  
          __size_of_move_stepper 0050                         ___lltoft 437A  
          __end_ofi2__tdiv_to_l_ 35A6        move_stepper@loop_duration 0080  
         Eeprom_ReadByte@address 0080                      _isdigit$999 0081  
               __size_of_lcdInst 0010                  _I2C_Master_Init 4534  
               __size_of_readADC 002C                  _I2C_Master_Read 48A2  
               __size_of_initLCD 0046                  _I2C_Master_Wait 4A26  
                _I2C_Master_Stop 4A7C                     ??_keypressed 0065  
               __size_of_isdigit 002A                         __ptext10 3C7E  
                       __ptext11 2D60                         __ptext20 4A10  
                       __ptext12 2EFE                         __ptext21 49F8  
                       __ptext13 437A                         __ptext30 4A7C  
                       __ptext22 4594                         __ptext14 414A  
                       __ptext31 4A84                         __ptext23 48D0  
                       __ptext15 3330                         __ptext40 3F58  
                       __ptext32 48A2                         __ptext24 46A2  
                       __ptext16 46F2                         __ptext41 4534  
                       __ptext33 4A26                         __ptext25 473E  
                       __ptext17 24C4                         __ptext50 464C  
                       __ptext42 3D3C                         __ptext34 4002  
                       __ptext26 3BBA                         __ptext18 4872  
                       __ptext51 49BE                         __ptext43 4926  
                       __ptext35 3086                         __ptext27 4A4A  
                       __ptext19 3AF2                         __ptext60 44CE  
                       __ptext52 272C                         __ptext36 31E4  
                       __ptext28 4466                         __ptext61 42F8  
                       __ptext53 4974                         __ptext45 4A5A  
                       __ptext37 4784                         __ptext29 4A72  
                       __ptext62 39FE                         __ptext54 390A  
                       __ptext46 2972                         __ptext38 37FE  
                       __ptext63 47C8                         __ptext55 43F6  
                       __ptext47 0B0A                         __ptext39 483E  
                       __ptext64 2BB4                         __ptext56 4274  
                       __ptext48 1E28                         __ptext65 3EAA  
                       __ptext57 3474                         __ptext49 4A66  
                       __ptext66 499A                         __ptext58 36D6  
                       __ptext67 41E4                         __ptext59 45F0  
                       __powers_ FEDC                    __size_of_main 0548  
                _Eeprom_ReadByte 49F8              __end_of_termination 49F8  
           __end_ofi2__div_to_l_ 37FE                        set_time@i 0083  
__size_of_calculate_elapsed_time 00AA                     _move_stepper 46A2  
                       _set_time 4594                    ??i2_lcdNibble 0001  
                    ??_lcdNibble 0080                         _show_log 35A6  
             __end_of_keypressed 3EAA                         int$flags 007B  
                      printf@idx 00D5                        printf@exp 00E2  
                      printf@val 00E4                         main@time 0114  
              i2___awmod@divisor 0003                        putch@data 0082  
              i2___awmod@counter 0005         __end_of_I2C_Master_Start 4A8C  
       __end_of_I2C_Master_Write 4A7C                       _INTCONbits 000FF2  
            termination@time_now 0080                    current_time@i 0087  
                       isdigit@c 0082                         scale@scl 00A9  
                    _select_menu 2972                         intlevel2 0000  
               __tdiv_to_l_@exp1 008E                 __tdiv_to_l_@cntr 008D  
               __tdiv_to_l_@quot 0089                 move_stepper@duty 0082  
               ___lldiv@dividend 0080                     ?_clean_count 0001  
                       printf@ap 00D6          __end_of_I2C_Master_Init 4594  
        __end_of_I2C_Master_Read 48D0          __end_of_I2C_Master_Wait 4A3A  
        __end_of_I2C_Master_Stop 4A84                      lcdInst@data 0082  
                   ?__tdiv_to_l_ 0080                      _printf$1340 00D2  
            __end_ofi2_lcdNibble 46A2                 ___lldiv@quotient 0088  
       __size_of_convert_voltage 00A6                I2C_Master_Write@d 0081  
         _calculate_elapsed_time 3F58          __end_of_Eeprom_ReadByte 4A10  
                    _termination 49DC                i2__div_to_l_@exp1 000C  
              i2__div_to_l_@cntr 000B                i2__div_to_l_@quot 0007  
